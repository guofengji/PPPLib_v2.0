!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/bb4f87c/
$(PROG)	samples/OpenGL/Cube/Makefile	/^$(PROG):	$(SRCS)$/;"	t
A Simple example of shared and static compilations	samples/STL/shared-static-libs/README.md	/^## A Simple example of shared and static compilations$/;"	s
ABOUT_H	samples/Qt/file-splitter-joiner/about.h	/^#define ABOUT_H$/;"	d
ADDSPLITTEDFILEDIALOG_H	samples/Qt/file-splitter-joiner/addsplittedfiledialog.h	/^#define ADDSPLITTEDFILEDIALOG_H$/;"	d
About	samples/Qt/file-splitter-joiner/about.cpp	/^About::About(QWidget *parent) :$/;"	f	class:About
About	samples/Qt/file-splitter-joiner/about.h	/^class About : public QWidget {$/;"	c
AbstractRegistry	src/easylogging++.h	/^  AbstractRegistry(AbstractRegistry&& sr) {$/;"	f	class:el::base::utils::AbstractRegistry
AbstractRegistry	src/easylogging++.h	/^  AbstractRegistry(void) {}$/;"	f	class:el::base::utils::AbstractRegistry
AbstractRegistry	src/easylogging++.h	/^class AbstractRegistry : public base::threading::ThreadSafe {$/;"	c	namespace:el::base::utils
Acknowledgements	ACKNOWLEDGEMENTS.md	/^# Acknowledgements$/;"	c
AddSplittedFileDialog	samples/Qt/file-splitter-joiner/addsplittedfiledialog.cpp	/^AddSplittedFileDialog::AddSplittedFileDialog(QTreeWidget* parentView, QWidget *parent) :$/;"	f	class:AddSplittedFileDialog
AddSplittedFileDialog	samples/Qt/file-splitter-joiner/addsplittedfiledialog.h	/^class AddSplittedFileDialog : public QDialog {$/;"	c
Added	CHANGELOG.md	/^### Added$/;"	S
AllowVerboseIfModuleNotSpecified	src/easylogging++.h	/^  AllowVerboseIfModuleNotSpecified = 2,$/;"	e	enum:el::LoggingFlag
And	src/easylogging++.h	/^static inline base::type::EnumType And(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType
AppName	src/easylogging++.h	/^  AppName = 1 << 11,$/;"	e	enum:el::base::FormatFlags
Application Arguments	README.md	/^### Application Arguments$/;"	S
Args	samples/STL/pthread.cpp	/^struct Args {$/;"	s	file:
AsyncConnector	samples/gtkmm/sigc++.cpp	/^    AsyncConnector() {}$/;"	f	class:AsyncConnector	file:
AsyncConnector	samples/gtkmm/sigc++.cpp	/^class AsyncConnector {$/;"	c	file:
AsyncDispatchWorker	src/easylogging++.cc	/^AsyncDispatchWorker::AsyncDispatchWorker() {$/;"	f	class:el::base::AsyncDispatchWorker
AsyncDispatchWorker	src/easylogging++.h	/^class AsyncDispatchWorker : public base::IWorker, public base::threading::ThreadSafe {$/;"	c	namespace:el::base
AsyncLogDispatchCallback	src/easylogging++.h	/^class AsyncLogDispatchCallback : public LogDispatchCallback {$/;"	c	namespace:el::base
AsyncLogItem	src/easylogging++.h	/^  explicit AsyncLogItem(const LogMessage& logMessage, const LogDispatchData& data, const base::t/;"	f	class:el::base::AsyncLogItem
AsyncLogItem	src/easylogging++.h	/^class AsyncLogItem {$/;"	c	namespace:el::base
AsyncLogQueue	src/easylogging++.h	/^class AsyncLogQueue : public base::threading::ThreadSafe {$/;"	c	namespace:el::base
Asynchronous Logging	README.md	/^### Asynchronous Logging$/;"	S
AutoSpacing	src/easylogging++.h	/^  AutoSpacing = 8192,$/;"	e	enum:el::LoggingFlag
BOX_SIZE	samples/OpenGL/Cube/main.cpp	/^const float BOX_SIZE = 7.0f; \/\/The length of each side of the cube$/;"	v	typeref:typename:const float
BUILD_STR	test/test.h	/^#define BUILD_STR(/;"	d
BaseName	tools/cpplint.py	/^  def BaseName(self):$/;"	m	class:FileInfo
Basic	README.md	/^### Basic$/;"	S
Basic	README.md	/^#### Basic$/;"	t
Begin	tools/cpplint.py	/^  def Begin(self, function_name):$/;"	m	class:_FunctionState
Boost Logging	README.md	/^### Boost Logging$/;"	S
CC	samples/OpenGL/Cube/Makefile	/^CC = g++$/;"	m
CHECK Macros	README.md	/^### CHECK Macros$/;"	S
CMAKE_CXX_STANDARD	CMakeLists.txt	/^                set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	CMakeLists.txt	/^                set(CMAKE_CXX_STANDARD_REQUIRED on)$/;"	v
CMAKE_EXE_LINKER_FLAGS	CMakeLists.txt	/^        set(CMAKE_EXE_LINKER_FLAGS "-O2 -s TOTAL_MEMORY=134217728")$/;"	v
CMAKE_MODULE_PATH	CMakeLists.txt	/^    set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}\/cmake")$/;"	v
COMMAND_LINE_ARGS_TEST_H	test/command-line-args-test.h	/^#define COMMAND_LINE_ARGS_TEST_H$/;"	d
CONFIGURATIONS_TEST_H_	test/configurations-test.h	/^#define CONFIGURATIONS_TEST_H_$/;"	d
CUSTOM_FORMAT_SPECIFIER_TEST_H	test/custom-format-specifier-test.h	/^#define CUSTOM_FORMAT_SPECIFIER_TEST_H$/;"	d
Callback	src/easylogging++.h	/^  Callback(void) : m_enabled(true) {}$/;"	f	class:el::Callback
Callback	src/easylogging++.h	/^class Callback : protected base::threading::ThreadSafe {$/;"	c	namespace:el
CanonicalizeAlphabeticalOrder	tools/cpplint.py	/^  def CanonicalizeAlphabeticalOrder(self, header_path):$/;"	m	class:_IncludeState
Change Log	CHANGELOG.md	/^# Change Log$/;"	c
Changes	CHANGELOG.md	/^### Changes$/;"	S
Check	tools/cpplint.py	/^  def Check(self, error, filename, linenum):$/;"	m	class:_FunctionState
Check If Verbose Logging Is On	README.md	/^#### Check If Verbose Logging Is On$/;"	t
CheckAccess	tools/cpplint.py	/^def CheckAccess(filename, clean_lines, linenum, nesting_state, error):$/;"	f
CheckAltTokens	tools/cpplint.py	/^def CheckAltTokens(filename, clean_lines, linenum, error):$/;"	f
CheckBegin	tools/cpplint.py	/^  def CheckBegin(self, filename, clean_lines, linenum, error):$/;"	m	class:_BlockInfo
CheckBegin	tools/cpplint.py	/^  def CheckBegin(self, filename, clean_lines, linenum, error):$/;"	m	class:_ClassInfo
CheckBraces	tools/cpplint.py	/^def CheckBraces(filename, clean_lines, linenum, error):$/;"	f
CheckCStyleCast	tools/cpplint.py	/^def CheckCStyleCast(filename, linenum, line, raw_line, cast_type, pattern,$/;"	f
CheckCheck	tools/cpplint.py	/^def CheckCheck(filename, clean_lines, linenum, error):$/;"	f
CheckComment	tools/cpplint.py	/^def CheckComment(comment, filename, linenum, error):$/;"	f
CheckCompletedBlocks	tools/cpplint.py	/^  def CheckCompletedBlocks(self, filename, error):$/;"	m	class:_NestingState
CheckEmptyBlockBody	tools/cpplint.py	/^def CheckEmptyBlockBody(filename, clean_lines, linenum, error):$/;"	f
CheckEnd	tools/cpplint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_BlockInfo
CheckEnd	tools/cpplint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_ClassInfo
CheckEnd	tools/cpplint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_NamespaceInfo
CheckForBadCharacters	tools/cpplint.py	/^def CheckForBadCharacters(filename, lines, error):$/;"	f
CheckForCopyright	tools/cpplint.py	/^def CheckForCopyright(filename, lines, error):$/;"	f
CheckForFunctionLengths	tools/cpplint.py	/^def CheckForFunctionLengths(filename, clean_lines, linenum,$/;"	f
CheckForHeaderGuard	tools/cpplint.py	/^def CheckForHeaderGuard(filename, lines, error):$/;"	f
CheckForIncludeWhatYouUse	tools/cpplint.py	/^def CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error,$/;"	f
CheckForMultilineCommentsAndStrings	tools/cpplint.py	/^def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):$/;"	f
CheckForNewlineAtEOF	tools/cpplint.py	/^def CheckForNewlineAtEOF(filename, lines, error):$/;"	f
CheckForNonConstReference	tools/cpplint.py	/^def CheckForNonConstReference(filename, clean_lines, linenum,$/;"	f
CheckForNonStandardConstructs	tools/cpplint.py	/^def CheckForNonStandardConstructs(filename, clean_lines, linenum,$/;"	f
CheckIncludeLine	tools/cpplint.py	/^def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):$/;"	f
CheckInvalidIncrement	tools/cpplint.py	/^def CheckInvalidIncrement(filename, clean_lines, linenum, error):$/;"	f
CheckLanguage	tools/cpplint.py	/^def CheckLanguage(filename, clean_lines, linenum, file_extension,$/;"	f
CheckMakePairUsesDeduction	tools/cpplint.py	/^def CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):$/;"	f
CheckNextIncludeOrder	tools/cpplint.py	/^  def CheckNextIncludeOrder(self, header_type):$/;"	m	class:_IncludeState
CheckPosixThreading	tools/cpplint.py	/^def CheckPosixThreading(filename, clean_lines, linenum, error):$/;"	f
CheckSectionSpacing	tools/cpplint.py	/^def CheckSectionSpacing(filename, clean_lines, class_info, linenum, error):$/;"	f
CheckSpacing	tools/cpplint.py	/^def CheckSpacing(filename, clean_lines, linenum, nesting_state, error):$/;"	f
CheckSpacingForFunctionCall	tools/cpplint.py	/^def CheckSpacingForFunctionCall(filename, line, linenum, error):$/;"	f
CheckStyle	tools/cpplint.py	/^def CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state,$/;"	f
CheckVlogArguments	tools/cpplint.py	/^def CheckVlogArguments(filename, clean_lines, linenum, error):$/;"	f
CleanseComments	tools/cpplint.py	/^def CleanseComments(line):$/;"	f
CleanseRawStrings	tools/cpplint.py	/^def CleanseRawStrings(raw_lines):$/;"	f
CleansedLines	tools/cpplint.py	/^class CleansedLines(object):$/;"	c
Client	samples/send-to-network/network-logger.cpp	/^    Client(boost::asio::io_service* svc, const std::string& host, const std::string& port) $/;"	f	class:Client	file:
Client	samples/send-to-network/network-logger.cpp	/^class Client$/;"	c	file:
CloseExpression	tools/cpplint.py	/^def CloseExpression(clean_lines, linenum, pos):$/;"	f
ColoredTerminalOutput	src/easylogging++.h	/^  ColoredTerminalOutput = 64,$/;"	e	enum:el::LoggingFlag
CommandLineArgs	src/easylogging++.h	/^  CommandLineArgs(int argc, char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs
CommandLineArgs	src/easylogging++.h	/^  CommandLineArgs(int argc, const char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs
CommandLineArgs	src/easylogging++.h	/^  CommandLineArgs(void) {$/;"	f	class:el::base::utils::CommandLineArgs
CommandLineArgs	src/easylogging++.h	/^class CommandLineArgs {$/;"	c	namespace:el::base::utils
Compatibility	README.md	/^# Compatibility$/;"	c
Conditional Logging	README.md	/^### Conditional Logging$/;"	S
Conditional Performance Tracking	README.md	/^#### Conditional Performance Tracking$/;"	t
Conditional and Occasional Logging	README.md	/^#### Conditional and Occasional Logging$/;"	t
Configuration	README.md	/^# Configuration$/;"	c
Configuration	src/easylogging++.cc	/^Configuration::Configuration(Level level, ConfigurationType configurationType, const std::string/;"	f	class:el::Configuration
Configuration	src/easylogging++.cc	/^Configuration::Configuration(const Configuration& c) :$/;"	f	class:el::Configuration
Configuration	src/easylogging++.h	/^class Configuration : public Loggable {$/;"	c	namespace:el
Configuration Macros	README.md	/^### Configuration Macros$/;"	S
ConfigurationStringToTypeItem	src/easylogging++.cc	/^struct ConfigurationStringToTypeItem {$/;"	s	namespace:el	file:
ConfigurationType	src/easylogging++.h	/^enum class ConfigurationType : base::type::EnumType {$/;"	g	namespace:el	typeref:typename:base::type::EnumType
ConfigurationTypeHelper	src/easylogging++.h	/^class ConfigurationTypeHelper : base::StaticClass {$/;"	c	namespace:el
Configurations	src/easylogging++.cc	/^Configurations::Configurations(const std::string& configurationFile, bool useDefaultsForRemainin/;"	f	class:el::Configurations
Configurations	src/easylogging++.cc	/^Configurations::Configurations(void) :$/;"	f	class:el::Configurations
Configurations	src/easylogging++.h	/^class Configurations : public base::utils::RegistryWithPred<Configuration, Configuration::Predic/;"	c	namespace:el
Configure	README.md	/^### Configure$/;"	S
Contribution	README.md	/^# Contribution$/;"	c
Count	tools/cpplint.py	/^  def Count(self):$/;"	m	class:_FunctionState
Crash Handling	README.md	/^### Crash Handling$/;"	S
CrashHandler	src/easylogging++.cc	/^CrashHandler::CrashHandler(bool useDefault) {$/;"	f	class:el::base::debug::CrashHandler
Crasher	samples/STL/crash.cpp	/^    Crasher(void) { $/;"	f	class:Crasher	file:
Crasher	samples/STL/crash.cpp	/^class Crasher {$/;"	c	file:
CreateLoggerAutomatically	src/easylogging++.h	/^  CreateLoggerAutomatically = 4096,$/;"	e	enum:el::LoggingFlag
CriticalData	samples/VC++/VCPP2015_Win32_Multithreaded/VCPP2015_Win32/main.cpp	/^int CriticalData = 0;$/;"	v	typeref:typename:int
Custom Format Specifiers	README.md	/^### Custom Format Specifiers$/;"	S
CustomFormatSpecifier	src/easylogging++.h	/^  CustomFormatSpecifier(const char* formatSpecifier, const FormatSpecifierValueResolver& resolve/;"	f	class:el::CustomFormatSpecifier
CustomFormatSpecifier	src/easylogging++.h	/^class CustomFormatSpecifier {$/;"	c	namespace:el
DATE_UTILS_TEST_H_	test/date-utils-test.h	/^#define DATE_UTILS_TEST_H_$/;"	d
DEBUG	samples/default-logger.conf	/^* DEBUG:$/;"	k
Date/Time Format Specifiers	README.md	/^### Date\/Time Format Specifiers$/;"	S
DateTime	src/easylogging++.h	/^  DateTime = 1 << 1,$/;"	e	enum:el::base::FormatFlags
DateTime	src/easylogging++.h	/^class DateTime : base::StaticClass {$/;"	c	namespace:el::base::utils
Day	src/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
Debug	src/easylogging++.h	/^  Debug = 4,$/;"	e	enum:el::Level
Default Configurations	README.md	/^### Default Configurations$/;"	S
DefaultLogBuilder	src/easylogging++.h	/^class DefaultLogBuilder : public LogBuilder {$/;"	c	namespace:el::base
DefaultLogDispatchCallback	src/easylogging++.h	/^class DefaultLogDispatchCallback : public LogDispatchCallback {$/;"	c	namespace:el::base
DisableApplicationAbortOnFatalLog	src/easylogging++.h	/^  DisableApplicationAbortOnFatalLog = 8,$/;"	e	enum:el::LoggingFlag
DisablePerformanceTrackingCheckpointComparison	src/easylogging++.h	/^  DisablePerformanceTrackingCheckpointComparison = 256,$/;"	e	enum:el::LoggingFlag
DisableVModules	src/easylogging++.h	/^  DisableVModules = 512,$/;"	e	enum:el::LoggingFlag
DisableVModulesExtensions	src/easylogging++.h	/^  DisableVModulesExtensions = 1024,$/;"	e	enum:el::LoggingFlag
Disclaimer	README.md	/^# Disclaimer$/;"	c
DispatchAction	src/easylogging++.h	/^enum class DispatchAction : base::type::EnumType {$/;"	g	namespace:el::base	typeref:typename:base::type::EnumType
Download	README.md	/^### Download$/;"	S
EASYLOGGINGPP_H	src/easylogging++.h	/^#define EASYLOGGINGPP_H$/;"	d
EASYLOGGINGPP_PATHS	cmake/FindEASYLOGGINGPP.cmake	/^set(EASYLOGGINGPP_PATHS ${EASYLOGGINGPP_ROOT} $ENV{EASYLOGGINGPP_ROOT})$/;"	v
EASYLOGGING_FOR_SAMPLES_H	samples/API/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/MinGW/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/OpenGL/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/Qt/basic/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/Qt/file-splitter-joiner/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/STL/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/STL/shared-static-libs/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/STL/shared-static-libs/lib/include/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/VC++/VCPP2015_Win32/VCPP2015_Win32/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/VC++/VCPP2015_Win32_Multithreaded/VCPP2015_Win32/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/async/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/boost/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/gtkmm/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/gtkmm/hello_gtkmm/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/send-to-network/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_SAMPLES_H	samples/wxWidgets/easylogging++.h	/^#define EASYLOGGING_FOR_SAMPLES_H$/;"	d
EASYLOGGING_FOR_TEST_H	test/easylogging++.h	/^#define EASYLOGGING_FOR_TEST_H$/;"	d
EASYLOGGING_H	samples/Qt/shared-lib/myapp/easylogging++.h	/^#define EASYLOGGING_H$/;"	d
EASYLOGGING_H	samples/Qt/shared-lib/mylib/easylogging++.h	/^#define EASYLOGGING_H$/;"	d
ELPP	src/easylogging++.h	/^#define ELPP /;"	d
ELPP_ASSERT	src/easylogging++.h	/^#    define ELPP_ASSERT(/;"	d
ELPP_ASSERT	src/easylogging++.h	/^#  define ELPP_ASSERT(/;"	d
ELPP_ASYNC_LOGGING	src/easylogging++.h	/^#  define ELPP_ASYNC_LOGGING /;"	d
ELPP_CLANG_SUPPORTS_THREAD	src/easylogging++.h	/^#      define ELPP_CLANG_SUPPORTS_THREAD$/;"	d
ELPP_COMPILER_CLANG	src/easylogging++.h	/^#  define ELPP_COMPILER_CLANG /;"	d
ELPP_COMPILER_GCC	src/easylogging++.h	/^#  define ELPP_COMPILER_GCC /;"	d
ELPP_COMPILER_INTEL	src/easylogging++.h	/^#  define ELPP_COMPILER_INTEL /;"	d
ELPP_COMPILER_MSVC	src/easylogging++.h	/^#  define ELPP_COMPILER_MSVC /;"	d
ELPP_COUT	src/easylogging++.h	/^#    define ELPP_COUT /;"	d
ELPP_COUT_LINE	src/easylogging++.h	/^#  define ELPP_COUT_LINE(/;"	d
ELPP_CRT_DBG_WARNINGS	src/easylogging++.h	/^#define ELPP_CRT_DBG_WARNINGS /;"	d
ELPP_CXX0X	src/easylogging++.h	/^#    define ELPP_CXX0X /;"	d
ELPP_CXX11	src/easylogging++.h	/^#    define ELPP_CXX11 /;"	d
ELPP_CXX11	src/easylogging++.h	/^#  define ELPP_CXX11 /;"	d
ELPP_CYGWIN	src/easylogging++.h	/^#  define ELPP_CYGWIN /;"	d
ELPP_DEBUG_LOG	src/easylogging++.h	/^#  define ELPP_DEBUG_LOG /;"	d
ELPP_DEBUG_LOG	test/syslog-test.h	/^    #define ELPP_DEBUG_LOG /;"	d
ELPP_DEFAULT_LOGGING_FLAGS	src/easylogging++.cc	/^#   define ELPP_DEFAULT_LOGGING_FLAGS /;"	d	file:
ELPP_ENABLE_THREADING	test/easylogging++.h	/^#define ELPP_ENABLE_THREADING$/;"	d
ELPP_ERROR_LOG	src/easylogging++.h	/^#  define ELPP_ERROR_LOG /;"	d
ELPP_EXPORT	src/easylogging++.h	/^#    define ELPP_EXPORT /;"	d
ELPP_EXPORT	src/easylogging++.h	/^#  define ELPP_EXPORT$/;"	d
ELPP_FATAL_LOG	src/easylogging++.h	/^#  define ELPP_FATAL_LOG /;"	d
ELPP_FEATURE_CRASH_LOG	test/easylogging++.h	/^#define ELPP_FEATURE_CRASH_LOG$/;"	d
ELPP_FINAL	src/easylogging++.h	/^#  define ELPP_FINAL /;"	d
ELPP_FINAL	src/easylogging++.h	/^#  define ELPP_FINAL$/;"	d
ELPP_FORCE_ENV_VAR_FROM_BASH	test/easylogging++.h	/^#define ELPP_FORCE_ENV_VAR_FROM_BASH$/;"	d
ELPP_FUNC	src/easylogging++.h	/^#    define ELPP_FUNC /;"	d
ELPP_FUNC	src/easylogging++.h	/^#  define ELPP_FUNC /;"	d
ELPP_GCC_VERSION	src/easylogging++.h	/^#    define ELPP_GCC_VERSION /;"	d
ELPP_INCLUDE_INSTALL_DIR	CMakeLists.txt	/^set(ELPP_INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}\/include" CACHE PATH "The directory the he/;"	v
ELPP_INFO_LOG	src/easylogging++.h	/^#  define ELPP_INFO_LOG /;"	d
ELPP_INTERNAL_DEBUGGING_ENDL	src/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_ENDL /;"	d
ELPP_INTERNAL_DEBUGGING_MSG	src/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_MSG(/;"	d
ELPP_INTERNAL_DEBUGGING_OUT_ERROR	src/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_OUT_ERROR /;"	d
ELPP_INTERNAL_DEBUGGING_OUT_INFO	src/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_OUT_INFO /;"	d
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	src/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_WRITE_PERROR /;"	d
ELPP_INTERNAL_ERROR	src/easylogging++.h	/^#    define ELPP_INTERNAL_ERROR(/;"	d
ELPP_INTERNAL_ERROR	src/easylogging++.h	/^#  define ELPP_INTERNAL_ERROR(/;"	d
ELPP_INTERNAL_INFO	src/easylogging++.h	/^#    define ELPP_INTERNAL_INFO(/;"	d
ELPP_INTERNAL_INFO	src/easylogging++.h	/^#  define ELPP_INTERNAL_INFO(/;"	d
ELPP_INTERNAL_INFO_LEVEL	src/easylogging++.h	/^#    define ELPP_INTERNAL_INFO_LEVEL /;"	d
ELPP_LITERAL	src/easylogging++.h	/^#  define ELPP_LITERAL(/;"	d
ELPP_LOGGING_ENABLED	src/easylogging++.h	/^#define ELPP_LOGGING_ENABLED /;"	d
ELPP_LOG_PERMS	src/easylogging++.h	/^#  define ELPP_LOG_PERMS /;"	d
ELPP_LOG_STD_ARRAY	samples/MinGW/prog.cpp	/^#define ELPP_LOG_STD_ARRAY$/;"	d	file:
ELPP_LOG_STD_ARRAY	samples/STL/std-array.cpp	/^#define ELPP_LOG_STD_ARRAY$/;"	d	file:
ELPP_LOG_UNORDERED_MAP	samples/MinGW/prog.cpp	/^#define ELPP_LOG_UNORDERED_MAP$/;"	d	file:
ELPP_MAJOR_VERSION	CMakeLists.txt	/^set(ELPP_MAJOR_VERSION "9")$/;"	v
ELPP_MINGW	src/easylogging++.h	/^#  define ELPP_MINGW /;"	d
ELPP_MINOR_VERSION	CMakeLists.txt	/^set(ELPP_MINOR_VERSION "96")$/;"	v
ELPP_NO_DEFAULT_LOG_FILE	samples/STL/logrotate-pthread.cpp	/^#define ELPP_NO_DEFAULT_LOG_FILE$/;"	d	file:
ELPP_NO_DEFAULT_LOG_FILE	samples/STL/logrotate.cpp	/^#define ELPP_NO_DEFAULT_LOG_FILE$/;"	d	file:
ELPP_NO_DEFAULT_LOG_FILE	samples/STL/no-default-log-file.cpp	/^#define ELPP_NO_DEFAULT_LOG_FILE$/;"	d	file:
ELPP_OS_AIX	src/easylogging++.h	/^#  define ELPP_OS_AIX /;"	d
ELPP_OS_ANDROID	src/easylogging++.h	/^#  define ELPP_OS_ANDROID /;"	d
ELPP_OS_EMSCRIPTEN	src/easylogging++.h	/^#  define ELPP_OS_EMSCRIPTEN /;"	d
ELPP_OS_FREEBSD	src/easylogging++.h	/^#  define ELPP_OS_FREEBSD /;"	d
ELPP_OS_LINUX	src/easylogging++.h	/^#  define ELPP_OS_LINUX /;"	d
ELPP_OS_MAC	src/easylogging++.h	/^#  define ELPP_OS_MAC /;"	d
ELPP_OS_NETBSD	src/easylogging++.h	/^#  define ELPP_OS_NETBSD /;"	d
ELPP_OS_SOLARIS	src/easylogging++.h	/^#  define ELPP_OS_SOLARIS /;"	d
ELPP_OS_UNIX	src/easylogging++.h	/^#  define ELPP_OS_UNIX /;"	d
ELPP_OS_WINDOWS	src/easylogging++.h	/^#  define ELPP_OS_WINDOWS /;"	d
ELPP_PATCH_VERSION	CMakeLists.txt	/^set(ELPP_PATCH_VERSION "7")$/;"	v
ELPP_PERFORMANCE_MICROSECONDS	samples/MinGW/prog.cpp	/^#define ELPP_PERFORMANCE_MICROSECONDS$/;"	d	file:
ELPP_PKGCONFIG_INSTALL_DIR	CMakeLists.txt	/^set(ELPP_PKGCONFIG_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}\/share\/pkgconfig" CACHE PATH "Installat/;"	v
ELPP_STACKTRACE	src/easylogging++.h	/^#    define ELPP_STACKTRACE /;"	d
ELPP_STL_LOGGING	samples/MinGW/prog.cpp	/^#define ELPP_STL_LOGGING$/;"	d	file:
ELPP_STL_LOGGING	samples/VC++/VCPP2015_Win32_Multithreaded/VCPP2015_Win32/main.cpp	/^#define ELPP_STL_LOGGING$/;"	d	file:
ELPP_STL_LOGGING	test/easylogging++.h	/^#define ELPP_STL_LOGGING$/;"	d
ELPP_STOP_ON_FIRST_ASSERTION	test/easylogging++.h	/^#define ELPP_STOP_ON_FIRST_ASSERTION$/;"	d
ELPP_STRLEN	src/easylogging++.h	/^#  define ELPP_STRLEN /;"	d
ELPP_SYSLOG	samples/STL/syslog.cpp	/^#define ELPP_SYSLOG$/;"	d	file:
ELPP_SYSLOG	test/easylogging++.h	/^#define ELPP_SYSLOG$/;"	d
ELPP_THREADING_ENABLED	src/easylogging++.h	/^#  define ELPP_THREADING_ENABLED /;"	d
ELPP_THREAD_SAFE	samples/VC++/VCPP2015_Win32_Multithreaded/VCPP2015_Win32/main.cpp	/^#define ELPP_THREAD_SAFE$/;"	d	file:
ELPP_TRACE_LOG	src/easylogging++.h	/^#  define ELPP_TRACE_LOG /;"	d
ELPP_UNICODE	samples/STL/locale.cpp	/^#   define ELPP_UNICODE$/;"	d	file:
ELPP_UNORDERED_SET	samples/MinGW/prog.cpp	/^#define ELPP_UNORDERED_SET$/;"	d	file:
ELPP_UNUSED	src/easylogging++.h	/^#define ELPP_UNUSED(/;"	d
ELPP_USE_STD_THREADING	src/easylogging++.h	/^#    define ELPP_USE_STD_THREADING /;"	d
ELPP_USE_STD_THREADING	src/easylogging++.h	/^#  define ELPP_USE_STD_THREADING /;"	d
ELPP_VARIADIC_TEMPLATES_SUPPORTED	src/easylogging++.h	/^#define ELPP_VARIADIC_TEMPLATES_SUPPORTED /;"	d
ELPP_VERBOSE_LOG	src/easylogging++.h	/^#  define ELPP_VERBOSE_LOG /;"	d
ELPP_VERSION_STRING	CMakeLists.txt	/^set(ELPP_VERSION_STRING "${ELPP_MAJOR_VERSION}.${ELPP_MINOR_VERSION}.${ELPP_PATCH_VERSION}")$/;"	v
ELPP_WARNING_LOG	src/easylogging++.h	/^#  define ELPP_WARNING_LOG /;"	d
ELPP_WX_ENABLED	samples/wxWidgets/wxhashset.cpp	/^ELPP_WX_ENABLED(StringHashSet)$/;"	f	typeref:typename:IntHashSet
ELPP_WX_HASH_MAP_ENABLED	samples/wxWidgets/wxhashmap.cpp	/^ELPP_WX_HASH_MAP_ENABLED(MyHashMap)$/;"	f
ELPP_WX_PTR_ENABLED	samples/wxWidgets/wxlist.cpp	/^ELPP_WX_PTR_ENABLED(MyList)$/;"	f
ELogLevel	samples/STL/custom-format-spec.cpp	/^enum ELogLevel : el::base::type::VerboseLevel {$/;"	g	typeref:typename:el::base::type::VerboseLevel	file:
ENUM_HELPER_TESTS_H	test/enum-helper-test.h	/^#define ENUM_HELPER_TESTS_H$/;"	d
ERROR	samples/default-logger.conf	/^* ERROR:$/;"	k
Easylogging++ Qt Samples	samples/Qt/basic/README.md	/^###### Easylogging++ Qt Samples$/;"	u
Easyloggingpp	CMakeLists.txt	/^project(Easyloggingpp CXX)$/;"	p
Enabled	src/easylogging++.h	/^  Enabled = 1,$/;"	e	enum:el::ConfigurationType
End	tools/cpplint.py	/^  def End(self):$/;"	m	class:_FunctionState
EnumType	src/easylogging++.h	/^typedef unsigned int EnumType;$/;"	t	namespace:el::base::type	typeref:typename:unsigned int
Error	samples/Qt/file-splitter-joiner/partprocessor.h	/^    explicit Error(const QString& message, int number) : message(message), number(number) {}$/;"	f	class:Error
Error	samples/Qt/file-splitter-joiner/partprocessor.h	/^class Error {$/;"	c
Error	src/easylogging++.h	/^  Error = 16,$/;"	e	enum:el::Level
Error	tools/cpplint.py	/^def Error(filename, linenum, category, confidence, message):$/;"	f
Explanation	README.md	/^##### Explanation$/;"	T
Extending Library	README.md	/^### Extending Library$/;"	S
Extension	tools/cpplint.py	/^  def Extension(self):$/;"	m	class:FileInfo
Extra Features	README.md	/^# Extra Features$/;"	c
FATAL	samples/default-logger.conf	/^* FATAL:$/;"	k
FILE_UTILS_TEST_H	test/file-utils-test.h	/^#define FILE_UTILS_TEST_H$/;"	d
FORMAT_SPECIFIER_TEST_H	test/format-specifier-test.h	/^#define FORMAT_SPECIFIER_TEST_H$/;"	d
Fatal	src/easylogging++.h	/^  Fatal = 8,$/;"	e	enum:el::Level
Features at a glance	README.md	/^### Features at a glance$/;"	S
File	src/easylogging++.h	/^  File = 1 << 3,$/;"	e	enum:el::base::FormatFlags
File	src/easylogging++.h	/^class File : base::StaticClass {$/;"	c	namespace:el::base::utils
File splitter/joiner sample	samples/Qt/file-splitter-joiner/README.md	/^###### File splitter\/joiner sample$/;"	u
FileBase	src/easylogging++.h	/^  FileBase = 1 << 14,$/;"	e	enum:el::base::FormatFlags
FileInfo	tools/cpplint.py	/^class FileInfo:$/;"	c
FileStreamPtr	src/easylogging++.h	/^typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;$/;"	t	namespace:el::base	typeref:typename:std::shared_ptr<base::type::fstream_t>
Filename	src/easylogging++.h	/^  Filename = 16,$/;"	e	enum:el::ConfigurationType
FilesBelongToSameModule	tools/cpplint.py	/^def FilesBelongToSameModule(filename_cc, filename_h):$/;"	f
FindEndOfExpressionInLine	tools/cpplint.py	/^def FindEndOfExpressionInLine(line, startpos, depth, startchar, endchar):$/;"	f
FindNextMatchingAngleBracket	tools/cpplint.py	/^def FindNextMatchingAngleBracket(clean_lines, linenum, init_suffix):$/;"	f
FindNextMultiLineCommentEnd	tools/cpplint.py	/^def FindNextMultiLineCommentEnd(lines, lineix):$/;"	f
FindNextMultiLineCommentStart	tools/cpplint.py	/^def FindNextMultiLineCommentStart(lines, lineix):$/;"	f
FindPreviousMatchingAngleBracket	tools/cpplint.py	/^def FindPreviousMatchingAngleBracket(clean_lines, linenum, init_prefix):$/;"	f
FindStartOfExpressionInLine	tools/cpplint.py	/^def FindStartOfExpressionInLine(line, endpos, depth, startchar, endchar):$/;"	f
Fixed	CHANGELOG.md	/^### Fixed$/;"	S
FixedTimeFormat	src/easylogging++.h	/^  FixedTimeFormat = 16384,$/;"	e	enum:el::LoggingFlag
Fixes	CHANGELOG.md	/^### Fixes$/;"	S
Format	src/easylogging++.h	/^  Format = 8,$/;"	e	enum:el::ConfigurationType
FormatFlags	src/easylogging++.h	/^enum class FormatFlags : base::type::EnumType {$/;"	g	namespace:el::base	typeref:typename:base::type::EnumType
FormatSpecifierValueResolver	src/easylogging++.h	/^typedef std::function<std::string(const LogMessage*)> FormatSpecifierValueResolver;$/;"	t	namespace:el
FullName	tools/cpplint.py	/^  def FullName(self):$/;"	m	class:FileInfo
Function	src/easylogging++.h	/^  Function = 1 << 6,$/;"	e	enum:el::base::FormatFlags
GLOBAL	samples/Qt/basic/test_conf.conf	/^* GLOBAL:$/;"	k
GLOBAL	samples/STL/logrotate.conf	/^* GLOBAL:$/;"	k
GLOBAL	samples/console.conf	/^* GLOBAL:$/;"	k
GLOBAL	samples/default-logger.conf	/^* GLOBAL:$/;"	k
GLOBAL	samples/file.conf	/^* GLOBAL:$/;"	k
GLOBAL_CONFIGURATIONS_TEST_H_	test/global-configurations-test.h	/^#define GLOBAL_CONFIGURATIONS_TEST_H_$/;"	d
GTEST_ADD_TESTS	cmake/Findgtest.cmake	/^function(GTEST_ADD_TESTS executable extra_args)$/;"	f
GTEST_ADD_TEST_NAMES	cmake/Findgtest.cmake	/^    set(GTEST_ADD_TEST_NAMES ${_test_names} PARENT_SCOPE)$/;"	v	function:GTEST_ADD_TESTS
GTEST_BOTH_LIBRARIES	cmake/Findgtest.cmake	/^    set(GTEST_BOTH_LIBRARIES ${GTEST_LIBRARIES} ${GTEST_MAIN_LIBRARIES})$/;"	v
GTEST_INCLUDE_DIRS	cmake/Findgtest.cmake	/^    set(GTEST_INCLUDE_DIRS ${GTEST_INCLUDE_DIR})$/;"	v
GTEST_MSVC_SEARCH	cmake/Findgtest.cmake	/^    set(GTEST_MSVC_SEARCH MD)$/;"	v
GTKMM_EXAMPLE_Window_H	samples/gtkmm/hello_gtkmm/window.h	/^#define GTKMM_EXAMPLE_Window_H$/;"	d
GetHeaderGuardCPPVariable	tools/cpplint.py	/^def GetHeaderGuardCPPVariable(filename):$/;"	f
GetLineWidth	tools/cpplint.py	/^def GetLineWidth(line):$/;"	f
GetPreviousNonBlankLine	tools/cpplint.py	/^def GetPreviousNonBlankLine(clean_lines, linenum):$/;"	f
Getting Started	README.md	/^# Getting Started$/;"	c
Global	src/easylogging++.h	/^  Global = 1,$/;"	e	enum:el::Level
Global Configurations	README.md	/^### Global Configurations$/;"	S
HELPERS_TEST_H_	test/helpers-test.h	/^#define HELPERS_TEST_H_$/;"	d
HITCOUNTER_TESTS_H_	test/hit-counter-test.h	/^#define HITCOUNTER_TESTS_H_$/;"	d
Handler	samples/STL/new-logger-registration-callback.cpp	/^class Handler : public el::LoggerRegistrationCallback {$/;"	c	file:
Handler	samples/STL/post-performance-tracking-handler.cpp	/^class Handler : public el::PerformanceTrackingCallback {$/;"	c	file:
Handler2	samples/STL/new-logger-registration-callback.cpp	/^class Handler2 : public el::LoggerRegistrationCallback {$/;"	c	file:
Helper Classes	README.md	/^### Helper Classes$/;"	S
HierarchicalLogging	src/easylogging++.h	/^  HierarchicalLogging = 2048,$/;"	e	enum:el::LoggingFlag
HitCounter	src/easylogging++.h	/^  HitCounter(const HitCounter& hitCounter) :$/;"	f	class:el::base::HitCounter
HitCounter	src/easylogging++.h	/^  HitCounter(const char* filename, base::type::LineNumber lineNumber) :$/;"	f	class:el::base::HitCounter
HitCounter	src/easylogging++.h	/^  HitCounter(void) :$/;"	f	class:el::base::HitCounter
HitCounter	src/easylogging++.h	/^class HitCounter {$/;"	c	namespace:el::base
Host	src/easylogging++.h	/^  Host = 1 << 8,$/;"	e	enum:el::base::FormatFlags
Hour	src/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
HtmlHandler	samples/Qt/basic/main.cpp	/^    HtmlHandler() {$/;"	f	class:HtmlHandler	file:
HtmlHandler	samples/Qt/basic/main.cpp	/^class HtmlHandler : public el::LogDispatchCallback {$/;"	c	file:
HttpRequest	samples/STL/custom-format-spec.cpp	/^class HttpRequest {$/;"	c	file:
I have	.github/PULL_REQUEST_TEMPLATE.md	/^### I have$/;"	S
IMAGE_LOADER_H_INCLUDED	samples/OpenGL/Cube/imageloader.h	/^#define IMAGE_LOADER_H_INCLUDED$/;"	d
IWorker	src/easylogging++.h	/^class IWorker {$/;"	c	namespace:el::base
IgnoreSigInt	src/easylogging++.h	/^  IgnoreSigInt = 32768,$/;"	e	enum:el::LoggingFlag
Image	samples/OpenGL/Cube/imageloader.cpp	/^Image::Image(char* ps, int w, int h) : pixels(ps), width(w), height(h) {$/;"	f	class:Image
Image	samples/OpenGL/Cube/imageloader.h	/^class Image {$/;"	c
ImmediateFlush	src/easylogging++.h	/^  ImmediateFlush = 16,$/;"	e	enum:el::LoggingFlag
InNamespaceBody	tools/cpplint.py	/^  def InNamespaceBody(self):$/;"	m	class:_NestingState
IncrementErrorCount	tools/cpplint.py	/^  def IncrementErrorCount(self, category):$/;"	m	class:_CppLintState
Info	src/easylogging++.h	/^  Info = 128,$/;"	e	enum:el::Level
InnermostClass	tools/cpplint.py	/^  def InnermostClass(self):$/;"	m	class:_NestingState
Install (Optional)	README.md	/^### Install (Optional)$/;"	S
Installing Custom Crash Handlers	README.md	/^#### Installing Custom Crash Handlers$/;"	t
Integer	samples/STL/make-loggable.cpp	/^    Integer(int i) : m_underlyingInt(i) {}$/;"	f	class:Integer	file:
Integer	samples/STL/make-loggable.cpp	/^class Integer {$/;"	c	file:
Integer	test/loggable-test.h	/^    Integer(int i) : m_underlyingInt(i) {$/;"	f	class:Integer
Integer	test/loggable-test.h	/^class Integer : public el::Loggable {$/;"	c
IsBlankLine	tools/cpplint.py	/^def IsBlankLine(line):$/;"	f
IsCppString	tools/cpplint.py	/^def IsCppString(line):$/;"	f
IsErrorSuppressedByNolint	tools/cpplint.py	/^def IsErrorSuppressedByNolint(category, linenum):$/;"	f
IsInAlphabeticalOrder	tools/cpplint.py	/^  def IsInAlphabeticalOrder(self, clean_lines, linenum, header_path):$/;"	m	class:_IncludeState
IsSource	tools/cpplint.py	/^  def IsSource(self):$/;"	m	class:FileInfo
IterableContainer	src/easylogging++.h	/^  IterableContainer(void) {}$/;"	f	class:el::base::workarounds::IterableContainer
IterableContainer	src/easylogging++.h	/^class IterableContainer {$/;"	c	namespace:el::base::workarounds
JOINERCORE_H	samples/Qt/file-splitter-joiner/joinercore.h	/^#define JOINERCORE_H$/;"	d
JOINERWIDGET_H	samples/Qt/file-splitter-joiner/joinerwidget.h	/^#define JOINERWIDGET_H$/;"	d
JoinerCore	samples/Qt/file-splitter-joiner/joinercore.cpp	/^JoinerCore::JoinerCore(QTreeWidget* widget) {$/;"	f	class:JoinerCore
JoinerCore	samples/Qt/file-splitter-joiner/joinercore.h	/^class JoinerCore : public QObject {$/;"	c
JoinerWidget	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^JoinerWidget::JoinerWidget(QWidget *parent) :$/;"	f	class:JoinerWidget
JoinerWidget	samples/Qt/file-splitter-joiner/joinerwidget.h	/^class JoinerWidget : public QWidget {$/;"	c
LIBS	samples/OpenGL/Cube/Makefile	/^	LIBS = -framework OpenGL -framework GLUT$/;"	m
LIBS	samples/OpenGL/Cube/Makefile	/^	LIBS = -lglut -lGLU -lGL$/;"	m
LISTWITHSEARCH_HH	samples/Qt/fast-dictionary/listwithsearch.hh	/^#define LISTWITHSEARCH_HH$/;"	d
LOGGABLETEST_H_	test/loggable-test.h	/^#define LOGGABLETEST_H_$/;"	d
LOGGERS_TEST_H_	test/logger-test.h	/^#define LOGGERS_TEST_H_$/;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	src/easylogging++.h	/^#  define LOGGER_LEVEL_WRITERS_SIGNATURES(/;"	d
LOG_FORMAT_RESOLUTION_TEST_H	test/log-format-resolution-test.h	/^#define LOG_FORMAT_RESOLUTION_TEST_H$/;"	d
Level	README.md	/^### Level$/;"	S
Level	src/easylogging++.h	/^  Level = 1 << 13,$/;"	e	enum:el::base::FormatFlags
Level	src/easylogging++.h	/^enum class Level : base::type::EnumType {$/;"	g	namespace:el	typeref:typename:base::type::EnumType
LevelHelper	src/easylogging++.h	/^class LevelHelper : base::StaticClass {$/;"	c	namespace:el
LevelShort	src/easylogging++.h	/^  LevelShort = 1 << 15$/;"	e	enum:el::base::FormatFlags
Licence	README.md	/^# Licence$/;"	c
Line	src/easylogging++.h	/^  Line = 1 << 4,$/;"	e	enum:el::base::FormatFlags
LineNumber	src/easylogging++.h	/^typedef unsigned long int LineNumber;$/;"	t	namespace:el::base::type	typeref:typename:unsigned long int
ListWithSearch	samples/Qt/fast-dictionary/listwithsearch.cc	/^ListWithSearch::ListWithSearch(int searchBehaviour_, QWidget *parent) :$/;"	f	class:ListWithSearch
ListWithSearch	samples/Qt/fast-dictionary/listwithsearch.hh	/^class ListWithSearch : public QWidget$/;"	c
Location	src/easylogging++.h	/^  Location = 1 << 5,$/;"	e	enum:el::base::FormatFlags
Log Dispatch Callback	README.md	/^### Log Dispatch Callback$/;"	S
Log File Rotating	README.md	/^### Log File Rotating$/;"	S
LogBuilder	src/easylogging++.h	/^  LogBuilder() : m_termSupportsColor(base::utils::OS::termSupportsColor()) {}$/;"	f	class:el::LogBuilder
LogBuilder	src/easylogging++.h	/^class LogBuilder : base::NoCopy {$/;"	c	namespace:el
LogBuilderPtr	src/easylogging++.h	/^typedef std::shared_ptr<LogBuilder> LogBuilderPtr;$/;"	t	namespace:el	typeref:typename:std::shared_ptr<LogBuilder>
LogDetailedCrashReason	src/easylogging++.h	/^  LogDetailedCrashReason = 4,$/;"	e	enum:el::LoggingFlag
LogDispatchCallback	src/easylogging++.h	/^class LogDispatchCallback : public Callback<LogDispatchData> {$/;"	c	namespace:el
LogDispatchCallbackPtr	src/easylogging++.h	/^typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;$/;"	t	namespace:el::base::type	typeref:typename:std::shared_ptr<LogDispatchCallback>
LogDispatchData	src/easylogging++.h	/^  LogDispatchData() : m_logMessage(nullptr), m_dispatchAction(base::DispatchAction::None) {}$/;"	f	class:el::LogDispatchData
LogDispatchData	src/easylogging++.h	/^class LogDispatchData {$/;"	c	namespace:el
LogDispatcher	src/easylogging++.h	/^  LogDispatcher(bool proceed, LogMessage* logMessage, base::DispatchAction dispatchAction) :$/;"	f	class:el::base::LogDispatcher
LogDispatcher	src/easylogging++.h	/^class LogDispatcher : base::NoCopy {$/;"	c	namespace:el::base
LogFlushThreshold	src/easylogging++.h	/^  LogFlushThreshold = 256,$/;"	e	enum:el::ConfigurationType
LogFormat	src/easylogging++.cc	/^LogFormat::LogFormat(Level level, const base::type::string_t& format)$/;"	f	class:el::base::LogFormat
LogFormat	src/easylogging++.cc	/^LogFormat::LogFormat(LogFormat&& logFormat) {$/;"	f	class:el::base::LogFormat
LogFormat	src/easylogging++.cc	/^LogFormat::LogFormat(const LogFormat& logFormat):$/;"	f	class:el::base::LogFormat
LogFormat	src/easylogging++.cc	/^LogFormat::LogFormat(void) :$/;"	f	class:el::base::LogFormat
LogFormat	src/easylogging++.h	/^class LogFormat : public Loggable {$/;"	c	namespace:el::base
LogHandler	samples/Qt/basic/main.cpp	/^class LogHandler : public el::LogDispatchCallback {$/;"	c	file:
LogHandler	test/post-log-dispatch-handler-test.h	/^class LogHandler : public el::LogDispatchCallback {$/;"	c
LogMessage	src/easylogging++.h	/^  LogMessage = 1 << 9,$/;"	e	enum:el::base::FormatFlags
LogMessage	src/easylogging++.h	/^  LogMessage(Level level, const std::string& file, base::type::LineNumber line, const std::strin/;"	f	class:el::LogMessage
LogMessage	src/easylogging++.h	/^class LogMessage {$/;"	c	namespace:el
LogStreamsReferenceMap	src/easylogging++.h	/^typedef std::unordered_map<std::string, FileStreamPtr> LogStreamsReferenceMap;$/;"	t	namespace:el::base	typeref:typename:std::unordered_map<std::string,FileStreamPtr>
LogTerminal	samples/Qt/fast-dictionary/mainwindow.cc	/^class LogTerminal : public el::LogDispatchCallback {$/;"	c	file:
Loggable	src/easylogging++.h	/^class Loggable {$/;"	c	namespace:el
Logger	src/easylogging++.cc	/^Logger::Logger(const Logger& logger) {$/;"	f	class:el::Logger
Logger	src/easylogging++.cc	/^Logger::Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Logger
Logger	src/easylogging++.cc	/^Logger::Logger(const std::string& id, const Configurations& configurations,$/;"	f	class:el::Logger
Logger	src/easylogging++.h	/^class Logger : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el
Logger Registration Callback	README.md	/^### Logger Registration Callback$/;"	S
LoggerId	src/easylogging++.h	/^  LoggerId = 1 << 2,$/;"	e	enum:el::base::FormatFlags
LoggerRegistrationCallback	src/easylogging++.h	/^class LoggerRegistrationCallback : public Callback<Logger> {$/;"	c	namespace:el
LoggerRegistrationCallbackPtr	src/easylogging++.h	/^typedef std::shared_ptr<LoggerRegistrationCallback> LoggerRegistrationCallbackPtr;$/;"	t	namespace:el::base::type	typeref:typename:std::shared_ptr<LoggerRegistrationCallback>
Logging	README.md	/^# Logging$/;"	c
Logging Flags	README.md	/^### Logging Flags$/;"	S
Logging Format Specifiers	README.md	/^### Logging Format Specifiers$/;"	S
Logging Third-party Class	README.md	/^#### Logging Third-party Class$/;"	t
Logging Your Own Class	README.md	/^#### Logging Your Own Class$/;"	t
Logging perror()	README.md	/^### Logging perror()$/;"	S
LoggingFlag	src/easylogging++.h	/^enum class LoggingFlag : base::type::EnumType {$/;"	g	namespace:el	typeref:typename:base::type::EnumType
Looking for maintainers!!	README.md	/^#### Looking for maintainers!!$/;"	t
MACROS_TEST_H_	test/macros-test.h	/^#define MACROS_TEST_H_$/;"	d
MAINWINDOW_H	samples/Qt/file-splitter-joiner/mainwindow.h	/^#define MAINWINDOW_H$/;"	d
MAINWINDOW_HH	samples/Qt/fast-dictionary/mainwindow.hh	/^#define MAINWINDOW_HH$/;"	d
MAKE_LOGGABLE	samples/STL/make-loggable.cpp	/^inline MAKE_LOGGABLE(Integer, integer, os) {$/;"	f
MAKE_LOGGABLE	test/loggable-test.h	/^inline MAKE_LOGGABLE(String, str, os) {$/;"	f
MYLIBSHARED_EXPORT	samples/Qt/shared-lib/mylib/mylib_global.hh	/^#  define MYLIBSHARED_EXPORT /;"	d
MYLIB_GLOBAL_HH	samples/Qt/shared-lib/mylib/mylib_global.hh	/^#define MYLIB_GLOBAL_HH$/;"	d
MYLIB_HH	samples/Qt/shared-lib/mylib/mylib.hh	/^#define MYLIB_HH$/;"	d
MYTHREAD_H	samples/Qt/basic/mythread.h	/^#define MYTHREAD_H$/;"	d
MY_CUSTOM_LOGGER	samples/STL/different-output.cpp	/^#define MY_CUSTOM_LOGGER(/;"	d	file:
MainWindow	samples/Qt/fast-dictionary/mainwindow.cc	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow
MainWindow	samples/Qt/fast-dictionary/mainwindow.hh	/^class MainWindow : public QMainWindow$/;"	c
MainWindow	samples/Qt/fast-dictionary/ui_mainwindow.h	/^    class MainWindow: public Ui_MainWindow {};$/;"	c	namespace:Ui
MainWindow	samples/Qt/file-splitter-joiner/mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent)$/;"	f	class:MainWindow
MainWindow	samples/Qt/file-splitter-joiner/mainwindow.h	/^class MainWindow : public QMainWindow {$/;"	c
Make Use of Performance Tracking Data	README.md	/^#### Make Use of Performance Tracking Data$/;"	t
Manually Flushing and Rolling Log Files	README.md	/^### Manually Flushing and Rolling Log Files$/;"	S
Match	tools/cpplint.py	/^def Match(pattern, s):$/;"	f
MaxLogFileSize	src/easylogging++.h	/^  MaxLogFileSize = 128,$/;"	e	enum:el::ConfigurationType
Microsecond	src/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
Millisecond	src/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
MillisecondsWidth	src/easylogging++.h	/^  MillisecondsWidth = SubsecondPrecision,$/;"	e	enum:el::ConfigurationType
MillisecondsWidth	src/easylogging++.h	/^typedef SubsecondPrecision MillisecondsWidth;$/;"	t	namespace:el::base	typeref:typename:SubsecondPrecision
Minute	src/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
More	samples/send-to-network/README.md	/^## More$/;"	s
Multi-threading	README.md	/^### Multi-threading$/;"	S
MultiLoggerSupport	src/easylogging++.h	/^  MultiLoggerSupport = 128,$/;"	e	enum:el::LoggingFlag
Mutex	src/easylogging++.h	/^  Mutex(void) {$/;"	f	class:el::base::threading::internal::Mutex
Mutex	src/easylogging++.h	/^class Mutex : base::NoCopy {$/;"	c	namespace:el::base::threading::internal
Mutex	src/easylogging++.h	/^typedef base::threading::internal::Mutex Mutex;$/;"	t	namespace:el::base::threading	typeref:typename:base::threading::internal::Mutex
MyClass	samples/STL/loggable.cpp	/^    MyClass(const std::string& name) : m_name(name) {}$/;"	f	class:MyClass	file:
MyClass	samples/STL/loggable.cpp	/^class MyClass : public el::Loggable {$/;"	c	file:
MyHandler	samples/STL/log-dispatch-callback.cpp	/^class MyHandler : public el::LogDispatchCallback {$/;"	c	file:
MyHandler	samples/STL/multi-loggers-with-async.cpp	/^class MyHandler : public el::LogDispatchCallback {$/;"	c	file:
MyHandler	samples/STL/pthread.cpp	/^class MyHandler : public el::LogDispatchCallback {$/;"	c	file:
MyHtmlHandler	samples/STL/log-dispatch-callback.cpp	/^    MyHtmlHandler() {$/;"	f	class:MyHtmlHandler	file:
MyHtmlHandler	samples/STL/log-dispatch-callback.cpp	/^class MyHtmlHandler : public el::LogDispatchCallback {$/;"	c	file:
MyLib	samples/STL/shared-static-libs/lib/include/mylib.hpp	/^class MyLib {$/;"	c
MyLib	samples/STL/shared-static-libs/lib/mylib.cpp	/^MyLib::MyLib() {$/;"	f	class:MyLib	typeref:typename:INITIALIZE_EASYLOGGINGPP
MyLib	samples/STL/shared-static-libs/lib/mylib.cpp	/^MyLib::MyLib(int argc, char** argv) {$/;"	f	class:MyLib
MyLogBuilder	samples/API/logbuilder.cpp	/^class MyLogBuilder : public el::LogBuilder {$/;"	c	file:
MyMath	samples/async/mymath.h	/^class MyMath {$/;"	c
MyPerformanceTrackingOutput	samples/STL/custom-performance-output.cpp	/^    MyPerformanceTrackingOutput() {$/;"	f	class:MyPerformanceTrackingOutput	file:
MyPerformanceTrackingOutput	samples/STL/custom-performance-output.cpp	/^class MyPerformanceTrackingOutput : public el::PerformanceTrackingCallback {$/;"	c	file:
MyThread	samples/Qt/basic/mythread.h	/^    MyThread(int id) : threadId(id) {}$/;"	f	class:MyThread
MyThread	samples/Qt/basic/mythread.h	/^class MyThread : public QThread {$/;"	c
Mylib	samples/Qt/shared-lib/mylib/mylib.cc	/^Mylib::Mylib(void)$/;"	f	class:Mylib	typeref:typename:INITIALIZE_EASYLOGGINGPP
Mylib	samples/Qt/shared-lib/mylib/mylib.hh	/^class MYLIBSHARED_EXPORT Mylib$/;"	c
NETWORK_LOG	samples/STL/multiple-loggers.cpp	/^    #define NETWORK_LOG(/;"	d	file:
Network Logging	README.md	/^### Network Logging$/;"	S
NetworkDispatcher	samples/send-to-network/network-logger.cpp	/^class NetworkDispatcher : public el::LogDispatchCallback$/;"	c	file:
NewLineForContainer	src/easylogging++.h	/^  NewLineForContainer = 1,$/;"	e	enum:el::LoggingFlag
NoCopy	src/easylogging++.h	/^  NoCopy(void) {}$/;"	f	class:el::base::NoCopy
NoCopy	src/easylogging++.h	/^class NoCopy {$/;"	c	namespace:el::base
NoExtension	tools/cpplint.py	/^  def NoExtension(self):$/;"	m	class:FileInfo
None	src/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	enum:el::base::DispatchAction
NormalLog	src/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	enum:el::base::DispatchAction
Not	src/easylogging++.h	/^static inline base::type::EnumType Not(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType
NumLines	tools/cpplint.py	/^  def NumLines(self):$/;"	m	class:CleansedLines
OS	src/easylogging++.h	/^class OS : base::StaticClass {$/;"	c	namespace:el::base::utils
OS_UTILS_TEST_H	test/os-utils-test.h	/^#define OS_UTILS_TEST_H$/;"	d
Occasional Logging	README.md	/^### Occasional Logging$/;"	S
Or	src/easylogging++.h	/^static inline base::type::EnumType Or(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType
Other Hit Counts Based Logging	README.md	/^#### Other Hit Counts Based Logging$/;"	t
Overview	README.md	/^# Overview$/;"	c
PLOG_TEST_H	test/plog-test.h	/^#define PLOG_TEST_H$/;"	d
POST_LOG_DISPATCH_HANDLER_TEST_H	test/post-log-dispatch-handler-test.h	/^#define POST_LOG_DISPATCH_HANDLER_TEST_H$/;"	d
PROG	samples/OpenGL/Cube/Makefile	/^PROG = cube$/;"	m
ParseArguments	tools/cpplint.py	/^def ParseArguments(args):$/;"	f
ParseNolintSuppressions	tools/cpplint.py	/^def ParseNolintSuppressions(filename, raw_line, linenum, error):$/;"	f
Parser	src/easylogging++.h	/^  class Parser : base::StaticClass {$/;"	c	class:el::Configurations
PartProcessor	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^PartProcessor::PartProcessor(const QList<QString>& parts, const QString& destination, const QMod/;"	f	class:PartProcessor
PartProcessor	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^PartProcessor::PartProcessor(const QString& source, const QString& destination, qint32 startOffs/;"	f	class:PartProcessor
PartProcessor	samples/Qt/file-splitter-joiner/partprocessor.h	/^class PartProcessor : public QThread$/;"	c
People	test/registry-test.h	/^class People : public Registry<Person> {$/;"	c
PeopleWithPred	test/registry-test.h	/^class PeopleWithPred : public RegistryWithPred<Person, PersonPred> {$/;"	c
Performance Tracking	README.md	/^### Performance Tracking$/;"	S
PerformanceTracker	src/easylogging++.cc	/^PerformanceTracker::PerformanceTracker(const std::string& blockName,$/;"	f	class:el::base::PerformanceTracker
PerformanceTrackerPtr	src/easylogging++.h	/^typedef std::unique_ptr<el::base::PerformanceTracker> PerformanceTrackerPtr;$/;"	t	namespace:el::base::type	typeref:typename:std::unique_ptr<el::base::PerformanceTracker>
PerformanceTracking	src/easylogging++.h	/^  PerformanceTracking = 64,$/;"	e	enum:el::ConfigurationType
PerformanceTrackingCallback	src/easylogging++.h	/^class PerformanceTrackingCallback : public Callback<PerformanceTrackingData> {$/;"	c	namespace:el
PerformanceTrackingCallbackPtr	src/easylogging++.h	/^typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;$/;"	t	namespace:el::base::type	typeref:typename:std::shared_ptr<PerformanceTrackingCallback>
Person	test/registry-test.h	/^    Person(const std::string& name, unsigned int num) : m_name(name), m_num(num) {}$/;"	f	class:Person
Person	test/registry-test.h	/^class Person {$/;"	c
PersonPred	test/registry-test.h	/^    PersonPred(const std::string& name, unsigned int num) : name(name), n(num) {$/;"	f	class:PersonPred
PersonPred	test/registry-test.h	/^class PersonPred {$/;"	c
Populating Existing Logger IDs	README.md	/^### Populating Existing Logger IDs$/;"	S
PreRollOutCallback	src/easylogging++.h	/^typedef std::function<void(const char*, std::size_t)> PreRollOutCallback;$/;"	t	namespace:el
Predicate	src/easylogging++.cc	/^Configuration::Predicate::Predicate(Level level, ConfigurationType configurationType) :$/;"	f	class:el::Configuration::Predicate
Predicate	src/easylogging++.h	/^    Predicate(const char* filename, base::type::LineNumber lineNumber)$/;"	f	class:el::base::HitCounter::Predicate
Predicate	src/easylogging++.h	/^  class Predicate {$/;"	c	class:el::Configuration
Predicate	src/easylogging++.h	/^  class Predicate {$/;"	c	class:el::base::HitCounter
PrintCategories	tools/cpplint.py	/^def PrintCategories():$/;"	f
PrintErrorCounts	tools/cpplint.py	/^  def PrintErrorCounts(self):$/;"	m	class:_CppLintState
PrintUsage	tools/cpplint.py	/^def PrintUsage(message):$/;"	f
ProcessFile	tools/cpplint.py	/^def ProcessFile(filename, vlevel, extra_check_functions=[]):$/;"	f
ProcessFileData	tools/cpplint.py	/^def ProcessFileData(filename, file_extension, lines, error,$/;"	f
ProcessLine	tools/cpplint.py	/^def ProcessLine(filename, file_extension, clean_lines, line,$/;"	f
Qt Logging	README.md	/^### Qt Logging$/;"	S
Quick Links	README.md	/^### Quick Links$/;"	S
Quick Start	README.md	/^### Quick Start$/;"	S
REGISTRY_TEST_H_	test/registry-test.h	/^#define REGISTRY_TEST_H_$/;"	d
Reading Configurations	README.md	/^### Reading Configurations$/;"	S
RegisteredHitCounters	src/easylogging++.h	/^class RegisteredHitCounters : public base::utils::RegistryWithPred<base::HitCounter, base::HitCo/;"	c	namespace:el::base
RegisteredLoggers	src/easylogging++.cc	/^RegisteredLoggers::RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	class:el::base::RegisteredLoggers
RegisteredLoggers	src/easylogging++.h	/^class RegisteredLoggers : public base::utils::Registry<Logger, std::string> {$/;"	c	namespace:el::base
Registering New Loggers	README.md	/^### Registering New Loggers$/;"	S
Registry	src/easylogging++.h	/^  Registry(const Registry& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::base::utils::Registry
Registry	src/easylogging++.h	/^  Registry(void) {}$/;"	f	class:el::base::utils::Registry
Registry	src/easylogging++.h	/^class Registry : public AbstractRegistry<T_Ptr, std::unordered_map<T_Key, T_Ptr*>> {$/;"	c	namespace:el::base::utils
RegistryWithPred	src/easylogging++.h	/^  RegistryWithPred(const RegistryWithPred& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() /;"	f	class:el::base::utils::RegistryWithPred
RegistryWithPred	src/easylogging++.h	/^  RegistryWithPred(void) {$/;"	f	class:el::base::utils::RegistryWithPred
RegistryWithPred	src/easylogging++.h	/^class RegistryWithPred : public AbstractRegistry<T_Ptr, std::vector<T_Ptr*>> {$/;"	c	namespace:el::base::utils
RemoveMultiLineComments	tools/cpplint.py	/^def RemoveMultiLineComments(filename, lines, error):$/;"	f
RemoveMultiLineCommentsFromRange	tools/cpplint.py	/^def RemoveMultiLineCommentsFromRange(lines, begin, end):$/;"	f
ReplaceAll	tools/cpplint.py	/^def ReplaceAll(pattern, rep, s):$/;"	f
Reporting a Bug	README.md	/^### Reporting a Bug$/;"	S
RepositoryName	tools/cpplint.py	/^  def RepositoryName(self):$/;"	m	class:FileInfo
ResetErrorCounts	tools/cpplint.py	/^  def ResetErrorCounts(self):$/;"	m	class:_CppLintState
ResetNolintSuppressions	tools/cpplint.py	/^def ResetNolintSuppressions():$/;"	f
ResetSection	tools/cpplint.py	/^  def ResetSection(self):$/;"	m	class:_IncludeState
ReverseCloseExpression	tools/cpplint.py	/^def ReverseCloseExpression(clean_lines, linenum, pos):$/;"	f
Run	samples/send-to-network/README.md	/^## Run$/;"	s
SPLITABLEFILEDELEGATE_H	samples/Qt/file-splitter-joiner/splitablefiledelegate.h	/^#define SPLITABLEFILEDELEGATE_H$/;"	d
SPLITJOINCORE_H	samples/Qt/file-splitter-joiner/partprocessor.h	/^#define SPLITJOINCORE_H$/;"	d
SPLITTERWIDGET_H	samples/Qt/file-splitter-joiner/splitterwidget.h	/^#define SPLITTERWIDGET_H$/;"	d
SPLITTER_H	samples/Qt/file-splitter-joiner/splittercore.h	/^#define SPLITTER_H$/;"	d
SRCS	samples/OpenGL/Cube/Makefile	/^SRCS = main.cpp imageloader.cpp$/;"	m
STL Logging	README.md	/^### STL Logging$/;"	S
STRCAT	src/easylogging++.h	/^#  define STRCAT(/;"	d
STRCPY	src/easylogging++.h	/^#  define STRCPY(/;"	d
STRERROR	src/easylogging++.h	/^#  define STRERROR(/;"	d
STRICT_FILE_SIZE_CHECK_TEST_H	test/strict-file-size-check-test.h	/^#define STRICT_FILE_SIZE_CHECK_TEST_H$/;"	d
STRING_UTILS_TEST_H	test/string-utils-test.h	/^#define STRING_UTILS_TEST_H$/;"	d
STRTOK	src/easylogging++.h	/^#  define STRTOK(/;"	d
SYSLOG_TEST_H	test/syslog-test.h	/^#define SYSLOG_TEST_H$/;"	d
ScopedLock	src/easylogging++.h	/^  explicit ScopedLock(M& mutex) {$/;"	f	class:el::base::threading::internal::ScopedLock
ScopedLock	src/easylogging++.h	/^class ScopedLock : base::NoCopy {$/;"	c	namespace:el::base::threading::internal
ScopedLock	src/easylogging++.h	/^typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;$/;"	t	namespace:el::base::threading	typeref:typename:base::threading::internal::ScopedLock<base::threading::Mutex>
Search	tools/cpplint.py	/^def Search(pattern, s):$/;"	f
Second	src/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
SeenOpenBrace	tools/cpplint.py	/^  def SeenOpenBrace(self):$/;"	m	class:_NestingState
Send to Network	samples/send-to-network/README.md	/^# Send to Network$/;"	c
Sentinel	samples/VC++/VCPP2015_Win32_Multithreaded/VCPP2015_Win32/main.cpp	/^volatile bool Sentinel = true;$/;"	v	typeref:typename:volatile bool
SetCountingStyle	tools/cpplint.py	/^  def SetCountingStyle(self, counting_style):$/;"	m	class:_CppLintState
SetFilters	tools/cpplint.py	/^  def SetFilters(self, filters):$/;"	m	class:_CppLintState
SetLastHeader	tools/cpplint.py	/^  def SetLastHeader(self, header_path):$/;"	m	class:_IncludeState
SetOutputFormat	tools/cpplint.py	/^  def SetOutputFormat(self, output_format):$/;"	m	class:_CppLintState
SetVerboseLevel	tools/cpplint.py	/^  def SetVerboseLevel(self, level):$/;"	m	class:_CppLintState
Setting Application Arguments	README.md	/^### Setting Application Arguments$/;"	S
Sharing Logging Repository	README.md	/^### Sharing Logging Repository$/;"	S
Simple example:	README.md	/^#### Simple example:$/;"	t
Some examples:	README.md	/^#### Some examples:$/;"	t
Split	tools/cpplint.py	/^  def Split(self):$/;"	m	class:FileInfo
SplitableFileDelegate	samples/Qt/file-splitter-joiner/splitablefiledelegate.cpp	/^SplitableFileDelegate::SplitableFileDelegate(SplitterWidget *parent)$/;"	f	class:SplitableFileDelegate
SplitableFileDelegate	samples/Qt/file-splitter-joiner/splitablefiledelegate.h	/^class SplitableFileDelegate : public QItemDelegate {$/;"	c
SplitterCore	samples/Qt/file-splitter-joiner/splittercore.cpp	/^SplitterCore::SplitterCore(QStandardItemModel* fileModel, QObject* parent, SplitterWidget* paren/;"	f	class:SplitterCore
SplitterCore	samples/Qt/file-splitter-joiner/splittercore.h	/^class SplitterCore : public QThread {$/;"	c
SplitterWidget	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^SplitterWidget::SplitterWidget(QWidget *parent) :$/;"	f	class:SplitterWidget
SplitterWidget	samples/Qt/file-splitter-joiner/splitterwidget.h	/^class SplitterWidget : public QWidget {$/;"	c
StackTraceEntry	src/easylogging++.cc	/^StackTrace::StackTraceEntry::StackTraceEntry(std::size_t index, const std::string& loc, const st/;"	f	class:el::base::debug::StackTrace::StackTraceEntry
Stacktrace	README.md	/^### Stacktrace$/;"	S
StaticClass	src/easylogging++.h	/^class StaticClass {$/;"	c	namespace:el::base
Storage	src/easylogging++.cc	/^Storage::Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker) :$/;"	f	class:el::base::Storage
Storage	src/easylogging++.h	/^class Storage : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::base
StoragePointer	src/easylogging++.h	/^typedef std::shared_ptr<base::Storage> StoragePointer;$/;"	t	namespace:el::base::type	typeref:typename:std::shared_ptr<base::Storage>
Str	src/easylogging++.h	/^class Str : base::StaticClass {$/;"	c	namespace:el::base::utils
StrictLogFileSizeCheck	src/easylogging++.h	/^  StrictLogFileSizeCheck = 32,$/;"	e	enum:el::LoggingFlag
String	test/loggable-test.h	/^    String(const char* s) : m_str(s) {}$/;"	f	class:String
String	test/loggable-test.h	/^class String {$/;"	c
StringToLevelItem	src/easylogging++.cc	/^struct StringToLevelItem {$/;"	s	namespace:el	file:
Submitting Patches	README.md	/^### Submitting Patches$/;"	S
SubsecondPrecision	src/easylogging++.h	/^  SubsecondPrecision = 32,$/;"	e	enum:el::ConfigurationType
SubsecondPrecision	src/easylogging++.h	/^  SubsecondPrecision(void) {$/;"	f	class:el::base::SubsecondPrecision
SubsecondPrecision	src/easylogging++.h	/^  explicit SubsecondPrecision(int width) {$/;"	f	class:el::base::SubsecondPrecision
SubsecondPrecision	src/easylogging++.h	/^class SubsecondPrecision {$/;"	c	namespace:el::base
Supported Templates	README.md	/^#### Supported Templates$/;"	t
SysLog	src/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	enum:el::base::DispatchAction
Syslog	README.md	/^### Syslog$/;"	S
TEST	test/command-line-args-test.h	/^TEST(CommandLineArgsTest, LoggingFlagsArg) {$/;"	f
TEST	test/command-line-args-test.h	/^TEST(CommandLineArgsTest, SetArgs) {$/;"	f
TEST	test/configurations-test.h	/^TEST(ConfigurationsTest, HasConfiguration) {$/;"	f
TEST	test/configurations-test.h	/^TEST(ConfigurationsTest, ParsingFromFile) {$/;"	f
TEST	test/configurations-test.h	/^TEST(ConfigurationsTest, ParsingFromText) {$/;"	f
TEST	test/configurations-test.h	/^TEST(ConfigurationsTest, ParsingFromTextWithEscape) {$/;"	f
TEST	test/configurations-test.h	/^TEST(ConfigurationsTest, Set) {$/;"	f
TEST	test/configurations-test.h	/^TEST(ConfigurationsTest, SetForAllLevels) {$/;"	f
TEST	test/custom-format-specifier-test.h	/^TEST(CustomFormatSpecifierTest, TestInstall) {$/;"	f
TEST	test/custom-format-specifier-test.h	/^TEST(CustomFormatSpecifierTest, TestResolution) {$/;"	f
TEST	test/custom-format-specifier-test.h	/^TEST(CustomFormatSpecifierTest, TestUnInstall) {$/;"	f
TEST	test/date-utils-test.h	/^TEST(DateUtilsTest, PerformanceTrackerTest) {$/;"	f
TEST	test/date-utils-test.h	/^TEST(DateUtilsTest, TimeFormatTest) {$/;"	f
TEST	test/enum-helper-test.h	/^TEST(ConfigurationTypeTest, ConvertFromString) {$/;"	f
TEST	test/enum-helper-test.h	/^TEST(ConfigurationTypeTest, ConvertToString) {$/;"	f
TEST	test/enum-helper-test.h	/^TEST(LevelTest, ConvertFromString) {$/;"	f
TEST	test/enum-helper-test.h	/^TEST(LevelTest, ConvertToString) {$/;"	f
TEST	test/file-utils-test.h	/^TEST(FileUtilsTest, BuildStrippedFilename) {$/;"	f
TEST	test/file-utils-test.h	/^TEST(FileUtilsTest, CreatePath) {$/;"	f
TEST	test/file-utils-test.h	/^TEST(FileUtilsTest, ExtractPathFromFilename) {$/;"	f
TEST	test/file-utils-test.h	/^TEST(FileUtilsTest, GetSizeOfFile) {$/;"	f
TEST	test/file-utils-test.h	/^TEST(FileUtilsTest, NewFileStream) {$/;"	f
TEST	test/file-utils-test.h	/^TEST(FileUtilsTest, PathExists) {$/;"	f
TEST	test/format-specifier-test.h	/^TEST(FormatSpecifierTest, TestFBaseSpecifier) {$/;"	f
TEST	test/format-specifier-test.h	/^TEST(FormatSpecifierTest, TestLevShortSpecifier) {$/;"	f
TEST	test/global-configurations-test.h	/^TEST(GlobalConfigurationTest, Parse) {$/;"	f
TEST	test/helpers-test.h	/^TEST(HelpersTest, ConvertTemplateToStdString) {$/;"	f
TEST	test/hit-counter-test.h	/^TEST(RegisteredHitCountersTest, ValidationAfterN) {$/;"	f
TEST	test/hit-counter-test.h	/^TEST(RegisteredHitCountersTest, ValidationEveryN) {$/;"	f
TEST	test/hit-counter-test.h	/^TEST(RegisteredHitCountersTest, ValidationNTimes) {$/;"	f
TEST	test/log-format-resolution-test.h	/^TEST(LogFormatResolutionTest, DefaultFormat) {$/;"	f
TEST	test/log-format-resolution-test.h	/^TEST(LogFormatResolutionTest, EscapedFormat) {$/;"	f
TEST	test/log-format-resolution-test.h	/^TEST(LogFormatResolutionTest, NormalFormat) {$/;"	f
TEST	test/loggable-test.h	/^TEST(LoggableTest, MakeLoggable) {$/;"	f
TEST	test/loggable-test.h	/^TEST(LoggableTest, TestValidLog) {$/;"	f
TEST	test/logger-test.h	/^TEST(LoggerTest, CheckTenThousandLoggers) {$/;"	f
TEST	test/logger-test.h	/^TEST(LoggerTest, RegisterTenThousandLoggers) {$/;"	f
TEST	test/logger-test.h	/^TEST(LoggerTest, ValidId) {$/;"	f
TEST	test/macros-test.h	/^TEST(MacrosTest, VaLength) {$/;"	f
TEST	test/os-utils-test.h	/^TEST(OSUtilsTest, GetBashOutput) {$/;"	f
TEST	test/os-utils-test.h	/^TEST(OSUtilsTest, GetEnvironmentVariable) {$/;"	f
TEST	test/plog-test.h	/^TEST(PLogTest, WriteLog) {$/;"	f
TEST	test/post-log-dispatch-handler-test.h	/^TEST(LogDispatchCallbackTest, Installation) {$/;"	f
TEST	test/post-log-dispatch-handler-test.h	/^TEST(LogDispatchCallbackTest, Uninstallation) {$/;"	f
TEST	test/registry-test.h	/^TEST(RegistryTest, RegisterAndUnregister) {$/;"	f
TEST	test/strict-file-size-check-test.h	/^TEST(StrictFileSizeCheckTest, HandlerCalled) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, AddToBuff) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, CStringCaseEq) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, CStringEq) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, Contains) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, ConvertAndAddToBuff) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, ReplaceAll) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, ReplaceFirstWithEscape) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, StartsAndEndsWith) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, ToUpper) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, Trim) {$/;"	f
TEST	test/string-utils-test.h	/^TEST(StringUtilsTest, WildCardMatch) {$/;"	f
TEST	test/syslog-test.h	/^TEST(SysLogTest, DebugVersionLogs) {$/;"	f
TEST	test/syslog-test.h	/^TEST(SysLogTest, WriteLog) {$/;"	f
TEST	test/typed-configurations-test.h	/^TEST(TypedConfigurationsTest, Initialization) {$/;"	f
TEST	test/typed-configurations-test.h	/^TEST(TypedConfigurationsTest, NonExistentFileCreation) {$/;"	f
TEST	test/typed-configurations-test.h	/^TEST(TypedConfigurationsTest, SharedFileStreams) {$/;"	f
TEST	test/typed-configurations-test.h	/^TEST(TypedConfigurationsTest, WriteToFiles) {$/;"	f
TEST	test/utilities-test.h	/^TEST(UtilitiesTest, SafeDelete) {$/;"	f
TEST	test/verbose-app-arguments-test.h	/^TEST(VerboseAppArgumentsTest, AppArgsLevel) {$/;"	f
TEST	test/verbose-app-arguments-test.h	/^TEST(VerboseAppArgumentsTest, AppArgsVModules) {$/;"	f
TEST	test/verbose-app-arguments-test.h	/^TEST(VerboseAppArgumentsTest, AppArgsVModulesExtension) {$/;"	f
TEST	test/verbose-app-arguments-test.h	/^TEST(VerboseAppArgumentsTest, VModulesClear) {$/;"	f
TEST	test/write-all-test.h	/^TEST(WriteAllTest, AFTER_N) {$/;"	f
TEST	test/write-all-test.h	/^TEST(WriteAllTest, EVERY_N) {$/;"	f
TEST	test/write-all-test.h	/^TEST(WriteAllTest, Entry) {$/;"	f
TEST	test/write-all-test.h	/^TEST(WriteAllTest, N_TIMES) {$/;"	f
TEST_HELPERS_H_	test/test.h	/^#define TEST_HELPERS_H_$/;"	d
TEST_LEVEL	test/write-all-test.h	/^#define TEST_LEVEL(/;"	d
TIMED_SCOPE	samples/MinGW/prog.cpp	/^TIMED_SCOPE(appTimer, "myapplication");$/;"	v	typeref:typename:INITIALIZE_EASYLOGGINGPP
TIMED_SCOPE	samples/Qt/fast-dictionary/main.cc	/^TIMED_SCOPE(app, "app");$/;"	v	typeref:typename:INITIALIZE_EASYLOGGINGPP
TIMED_SCOPE	samples/VC++/VCPP2015_Win32/VCPP2015_Win32/main.cpp	/^TIMED_SCOPE(appTimer, "myapplication");$/;"	v	typeref:typename:INITIALIZE_EASYLOGGINGPP
TIMED_SCOPE	samples/async/prog.cpp	/^TIMED_SCOPE(benchmark, "benchmark-program");$/;"	v	typeref:typename:INITIALIZE_EASYLOGGINGPP
TRACE	samples/default-logger.conf	/^* TRACE:$/;"	k
TYPED_CONFIGURATIONS_TEST_H_	test/typed-configurations-test.h	/^#define TYPED_CONFIGURATIONS_TEST_H_$/;"	d
Table of Contents	README.md	/^### Table of Contents$/;"	S
This is a	.github/PULL_REQUEST_TEMPLATE.md	/^### This is a$/;"	S
ThreadFunc1	samples/VC++/VCPP2015_Win32_Multithreaded/VCPP2015_Win32/main.cpp	/^unsigned ThreadFunc1(void* pArguments) {$/;"	f	typeref:typename:unsigned
ThreadFunc2	samples/VC++/VCPP2015_Win32_Multithreaded/VCPP2015_Win32/main.cpp	/^unsigned  ThreadFunc2(void* pArguments) {$/;"	f	typeref:typename:unsigned
ThreadId	src/easylogging++.h	/^  ThreadId = 1 << 12,$/;"	e	enum:el::base::FormatFlags
ThreadSafe	src/easylogging++.h	/^  ThreadSafe(void) {}$/;"	f	class:el::base::threading::ThreadSafe
ThreadSafe	src/easylogging++.h	/^class ThreadSafe {$/;"	c	namespace:el::base::threading
TimestampUnit	src/easylogging++.h	/^enum class TimestampUnit : base::type::EnumType {$/;"	g	namespace:el::base	typeref:typename:base::type::EnumType
ToFile	src/easylogging++.h	/^  ToFile = 2,$/;"	e	enum:el::ConfigurationType
ToStandardOutput	src/easylogging++.h	/^  ToStandardOutput = 4,$/;"	e	enum:el::ConfigurationType
Trace	src/easylogging++.h	/^  Trace = 2,$/;"	e	enum:el::Level
TypedConfigurations	src/easylogging++.cc	/^TypedConfigurations::TypedConfigurations(Configurations* configurations,$/;"	f	class:el::base::TypedConfigurations
TypedConfigurations	src/easylogging++.cc	/^TypedConfigurations::TypedConfigurations(const TypedConfigurations& other) {$/;"	f	class:el::base::TypedConfigurations
TypedConfigurations	src/easylogging++.h	/^class TypedConfigurations : public base::threading::ThreadSafe {$/;"	c	namespace:el::base
UI_MAINWINDOW_H	samples/Qt/fast-dictionary/ui_mainwindow.h	/^#define UI_MAINWINDOW_H$/;"	d
UTILITIES_TEST_H_	test/utilities-test.h	/^#define UTILITIES_TEST_H_$/;"	d
Ui	samples/Qt/fast-dictionary/mainwindow.hh	/^namespace Ui {$/;"	n
Ui	samples/Qt/fast-dictionary/ui_mainwindow.h	/^namespace Ui {$/;"	n
Ui	samples/Qt/file-splitter-joiner/about.h	/^namespace Ui {$/;"	n
Ui	samples/Qt/file-splitter-joiner/addsplittedfiledialog.h	/^namespace Ui {$/;"	n
Ui	samples/Qt/file-splitter-joiner/joinerwidget.h	/^namespace Ui {$/;"	n
Ui	samples/Qt/file-splitter-joiner/splitterwidget.h	/^namespace Ui {$/;"	n
Ui_MainWindow	samples/Qt/fast-dictionary/ui_mainwindow.h	/^class Ui_MainWindow$/;"	c
Unknown	src/easylogging++.h	/^  Unknown = 1010$/;"	e	enum:el::ConfigurationType
Unknown	src/easylogging++.h	/^  Unknown = 1010$/;"	e	enum:el::Level
Unregister Loggers	README.md	/^### Unregister Loggers$/;"	S
Update	tools/cpplint.py	/^  def Update(self, filename, clean_lines, linenum, error):$/;"	m	class:_NestingState
UpdateIncludeState	tools/cpplint.py	/^def UpdateIncludeState(filename, include_state, io=codecs):$/;"	f
UpdatePreprocessor	tools/cpplint.py	/^  def UpdatePreprocessor(self, line):$/;"	m	class:_NestingState
Updates	CHANGELOG.md	/^### Updates$/;"	S
Usage	README.md	/^##### Usage$/;"	T
User	src/easylogging++.h	/^  User = 1 << 7,$/;"	e	enum:el::base::FormatFlags
Using Configuration File	README.md	/^#### Using Configuration File$/;"	t
Using In line Configurations	README.md	/^#### Using In line Configurations$/;"	t
Using el::Configurations Class	README.md	/^#### Using el::Configurations Class$/;"	t
Utils	src/easylogging++.h	/^class Utils {$/;"	c	namespace:el::base::utils
VERBOSE	samples/default-logger.conf	/^* VERBOSE:$/;"	k
VMODULE_TESTS_H_	test/verbose-app-arguments-test.h	/^#define VMODULE_TESTS_H_$/;"	d
VModule	README.md	/^#### VModule$/;"	t
VRegistry	src/easylogging++.cc	/^VRegistry::VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags) : m_level(lev/;"	f	class:el::base::VRegistry
VRegistry	src/easylogging++.h	/^class VRegistry : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::base
Vehicle	samples/STL/containers.cpp	/^        Vehicle(const std::string& make_, const std::string& model_, unsigned int year_ = 2013,$/;"	f	class:Vehicle	file:
Vehicle	samples/STL/containers.cpp	/^class Vehicle : public el::Loggable {$/;"	c	file:
Vehicle	samples/STL/custom-class.cpp	/^        Vehicle(const std::string& make_, const std::string& model_, unsigned int year_ = 2013,$/;"	f	class:Vehicle	file:
Vehicle	samples/STL/custom-class.cpp	/^class Vehicle : public el::Loggable {$/;"	c	file:
Verbose	src/easylogging++.h	/^  Verbose = 64,$/;"	e	enum:el::Level
Verbose Logging	README.md	/^### Verbose Logging$/;"	S
Verbose-Level	README.md	/^#### Verbose-Level$/;"	t
VerboseLevel	src/easylogging++.h	/^  VerboseLevel = 1 << 10,$/;"	e	enum:el::base::FormatFlags
VerboseLevel	src/easylogging++.h	/^typedef unsigned short VerboseLevel;$/;"	t	namespace:el::base::type	typeref:typename:unsigned short
WARNING	samples/Qt/basic/test_conf.conf	/^* WARNING:$/;"	k
WARNING	samples/default-logger.conf	/^* WARNING:$/;"	k
WRITE_ALL_TEST_H_	test/write-all-test.h	/^#define WRITE_ALL_TEST_H_$/;"	d
Warning	src/easylogging++.h	/^  Warning = 32,$/;"	e	enum:el::Level
Why yet another library	README.md	/^### Why yet another library$/;"	S
Window	samples/gtkmm/hello_gtkmm/window.cc	/^Window::Window() $/;"	f	class:Window
Window	samples/gtkmm/hello_gtkmm/window.h	/^class Window : public Gtk::Window$/;"	c
[9.94.0] - 14-02-2017	CHANGELOG.md	/^## [9.94.0] - 14-02-2017$/;"	s
[9.94.1] - 25-02-2017	CHANGELOG.md	/^## [9.94.1] - 25-02-2017$/;"	s
[9.94.2] - 12-04-2017	CHANGELOG.md	/^## [9.94.2] - 12-04-2017$/;"	s
[9.95.0] - 02-08-2017	CHANGELOG.md	/^## [9.95.0] - 02-08-2017$/;"	s
[9.95.2] - 12-06-2017	CHANGELOG.md	/^## [9.95.2] - 12-06-2017$/;"	s
[9.95.3] - 13-10-2017	CHANGELOG.md	/^## [9.95.3] - 13-10-2017$/;"	s
[9.95.4] - 10-02-2018	CHANGELOG.md	/^## [9.95.4] - 10-02-2018$/;"	s
[9.96.0] - 14-02-2018	CHANGELOG.md	/^## [9.96.0] - 14-02-2018$/;"	s
[9.96.1] - 23-02-2018	CHANGELOG.md	/^## [9.96.1] - 23-02-2018$/;"	s
[9.96.2] - 27-02-2018	CHANGELOG.md	/^## [9.96.2] - 27-02-2018$/;"	s
[9.96.3] - 01-04-2018	CHANGELOG.md	/^## [9.96.3] - 01-04-2018$/;"	s
[9.96.4] - 03-04-2018	CHANGELOG.md	/^## [9.96.4] - 03-04-2018$/;"	s
[9.96.5] - 07-09-2018	CHANGELOG.md	/^## [9.96.5] - 07-09-2018$/;"	s
[9.96.6] - 24-11-2018	CHANGELOG.md	/^## [9.96.6] - 24-11-2018$/;"	s
[9.96.7] - 24-11-2018	CHANGELOG.md	/^## [9.96.7] - 24-11-2018$/;"	s
_ALT_TOKEN_REPLACEMENT	tools/cpplint.py	/^_ALT_TOKEN_REPLACEMENT = {$/;"	v
_ALT_TOKEN_REPLACEMENT_PATTERN	tools/cpplint.py	/^_ALT_TOKEN_REPLACEMENT_PATTERN = re.compile($/;"	v
_BLOCK_ASM	tools/cpplint.py	/^_BLOCK_ASM = 3    # The whole block is an inline assembly block$/;"	v
_BlockInfo	tools/cpplint.py	/^class _BlockInfo(object):$/;"	c
_CHECK_MACROS	tools/cpplint.py	/^_CHECK_MACROS = [$/;"	v
_CHECK_REPLACEMENT	tools/cpplint.py	/^_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])$/;"	v
_CPP_HEADERS	tools/cpplint.py	/^_CPP_HEADERS = frozenset([$/;"	v
_CPP_SECTION	tools/cpplint.py	/^  _CPP_SECTION = 3$/;"	v	class:_IncludeState
_CPP_SYS_HEADER	tools/cpplint.py	/^_CPP_SYS_HEADER = 2$/;"	v
_C_SECTION	tools/cpplint.py	/^  _C_SECTION = 2$/;"	v	class:_IncludeState
_C_SYS_HEADER	tools/cpplint.py	/^_C_SYS_HEADER = 1$/;"	v
_ClassInfo	tools/cpplint.py	/^class _ClassInfo(_BlockInfo):$/;"	c
_ClassifyInclude	tools/cpplint.py	/^def _ClassifyInclude(fileinfo, include, is_system):$/;"	f
_CollapseStrings	tools/cpplint.py	/^  def _CollapseStrings(elided):$/;"	m	class:CleansedLines
_CppLintState	tools/cpplint.py	/^class _CppLintState(object):$/;"	c
_DEFAULT_FILTERS	tools/cpplint.py	/^_DEFAULT_FILTERS = ['-build\/include_alpha']$/;"	v
_DropCommonSuffixes	tools/cpplint.py	/^def _DropCommonSuffixes(filename):$/;"	f
_END_ASM	tools/cpplint.py	/^_END_ASM = 2      # Last line of inline assembly block$/;"	v
_ERROR_CATEGORIES	tools/cpplint.py	/^_ERROR_CATEGORIES = [$/;"	v
_Filters	tools/cpplint.py	/^def _Filters():$/;"	f
_FunctionState	tools/cpplint.py	/^class _FunctionState(object):$/;"	c
_GetTextInside	tools/cpplint.py	/^def _GetTextInside(text, start_pattern):$/;"	f
_HEADERS_CONTAINING_TEMPLATES	tools/cpplint.py	/^_HEADERS_CONTAINING_TEMPLATES = ($/;"	v
_INITIAL_SECTION	tools/cpplint.py	/^  _INITIAL_SECTION = 0$/;"	v	class:_IncludeState
_INSIDE_ASM	tools/cpplint.py	/^_INSIDE_ASM = 1   # Inside inline assembly block$/;"	v
_IncludeError	tools/cpplint.py	/^class _IncludeError(Exception):$/;"	c
_IncludeState	tools/cpplint.py	/^class _IncludeState(dict):$/;"	c
_IsTestFilename	tools/cpplint.py	/^def _IsTestFilename(filename):$/;"	f
_LIKELY_MY_HEADER	tools/cpplint.py	/^_LIKELY_MY_HEADER = 3$/;"	v
_LOGGER	samples/STL/multiple-loggers.cpp	/^    #define _LOGGER /;"	d	file:
_MATCH_ASM	tools/cpplint.py	/^_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'$/;"	v
_MY_H_SECTION	tools/cpplint.py	/^  _MY_H_SECTION = 1$/;"	v	class:_IncludeState
_NORMAL_TRIGGER	tools/cpplint.py	/^  _NORMAL_TRIGGER = 250  # for --v=0, 500 for --v=1, etc.$/;"	v	class:_FunctionState
_NO_ASM	tools/cpplint.py	/^_NO_ASM = 0       # Outside of inline assembly block$/;"	v
_NamespaceInfo	tools/cpplint.py	/^class _NamespaceInfo(_BlockInfo):$/;"	c
_NestingState	tools/cpplint.py	/^class _NestingState(object):$/;"	c
_OTHER_HEADER	tools/cpplint.py	/^_OTHER_HEADER = 5$/;"	v
_OTHER_H_SECTION	tools/cpplint.py	/^  _OTHER_H_SECTION = 4$/;"	v	class:_IncludeState
_OutputFormat	tools/cpplint.py	/^def _OutputFormat():$/;"	f
_POSSIBLE_MY_HEADER	tools/cpplint.py	/^_POSSIBLE_MY_HEADER = 4$/;"	v
_PreprocessorInfo	tools/cpplint.py	/^class _PreprocessorInfo(object):$/;"	c
_RE_FIRST_COMPONENT	tools/cpplint.py	/^_RE_FIRST_COMPONENT = re.compile(r'^[^-_.]+')$/;"	v
_RE_PATTERN_CLEANSE_LINE_C_COMMENTS	tools/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES	tools/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES = re.compile(r'"[^"]*"')$/;"	v
_RE_PATTERN_CLEANSE_LINE_ESCAPES	tools/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_ESCAPES = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES	tools/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES = re.compile(r"'.'")$/;"	v
_RE_PATTERN_CONST_REF_PARAM	tools/cpplint.py	/^_RE_PATTERN_CONST_REF_PARAM = ($/;"	v
_RE_PATTERN_EXPLICIT_MAKEPAIR	tools/cpplint.py	/^_RE_PATTERN_EXPLICIT_MAKEPAIR = re.compile(r'\\bmake_pair\\s*<')$/;"	v
_RE_PATTERN_IDENT	tools/cpplint.py	/^_RE_PATTERN_IDENT = r'[_a-zA-Z]\\w*'  # =~ [[:alpha:]][[:alnum:]]*$/;"	v
_RE_PATTERN_INCLUDE	tools/cpplint.py	/^_RE_PATTERN_INCLUDE = re.compile(r'^\\s*#\\s*include\\s*([<"])([^>"]*)[>"].*$')$/;"	v
_RE_PATTERN_INCLUDE_NEW_STYLE	tools/cpplint.py	/^_RE_PATTERN_INCLUDE_NEW_STYLE = re.compile(r'#include +"[^\/]+\\.h"')$/;"	v
_RE_PATTERN_INVALID_INCREMENT	tools/cpplint.py	/^_RE_PATTERN_INVALID_INCREMENT = re.compile($/;"	v
_RE_PATTERN_REF_PARAM	tools/cpplint.py	/^_RE_PATTERN_REF_PARAM = re.compile($/;"	v
_RE_PATTERN_STRING	tools/cpplint.py	/^_RE_PATTERN_STRING = re.compile(r'\\bstring\\b')$/;"	v
_RE_PATTERN_TODO	tools/cpplint.py	/^_RE_PATTERN_TODO = re.compile(r'^\/\/(\\s*)TODO(\\(.+?\\))?:?(\\s|$)?')$/;"	v
_RE_PATTERN_TYPE	tools/cpplint.py	/^_RE_PATTERN_TYPE = ($/;"	v
_RE_SUPPRESSION	tools/cpplint.py	/^_RE_SUPPRESSION = re.compile(r'\\bNOLINT\\b(\\([^)]*\\))?')$/;"	v
_SECTION_NAMES	tools/cpplint.py	/^  _SECTION_NAMES = {$/;"	v	class:_IncludeState
_SetCountingStyle	tools/cpplint.py	/^def _SetCountingStyle(level):$/;"	f
_SetFilters	tools/cpplint.py	/^def _SetFilters(filters):$/;"	f
_SetOutputFormat	tools/cpplint.py	/^def _SetOutputFormat(output_format):$/;"	f
_SetVerboseLevel	tools/cpplint.py	/^def _SetVerboseLevel(level):$/;"	f
_ShouldPrintError	tools/cpplint.py	/^def _ShouldPrintError(category, confidence, linenum):$/;"	f
_TEST_TRIGGER	tools/cpplint.py	/^  _TEST_TRIGGER = 400    # about 50% more than _NORMAL_TRIGGER.$/;"	v	class:_FunctionState
_TYPE_NAMES	tools/cpplint.py	/^  _TYPE_NAMES = {$/;"	v	class:_IncludeState
_USAGE	tools/cpplint.py	/^_USAGE = """$/;"	v
_VerboseLevel	tools/cpplint.py	/^def _VerboseLevel():$/;"	f
__anon503941570102	test/logger-test.h	/^        LevelHelper::forEachLevel(&lIndex, [&]() -> bool {$/;"	f	function:TEST	typeref:typename:bool	file:
__anon65c42cf50102	test/typed-configurations-test.h	/^    LevelHelper::forEachLevel(&lIndex, [&]() -> bool {$/;"	f	function:TEST	typeref:typename:bool	file:
__anon752731f30102	test/date-utils-test.h	/^    auto f = [](unsigned long long v) {$/;"	f	function:TEST	file:
__anona2e0b8b50102	samples/STL/thread-names.cpp	/^    std::thread thread1([](){$/;"	f	function:main	file:
__anona2e0b8b50202	samples/STL/thread-names.cpp	/^    std::thread thread2([](){$/;"	f	function:main	file:
__anonaf8e80d60110	samples/OpenGL/Cube/imageloader.cpp	/^namespace {$/;"	n	file:
__anonbc355d0d0102	samples/STL/logrotate.cpp	/^    std::thread logRotatorThread([](){$/;"	f	function:main	file:
__anondc2290bf0102	src/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Configurations::hasConfiguration	typeref:typename:bool	file:
__anondc2290bf0202	src/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Configurations::setGlobally	typeref:typename:bool	file:
__anondc2290bf0302	src/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool  {$/;"	f	function:el::Configurations::unsafeSetGlobally	typeref:typename:bool	file:
__anondc2290bf0402	src/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Logger::flush	typeref:typename:bool	file:
__anondc2290bf0502	src/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Logger::initUnflushedCount	typeref:typename:bool	file:
__anondc2290bf0602	src/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Logger::resolveLoggerFormatSpec	typeref:typename:bool	file:
__anondc2290bf0702	src/easylogging++.cc	/^  str.erase(str.begin(), std::find_if(str.begin(), str.end(), [](char c) {$/;"	f	function:el::base::utils::Str::ltrim	file:
__anondc2290bf0802	src/easylogging++.cc	/^  str.erase(std::find_if(str.rbegin(), str.rend(), [](char c) {$/;"	f	function:el::base::utils::Str::rtrim	file:
__anondc2290bf0902	src/easylogging++.cc	/^  [](char c) {$/;"	f	function:el::base::utils::Str::toUpper	file:
__anondc2290bf0a02	src/easylogging++.cc	/^  auto conv = [](const struct timeval& tim) {$/;"	f	function:el::base::utils::DateTime::getTimeDifference	file:
__anondc2290bf0b02	src/easylogging++.cc	/^  auto conditionalAddFlag = [&](const base::type::char_t* specifier, base::FormatFlags flag) {$/;"	f	function:el::base::LogFormat::parseFromFormat	file:
__anondc2290bf0c02	src/easylogging++.cc	/^  auto getBool = [] (std::string boolStr) -> bool {  \/\/ Pass by value for trimming$/;"	f	function:el::base::TypedConfigurations::build	typeref:typename:bool	file:
__anondc2290bf0d02	src/easylogging++.cc	/^  [](char c) {$/;"	f	function:el::base::TypedConfigurations::getULong	file:
__anondc2290bf0e02	src/easylogging++.cc	/^  auto create = [&](Level level) {$/;"	f	function:el::base::TypedConfigurations::insertFile	file:
__anondc2290bf0f02	src/easylogging++.cc	/^  auto addSuffix = [](std::stringstream& ss, const char* sfx, const char* prev) {$/;"	f	function:el::base::VRegistry::setModules	file:
__anondc2290bf1002	src/easylogging++.cc	/^  auto insert = [&](std::stringstream& ss, base::type::VerboseLevel level) {$/;"	f	function:el::base::VRegistry::setModules	file:
__anondc2290bf1102	src/easylogging++.cc	/^  cv.wait(lk, [] { return !ELPP->asyncLogQueue()->empty(); });$/;"	f	function:el::base::AsyncDispatchWorker::clean	file:
__anondc2290bf1202	src/easylogging++.cc	/^  auto configure = [&](void) {$/;"	f	function:el::Loggers::configureFromGlobal	file:
__anone079eabb0102	samples/STL/multi-loggers-with-async.cpp	/^    std::async(std::launch::async, [&]() {$/;"	f	function:f	file:
__anone079eabb0202	samples/STL/multi-loggers-with-async.cpp	/^    std::thread t1([](){$/;"	f	function:main	file:
__anone7a3f4e10308	src/easylogging++.h	/^const struct {$/;"	s	namespace:el::base::consts
__anone7a3f4e10408	src/easylogging++.h	/^const struct {$/;"	s	namespace:el::base::consts
__init__	tools/cpplint.py	/^  def __init__(self):$/;"	m	class:_CppLintState
__init__	tools/cpplint.py	/^  def __init__(self):$/;"	m	class:_FunctionState
__init__	tools/cpplint.py	/^  def __init__(self):$/;"	m	class:_IncludeState
__init__	tools/cpplint.py	/^  def __init__(self):$/;"	m	class:_NestingState
__init__	tools/cpplint.py	/^  def __init__(self, filename):$/;"	m	class:FileInfo
__init__	tools/cpplint.py	/^  def __init__(self, lines):$/;"	m	class:CleansedLines
__init__	tools/cpplint.py	/^  def __init__(self, name, class_or_struct, clean_lines, linenum):$/;"	m	class:_ClassInfo
__init__	tools/cpplint.py	/^  def __init__(self, name, linenum):$/;"	m	class:_NamespaceInfo
__init__	tools/cpplint.py	/^  def __init__(self, seen_open_brace):$/;"	m	class:_BlockInfo
__init__	tools/cpplint.py	/^  def __init__(self, stack_before_if):$/;"	m	class:_PreprocessorInfo
_angle	samples/OpenGL/Cube/main.cpp	/^float _angle = 0;            \/\/The rotation of the box$/;"	v	typeref:typename:float
_cpplint_state	tools/cpplint.py	/^_cpplint_state = _CppLintState()$/;"	v
_error_suppressions	tools/cpplint.py	/^_error_suppressions = {}$/;"	v
_gtest_append_debugs	cmake/Findgtest.cmake	/^function(_gtest_append_debugs _endvar _library)$/;"	f
_gtest_find_library	cmake/Findgtest.cmake	/^function(_gtest_find_library _name)$/;"	f
_gtest_libpath_suffixes	cmake/Findgtest.cmake	/^set(_gtest_libpath_suffixes lib)$/;"	v
_line_length	tools/cpplint.py	/^_line_length = 80$/;"	v
_output	cmake/Findgtest.cmake	/^        set(_output ${${_library}})$/;"	v	function:_gtest_append_debugs
_output	cmake/Findgtest.cmake	/^        set(_output optimized ${${_library}} debug ${${_library}_DEBUG})$/;"	v	function:_gtest_append_debugs
_re_pattern_algorithm_header	tools/cpplint.py	/^_re_pattern_algorithm_header = []$/;"	v
_re_pattern_templates	tools/cpplint.py	/^_re_pattern_templates = []$/;"	v
_regexp_compile_cache	tools/cpplint.py	/^_regexp_compile_cache = {}$/;"	v
_root	tools/cpplint.py	/^_root = None$/;"	v
_textureId	samples/OpenGL/Cube/main.cpp	/^GLuint _textureId;           \/\/The OpenGL id of the texture$/;"	v	typeref:typename:GLuint
`printf` Like Logging	README.md	/^### `printf` Like Logging$/;"	S
abort	src/easylogging++.cc	/^static void abort(int status, const std::string& reason) {$/;"	f	namespace:el::base::utils	typeref:typename:void	file:
about	samples/Qt/file-splitter-joiner/mainwindow.h	/^    About* about;$/;"	m	class:MainWindow	typeref:typename:About *
acquireLock	src/easylogging++.h	/^  virtual inline void acquireLock(void) ELPP_FINAL { m_mutex.lock(); }$/;"	f	class:el::base::threading::ThreadSafe	typeref:typename:void
add	samples/Qt/fast-dictionary/listwithsearch.cc	/^void ListWithSearch::add(const QString &item)$/;"	f	class:ListWithSearch	typeref:typename:void
add	samples/Qt/shared-lib/mylib/mylib.cc	/^float Mylib::add(float x, float y) const$/;"	f	class:Mylib	typeref:typename:float
addFlag	src/easylogging++.h	/^  inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::base::Storage	typeref:typename:void
addFlag	src/easylogging++.h	/^  inline void addFlag(base::FormatFlags flag) {$/;"	f	class:el::base::LogFormat	typeref:typename:void
addFlag	src/easylogging++.h	/^static inline void addFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::base::utils	typeref:typename:void
addToBuff	src/easylogging++.cc	/^char* Str::addToBuff(const char* str, char* buf, const char* bufLim) {$/;"	f	class:el::base::utils::Str	typeref:typename:char *
all	samples/OpenGL/Cube/Makefile	/^all: $(PROG)$/;"	t
allowed	src/easylogging++.cc	/^bool VRegistry::allowed(base::type::VerboseLevel vlevel, const char* file) {$/;"	f	class:el::base::VRegistry	typeref:typename:bool
args	samples/STL/pthread.cpp	/^}args;$/;"	v	typeref:struct:Args
array	samples/OpenGL/Cube/imageloader.cpp	/^            T* array;$/;"	m	class:__anonaf8e80d60110::auto_array	typeref:typename:T *	file:
asyncLogQueue	src/easylogging++.h	/^  inline base::AsyncLogQueue* asyncLogQueue(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::AsyncLogQueue *
auto_array	samples/OpenGL/Cube/imageloader.cpp	/^            auto_array(const auto_array<T> &aarray) {$/;"	f	class:__anonaf8e80d60110::auto_array	file:
auto_array	samples/OpenGL/Cube/imageloader.cpp	/^            explicit auto_array(T* array_ = NULL) :$/;"	f	class:__anonaf8e80d60110::auto_array	file:
auto_array	samples/OpenGL/Cube/imageloader.cpp	/^    class auto_array {$/;"	c	namespace:__anonaf8e80d60110	file:
base	src/easylogging++.cc	/^namespace base {$/;"	n	namespace:el	file:
base	src/easylogging++.h	/^namespace base {$/;"	n	namespace:el
begin	src/easylogging++.h	/^  iterator begin(void) {$/;"	f	class:el::base::workarounds::IterableContainer	typeref:typename:iterator
begin	src/easylogging++.h	/^  virtual inline iterator begin(void) ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:iterator
bitwise	src/easylogging++.h	/^namespace bitwise {$/;"	n	namespace:el::base::utils
brief	src/easylogging++.h	/^  const char* brief;$/;"	m	struct:el::base::consts::__anone7a3f4e10408	typeref:typename:const char *
build	samples/API/logbuilder.cpp	/^    std::string build(const el::LogMessage* logMessage, bool appendNewLine) const {$/;"	f	class:MyLogBuilder	typeref:typename:std::string	file:
build	src/easylogging++.cc	/^base::type::string_t DefaultLogBuilder::build(const LogMessage* logMessage, bool appendNewLine) /;"	f	class:el::base::DefaultLogBuilder	typeref:typename:base::type::string_t
build	src/easylogging++.cc	/^void TypedConfigurations::build(Configurations* configurations) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:void
buildBaseFilename	src/easylogging++.cc	/^void File::buildBaseFilename(const std::string& fullPath, char buff[], std::size_t limit, const /;"	f	class:el::base::utils::File	typeref:typename:void
buildStrippedFilename	src/easylogging++.cc	/^void File::buildStrippedFilename(const char* filename, char buff[], std::size_t limit) {$/;"	f	class:el::base::utils::File	typeref:typename:void
buildTimeInfo	src/easylogging++.cc	/^struct ::tm* DateTime::buildTimeInfo(struct timeval* currTime, struct ::tm* timeInfo) {$/;"	f	class:el::base::utils::DateTime	typeref:struct:::tm *
build_static_lib	CMakeLists.txt	/^option(build_static_lib "Build easyloggingpp as a static library" OFF)$/;"	D
buttonInfo	samples/Qt/fast-dictionary/ui_mainwindow.h	/^    QPushButton *buttonInfo;$/;"	m	class:Ui_MainWindow	typeref:typename:QPushButton *
buttonOkCancel	samples/Qt/file-splitter-joiner/addsplittedfiledialog.h	/^    QDialogButtonBox* buttonOkCancel;$/;"	m	class:AddSplittedFileDialog	typeref:typename:QDialogButtonBox *
buttonRemove	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    QPushButton* buttonRemove;$/;"	m	class:SplitterWidget	typeref:typename:QPushButton *
cOld	test/write-all-test.h	/^    Configurations cOld(*Loggers::getLogger("default")->configurations());$/;"	v	typeref:typename:Configurations
cStringCaseEq	src/easylogging++.cc	/^bool Str::cStringCaseEq(const char* s1, const char* s2) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
cStringEq	src/easylogging++.cc	/^bool Str::cStringEq(const char* s1, const char* s2) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
c_str	test/loggable-test.h	/^    const char* c_str(void) const { return m_str; }$/;"	f	class:String	typeref:typename:const char *
call1	samples/STL/crash.cpp	/^    void call1(void) {$/;"	f	class:Crasher	typeref:typename:void	file:
call2	samples/STL/crash.cpp	/^    void call2(void) {$/;"	f	class:Crasher	typeref:typename:void	file:
call3	samples/STL/crash.cpp	/^    void call3(void) {$/;"	f	class:Crasher	typeref:typename:void	file:
callback	src/easylogging++.h	/^  static T* callback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT) {$/;"	f	class:el::base::utils::Utils	typeref:typename:T *
cancel	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^void PartProcessor::cancel(void) {$/;"	f	class:PartProcessor	typeref:typename:void
cancel	samples/Qt/file-splitter-joiner/splittercore.cpp	/^void SplitterCore::cancel(void) {$/;"	f	class:SplitterCore	typeref:typename:void
cancelButton	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    QPushButton* cancelButton;$/;"	m	class:SplitterWidget	typeref:typename:QPushButton *
cancelSplit	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::cancelSplit(void) const {$/;"	f	class:SplitterWidget	typeref:typename:void
cancelled	samples/Qt/file-splitter-joiner/splittercore.h	/^    bool cancelled;$/;"	m	class:SplitterCore	typeref:typename:bool
cancelled_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    bool cancelled_;$/;"	m	class:PartProcessor	typeref:typename:bool
castFromInt	src/easylogging++.h	/^  static ConfigurationType castFromInt(base::type::EnumType c) {$/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType
castFromInt	src/easylogging++.h	/^  static Level castFromInt(base::type::EnumType l) {$/;"	f	class:el::LevelHelper	typeref:typename:Level
castToInt	src/easylogging++.h	/^  static base::type::EnumType castToInt(ConfigurationType configurationType) {$/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:base::type::EnumType
castToInt	src/easylogging++.h	/^  static base::type::EnumType castToInt(Level level) {$/;"	f	class:el::LevelHelper	typeref:typename:base::type::EnumType
cbegin	src/easylogging++.h	/^  virtual inline const_iterator cbegin(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:const_iterator
cend	src/easylogging++.h	/^  virtual inline const_iterator cend(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:const_iterator
centralWidget	samples/Qt/fast-dictionary/ui_mainwindow.h	/^    QWidget *centralWidget;$/;"	m	class:Ui_MainWindow	typeref:typename:QWidget *
char_t	src/easylogging++.h	/^typedef wchar_t char_t;$/;"	t	namespace:el::base::type	typeref:typename:wchar_t
checkpoint	src/easylogging++.cc	/^void PerformanceTracker::checkpoint(const std::string& id, const char* file, base::type::LineNum/;"	f	class:el::base::PerformanceTracker	typeref:typename:void
clean	samples/OpenGL/Cube/Makefile	/^clean:$/;"	t
clean	src/easylogging++.cc	/^bool AsyncDispatchWorker::clean(void) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:bool
cleanFile	test/test.h	/^static void cleanFile(const char* filename = logfile, el::base::type::fstream_t* fs = nullptr) {$/;"	f	typeref:typename:void
clear	src/easylogging++.h	/^  inline void clear(void) {$/;"	f	class:el::Configurations	typeref:typename:void
clear	test/registry-test.h	/^    void clear() {$/;"	f	class:People	typeref:typename:void
clear	test/registry-test.h	/^    void clear() {$/;"	f	class:PeopleWithPred	typeref:typename:void
clearBuff	src/easylogging++.cc	/^char* Str::clearBuff(char buff[], std::size_t lim) {$/;"	f	class:el::base::utils::Str	typeref:typename:char *
clearModules	src/easylogging++.h	/^  inline void clearModules(void) {$/;"	f	class:el::base::VRegistry	typeref:typename:void
clearVModules	src/easylogging++.cc	/^void Loggers::clearVModules(void) {$/;"	f	class:el::Loggers	typeref:typename:void
closeFiles	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^void PartProcessor::closeFiles(void) {$/;"	f	class:PartProcessor	typeref:typename:void
commandLineArgs	src/easylogging++.h	/^  inline const base::utils::CommandLineArgs* commandLineArgs(void) const {$/;"	f	class:el::base::Storage	typeref:typename:const base::utils::CommandLineArgs *
configString	src/easylogging++.cc	/^  const char* configString;$/;"	m	struct:el::ConfigurationStringToTypeItem	typeref:typename:const char *	file:
configStringToTypeMap	src/easylogging++.cc	/^static struct ConfigurationStringToTypeItem configStringToTypeMap[] = {$/;"	v	namespace:el	typeref:struct:ConfigurationStringToTypeItem[]	file:
configType	src/easylogging++.cc	/^  ConfigurationType configType;$/;"	m	struct:el::ConfigurationStringToTypeItem	typeref:typename:ConfigurationType	file:
configurationFile	src/easylogging++.h	/^  inline const std::string& configurationFile(void) const {$/;"	f	class:el::Configurations	typeref:typename:const std::string &
configurationType	src/easylogging++.h	/^  inline ConfigurationType configurationType(void) const {$/;"	f	class:el::Configuration	typeref:typename:ConfigurationType
configurations	src/easylogging++.h	/^  const Configurations* configurations(void) const {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const Configurations *
configurations	src/easylogging++.h	/^  inline Configurations* configurations(void) {$/;"	f	class:el::Logger	typeref:typename:Configurations *
configure	src/easylogging++.cc	/^void Logger::configure(const Configurations& configurations) {$/;"	f	class:el::Logger	typeref:typename:void
configureFromArg	samples/STL/helpers.cpp	/^void configureFromArg() {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP void
configureFromArg	src/easylogging++.cc	/^bool Loggers::configureFromArg(const char* argKey) {$/;"	f	class:el::Loggers	typeref:typename:bool
configureFromGlobal	src/easylogging++.cc	/^void Loggers::configureFromGlobal(const char* globalConfigurationFilePath) {$/;"	f	class:el::Loggers	typeref:typename:void
const_iterator	src/easylogging++.h	/^  typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::base::utils::AbstractRegistry	typeref:typename:Container::const_iterator
const_iterator	src/easylogging++.h	/^  typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::base::workarounds::IterableContainer	typeref:typename:Container::const_iterator
const_iterator	src/easylogging++.h	/^  typedef typename Registry<T_Ptr, T_Key>::const_iterator const_iterator;$/;"	t	class:el::base::utils::Registry	typeref:typename:Registry<T_Ptr,T_Key>::const_iterator
const_iterator	src/easylogging++.h	/^  typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;$/;"	t	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred<T_Ptr,Pred>::const_iterator
construct	src/easylogging++.cc	/^Writer& Writer::construct(Logger* logger, bool needLock) {$/;"	f	class:el::base::Writer	typeref:typename:Writer &
construct	src/easylogging++.cc	/^Writer& Writer::construct(int count, const char* loggerIds, ...) {$/;"	f	class:el::base::Writer	typeref:typename:Writer &
consts	src/easylogging++.cc	/^namespace consts {$/;"	n	namespace:el::base	file:
consts	src/easylogging++.h	/^namespace consts {$/;"	n	namespace:el::base
contains	src/easylogging++.cc	/^bool Str::contains(const char* str, char c) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
continueRunning	src/easylogging++.h	/^  bool continueRunning(void) const {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:bool
convertAndAddToBuff	src/easylogging++.cc	/^char* Str::convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLim, bool zeroP/;"	f	class:el::base::utils::Str	typeref:typename:char *
convertFromString	src/easylogging++.cc	/^ConfigurationType ConfigurationTypeHelper::convertFromString(const char* configStr) {$/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType
convertFromString	src/easylogging++.cc	/^Level LevelHelper::convertFromString(const char* levelStr) {$/;"	f	class:el::LevelHelper	typeref:typename:Level
convertToColoredOutput	src/easylogging++.cc	/^void LogBuilder::convertToColoredOutput(base::type::string_t* logLine, Level level) {$/;"	f	class:el::LogBuilder	typeref:typename:void
convertToString	src/easylogging++.cc	/^const char* ConfigurationTypeHelper::convertToString(ConfigurationType configurationType) {$/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:const char *
convertToString	src/easylogging++.cc	/^const char* LevelHelper::convertToString(Level level) {$/;"	f	class:el::LevelHelper	typeref:typename:const char *
core	samples/Qt/file-splitter-joiner/joinercore.h	/^    PartProcessor* core;$/;"	m	class:JoinerCore	typeref:typename:PartProcessor *
core	samples/Qt/file-splitter-joiner/joinerwidget.h	/^    JoinerCore* core;$/;"	m	class:JoinerWidget	typeref:typename:JoinerCore *
crashAbort	src/easylogging++.cc	/^static inline void crashAbort(int sig) {$/;"	f	namespace:el::base::debug	typeref:typename:void	file:
crashAbort	src/easylogging++.cc	/^void Helpers::crashAbort(int sig, const char* sourceFile, unsigned int long line) {$/;"	f	class:el::Helpers	typeref:typename:void
crashReason	src/easylogging++.cc	/^static std::string crashReason(int sig) {$/;"	f	namespace:el::base::debug	typeref:typename:std::string	file:
createEditor	samples/Qt/file-splitter-joiner/splitablefiledelegate.cpp	/^QWidget* SplitableFileDelegate::createEditor(QWidget *parent,$/;"	f	class:SplitableFileDelegate	typeref:typename:QWidget *
createPath	src/easylogging++.cc	/^bool File::createPath(const std::string& path) {$/;"	f	class:el::base::utils::File	typeref:typename:bool
currentHost	src/easylogging++.cc	/^std::string OS::currentHost(void) {$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
currentUser	src/easylogging++.cc	/^std::string OS::currentUser(void) {$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
customFormatSpecifiers	src/easylogging++.h	/^  const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(void) const {$/;"	f	class:el::base::Storage	typeref:typename:const std::vector<CustomFormatSpecifier> *
customFormatSpecifiersLock	src/easylogging++.h	/^  base::threading::Mutex& customFormatSpecifiersLock() {$/;"	f	class:el::base::Storage	typeref:typename:base::threading::Mutex &
cv	src/easylogging++.h	/^  std::condition_variable cv;$/;"	m	class:el::base::AsyncDispatchWorker	typeref:typename:std::condition_variable
data	src/easylogging++.h	/^  inline LogDispatchData* data(void) {$/;"	f	class:el::base::AsyncLogItem	typeref:typename:LogDispatchData *
dataReceived	samples/gtkmm/sigc++.cpp	/^void dataReceived(void) {$/;"	f	typeref:typename:void
dataSent	samples/gtkmm/sigc++.cpp	/^void dataSent(void) {$/;"	f	typeref:typename:void
dateTimeFormat	src/easylogging++.h	/^  inline const std::string& dateTimeFormat(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:const std::string &
debug	src/easylogging++.cc	/^namespace debug {$/;"	n	namespace:el::base	file:
deepCopy	src/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, std::unordered_map<T_Key, T_Ptr*>>& sr) EL/;"	f	class:el::base::utils::Registry	typeref:typename:void
deepCopy	src/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>& sr) {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:void
def	samples/STL/multi-loggers-to-same-file.cpp	/^void def() {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP void
defaultConfigurations	src/easylogging++.cc	/^const Configurations* Loggers::defaultConfigurations(void) {$/;"	f	class:el::Loggers	typeref:typename:const Configurations *
defaultConfigurations	src/easylogging++.h	/^  inline Configurations* defaultConfigurations(void) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:Configurations *
defaultCrashHandler	src/easylogging++.cc	/^static inline void defaultCrashHandler(int sig) {$/;"	f	namespace:el::base::debug	typeref:typename:void	file:
defaultPreRollOutCallback	src/easylogging++.h	/^static inline void defaultPreRollOutCallback(const char*, std::size_t) {}$/;"	f	namespace:el::base	typeref:typename:void
defaultTypedConfigurations	src/easylogging++.cc	/^base::TypedConfigurations Loggers::defaultTypedConfigurations(void) {$/;"	f	class:el::Loggers	typeref:typename:base::TypedConfigurations
define ELPP_DEFAULT_LOGGER "update_manager"	README.md	/^#   define ELPP_DEFAULT_LOGGER "update_manager"$/;"	c
define ELPP_DEFAULT_PERFORMANCE_LOGGER ELPP_DEFAULT_LOGGER	README.md	/^#   define ELPP_DEFAULT_PERFORMANCE_LOGGER ELPP_DEFAULT_LOGGER$/;"	c
destinationFile_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QFile destinationFile_;$/;"	m	class:PartProcessor	typeref:typename:QFile
destinationFilename_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QString destinationFilename_;$/;"	m	class:PartProcessor	typeref:typename:QString
detail	src/easylogging++.h	/^  const char* detail;$/;"	m	struct:el::base::consts::__anone7a3f4e10408	typeref:typename:const char *
dispatch	samples/Qt/fast-dictionary/mainwindow.cc	/^    void dispatch(el::base::type::string_t&& logLine) noexcept$/;"	f	class:LogTerminal	typeref:typename:void	file:
dispatch	samples/send-to-network/network-logger.cpp	/^  void dispatch(el::base::type::string_t&& logLine) noexcept$/;"	f	class:NetworkDispatcher	typeref:typename:void	file:
dispatch	src/easylogging++.cc	/^void DefaultLogDispatchCallback::dispatch(base::type::string_t&& logLine) {$/;"	f	class:el::base::DefaultLogDispatchCallback	typeref:typename:void
dispatch	src/easylogging++.cc	/^void LogDispatcher::dispatch(void) {$/;"	f	class:el::base::LogDispatcher	typeref:typename:void
dispatchAction	src/easylogging++.h	/^  inline base::DispatchAction dispatchAction(void) const {$/;"	f	class:el::LogDispatchData	typeref:typename:base::DispatchAction
div	samples/Qt/shared-lib/mylib/mylib.cc	/^float Mylib::div(float x, float y) const$/;"	f	class:Mylib	typeref:typename:float
drawScene	samples/OpenGL/Cube/main.cpp	/^void drawScene() {$/;"	f	typeref:typename:void
easyloggingpp	CMakeLists.txt	/^        add_library(easyloggingpp STATIC src\/easylogging++.cc)$/;"	t
easyloggingpp-unit-tests	CMakeLists.txt	/^    add_executable(easyloggingpp-unit-tests$/;"	t
el	src/easylogging++.cc	/^namespace el {$/;"	n	file:
el	src/easylogging++.h	/^namespace el {$/;"	n
elpptime	src/easylogging++.h	/^#   define elpptime /;"	d
elpptime_r	src/easylogging++.h	/^#   define elpptime_r /;"	d
elpptime_s	src/easylogging++.h	/^#   define elpptime_s /;"	d
empty	src/easylogging++.cc	/^bool CommandLineArgs::empty(void) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:bool
empty	src/easylogging++.h	/^  inline bool empty(void) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:bool
empty	src/easylogging++.h	/^  virtual inline bool empty(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:bool
emptyQueue	src/easylogging++.cc	/^void AsyncDispatchWorker::emptyQueue(void) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
enabled	src/easylogging++.cc	/^bool TypedConfigurations::enabled(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
enabled	src/easylogging++.h	/^  inline bool enabled(Level level) const {$/;"	f	class:el::Logger	typeref:typename:bool
enabled	src/easylogging++.h	/^  inline bool enabled(void) const {$/;"	f	class:el::Callback	typeref:typename:bool
end	src/easylogging++.h	/^  iterator end(void) {$/;"	f	class:el::base::workarounds::IterableContainer	typeref:typename:iterator
end	src/easylogging++.h	/^  virtual inline iterator end(void) ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:iterator
endsWith	src/easylogging++.cc	/^bool Str::endsWith(const std::string& str, const std::string& end) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
errors	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^QList<Error*> PartProcessor::errors(void) const {$/;"	f	class:PartProcessor	typeref:typename:QList<Error * >
errors_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QList<Error*> errors_;$/;"	m	class:PartProcessor	typeref:typename:QList<Error * >
event	samples/STL/shared-static-libs/lib/mylib.cpp	/^void MyLib::event(int a) {$/;"	f	class:MyLib	typeref:typename:void
extractPathFromFilename	src/easylogging++.cc	/^std::string File::extractPathFromFilename(const std::string& fullPath, const char* separator) {$/;"	f	class:el::base::utils::File	typeref:typename:std::string
f	samples/STL/multi-loggers-with-async.cpp	/^void f() {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP void
file	src/easylogging++.h	/^  inline const std::string& file(void) const {$/;"	f	class:el::LogMessage	typeref:typename:const std::string &
fileCompleted	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::fileCompleted(int index) {$/;"	f	class:SplitterWidget	typeref:typename:void
fileExists	test/test.h	/^static bool fileExists(const char* filename) {$/;"	f	typeref:typename:bool
fileHandle	src/easylogging++.cc	/^base::threading::Mutex& LogDispatchCallback::fileHandle(const LogDispatchData* data) {$/;"	f	class:el::LogDispatchCallback	typeref:typename:base::threading::Mutex &
fileModel	samples/Qt/file-splitter-joiner/splittercore.h	/^    QStandardItemModel* fileModel;$/;"	m	class:SplitterCore	typeref:typename:QStandardItemModel *
fileModel	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    QStandardItemModel* fileModel;$/;"	m	class:SplitterWidget	typeref:typename:QStandardItemModel *
filePartsPointers	samples/Qt/file-splitter-joiner/addsplittedfiledialog.h	/^    QTreeWidgetItem* filePartsPointers;$/;"	m	class:AddSplittedFileDialog	typeref:typename:QTreeWidgetItem *
fileStarted	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::fileStarted(int index, const QString& filename, const QString& destinationD/;"	f	class:SplitterWidget	typeref:typename:void
fileStream	src/easylogging++.cc	/^base::type::fstream_t* TypedConfigurations::fileStream(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:base::type::fstream_t *
filename	src/easylogging++.cc	/^const std::string& TypedConfigurations::filename(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const std::string &
filename	src/easylogging++.h	/^  inline const char* filename(void) const {$/;"	f	class:el::base::HitCounter	typeref:typename:const char *
filename	test/file-utils-test.h	/^static const char* filename = "\/tmp\/files_utils_test";$/;"	v	typeref:typename:const char *
filenamePointer	samples/Qt/file-splitter-joiner/addsplittedfiledialog.h	/^    QTreeWidgetItem* filenamePointer;$/;"	m	class:AddSplittedFileDialog	typeref:typename:QTreeWidgetItem *
filesOpened	samples/Qt/file-splitter-joiner/partprocessor.h	/^    bool filesOpened;$/;"	m	class:PartProcessor	typeref:typename:bool
finished	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^void JoinerWidget::finished(PartProcessor* finishedFile) {$/;"	f	class:JoinerWidget	typeref:typename:void
finished	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::finished(PartProcessor* finishedPart) {$/;"	f	class:SplitterWidget	typeref:typename:void
flags	src/easylogging++.h	/^  inline base::type::EnumType flags(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:base::type::EnumType
flags	src/easylogging++.h	/^  inline base::type::EnumType flags(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::type::EnumType
flush	samples/STL/helpers.cpp	/^void flush() {$/;"	f	typeref:typename:void
flush	src/easylogging++.cc	/^void Logger::flush(Level level, base::type::fstream_t* fs) {$/;"	f	class:el::Logger	typeref:typename:void
flush	src/easylogging++.cc	/^void Logger::flush(void) {$/;"	f	class:el::Logger	typeref:typename:void
flushAll	src/easylogging++.cc	/^void Loggers::flushAll(void) {$/;"	f	class:el::Loggers	typeref:typename:void
flushAll	src/easylogging++.h	/^  inline void flushAll(void) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
forEachConfigType	src/easylogging++.cc	/^void ConfigurationTypeHelper::forEachConfigType(base::type::EnumType* startIndex, const std::fun/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:void
forEachLevel	src/easylogging++.cc	/^void LevelHelper::forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>/;"	f	class:el::LevelHelper	typeref:typename:void
format	src/easylogging++.h	/^  inline const base::type::string_t& format(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:const base::type::string_t &
formatSpecifier	src/easylogging++.h	/^  inline const char* formatSpecifier(void) const {$/;"	f	class:el::CustomFormatSpecifier	typeref:typename:const char *
formatTime	src/easylogging++.cc	/^base::type::string_t DateTime::formatTime(unsigned long long time, base::TimestampUnit timestamp/;"	f	class:el::base::utils::DateTime	typeref:typename:base::type::string_t
front	src/easylogging++.h	/^  inline AsyncLogItem front(void) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:AsyncLogItem
fs	test/file-utils-test.h	/^static el::base::type::fstream_t* fs;$/;"	v	typeref:typename:el::base::type::fstream_t *
fstream_t	src/easylogging++.h	/^typedef std::wfstream fstream_t;$/;"	t	namespace:el::base::type	typeref:typename:std::wfstream
func	src/easylogging++.h	/^  inline const std::string& func(void) const {$/;"	f	class:el::LogMessage	typeref:typename:const std::string &
future_	samples/Qt/fast-dictionary/listwithsearch.hh	/^    QFuture<void> future_;$/;"	m	class:ListWithSearch	typeref:typename:QFuture<void>
generateNew	src/easylogging++.cc	/^void StackTrace::generateNew(void) {$/;"	f	class:el::base::debug::StackTrace	typeref:typename:void
get	samples/OpenGL/Cube/imageloader.cpp	/^            T* get() const {$/;"	f	class:__anonaf8e80d60110::auto_array	typeref:typename:T *	file:
get	src/easylogging++.cc	/^Logger* RegisteredLoggers::get(const std::string& id, bool forceCreation) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:Logger *
get	src/easylogging++.h	/^  T_Ptr* get(const T& arg1, const T2 arg2) {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:T_Ptr *
get	src/easylogging++.h	/^  T_Ptr* get(const T_Key& uniqKey) {$/;"	f	class:el::base::utils::Registry	typeref:typename:T_Ptr *
get	src/easylogging++.h	/^  inline Configuration* get(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Configurations	typeref:typename:Configuration *
get	test/registry-test.h	/^    Person* get(const std::string& name, unsigned int numb) {$/;"	f	class:PeopleWithPred	typeref:typename:Person *
getBashOutput	src/easylogging++.cc	/^const std::string OS::getBashOutput(const char* command) {$/;"	f	class:el::base::utils::OS	typeref:typename:const std::string
getConfFile	test/typed-configurations-test.h	/^const char* getConfFile(void) {$/;"	f	typeref:typename:const char *
getConfigByRef	src/easylogging++.h	/^  inline Conf_T& getConfigByRef(Level level, std::unordered_map<Level, Conf_T>* confMap, const c/;"	f	class:el::base::TypedConfigurations	typeref:typename:Conf_T &
getConfigByVal	src/easylogging++.h	/^  inline Conf_T getConfigByVal(Level level, const std::unordered_map<Level, Conf_T>* confMap, co/;"	f	class:el::base::TypedConfigurations	typeref:typename:Conf_T
getCounter	src/easylogging++.h	/^  inline const base::HitCounter* getCounter(const char* filename, base::type::LineNumber lineNum/;"	f	class:el::base::RegisteredHitCounters	typeref:typename:const base::HitCounter *
getCurrentThreadId	src/easylogging++.h	/^static inline std::string getCurrentThreadId(void) {$/;"	f	namespace:el::base::threading	typeref:typename:std::string
getCurrentThreadId	src/easylogging++.h	/^static std::string getCurrentThreadId(void) {$/;"	f	namespace:el::base::threading	typeref:typename:std::string
getDate	test/test.h	/^static std::string getDate(const char* format = "%a %b %d, %H:%m") {$/;"	f	typeref:typename:std::string
getDateTime	src/easylogging++.cc	/^std::string DateTime::getDateTime(const char* format, const base::SubsecondPrecision* ssPrec) {$/;"	f	class:el::base::utils::DateTime	typeref:typename:std::string
getDeviceName	src/easylogging++.cc	/^std::string OS::getDeviceName(void) {$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
getEnvironmentVariable	src/easylogging++.cc	/^std::string OS::getEnvironmentVariable(const char* variableName, const char* defaultVal,$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
getFormattedTimeTaken	src/easylogging++.cc	/^const base::type::string_t PerformanceTracker::getFormattedTimeTaken(struct timeval startTime) c/;"	f	class:el::base::PerformanceTracker	typeref:typename:const base::type::string_t
getInt	samples/STL/make-loggable.cpp	/^    int getInt(void) const { return m_underlyingInt; }$/;"	f	class:Integer	typeref:typename:int	file:
getIp	samples/STL/custom-format-spec.cpp	/^    std::string getIp(const el::LogMessage*) {$/;"	f	class:HttpRequest	typeref:typename:std::string	file:
getIp	test/custom-format-specifier-test.h	/^const char* getIp(const el::LogMessage*) {$/;"	f	typeref:typename:const char *
getLogger	src/easylogging++.cc	/^Logger* Loggers::getLogger(const std::string& identity, bool registerIfNotAvailable) {$/;"	f	class:el::Loggers	typeref:typename:Logger *
getParamValue	src/easylogging++.cc	/^const char* CommandLineArgs::getParamValue(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:const char *
getPerson	test/registry-test.h	/^    Person* getPerson(const char* name) {$/;"	f	class:People	typeref:typename:Person *
getProperty	src/easylogging++.cc	/^std::string OS::getProperty(const char* prop) {$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
getSeverity	samples/STL/custom-format-spec.cpp	/^getSeverity(const el::LogMessage* message) {$/;"	f	typeref:typename:std::string
getSizeOfFile	src/easylogging++.cc	/^std::size_t File::getSizeOfFile(base::type::fstream_t* fs) {$/;"	f	class:el::base::utils::File	typeref:typename:std::size_t
getStaticMetaObject	samples/Qt/fast-dictionary/moc_listwithsearch.cpp	/^const QMetaObject &ListWithSearch::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:ListWithSearch	typeref:typename:const QMetaObject &
getStaticMetaObject	samples/Qt/fast-dictionary/moc_mainwindow.cpp	/^const QMetaObject &MainWindow::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MainWindow	typeref:typename:const QMetaObject &
getThreadId_CustomVersion	samples/STL/pthread.cpp	/^const char* getThreadId_CustomVersion(const el::LogMessage*) {$/;"	f	typeref:typename:const char *
getThreadName	src/easylogging++.h	/^  inline std::string getThreadName(const std::string& threadId) {$/;"	f	class:el::base::Storage	typeref:typename:std::string
getTimeDifference	src/easylogging++.cc	/^unsigned long long DateTime::getTimeDifference(const struct timeval& endTime, const struct timev/;"	f	class:el::base::utils::DateTime	typeref:typename:unsigned long long
getULong	src/easylogging++.cc	/^unsigned long TypedConfigurations::getULong(std::string confVal) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:unsigned long
getWindowsEnvironmentVariable	src/easylogging++.cc	/^const char* OS::getWindowsEnvironmentVariable(const char* varname) {$/;"	f	class:el::base::utils::OS	typeref:typename:const char *
gettimeofday	src/easylogging++.cc	/^void DateTime::gettimeofday(struct timeval* tv) {$/;"	f	class:el::base::utils::DateTime	typeref:typename:void
handle	samples/Qt/basic/main.cpp	/^    void handle(const el::LogDispatchData* data) {$/;"	f	class:HtmlHandler	typeref:typename:void	file:
handle	samples/Qt/basic/main.cpp	/^    void handle(const el::LogDispatchData* data) {$/;"	f	class:LogHandler	typeref:typename:void	file:
handle	samples/Qt/fast-dictionary/mainwindow.cc	/^    void handle(const el::LogDispatchData* data) noexcept override$/;"	f	class:LogTerminal	typeref:typename:void	file:
handle	samples/STL/custom-performance-output.cpp	/^    void handle(const el::PerformanceTrackingData* data) {$/;"	f	class:MyPerformanceTrackingOutput	typeref:typename:void	file:
handle	samples/STL/log-dispatch-callback.cpp	/^    void handle(const el::LogDispatchData*) {$/;"	f	class:MyHandler	typeref:typename:void	file:
handle	samples/STL/log-dispatch-callback.cpp	/^    void handle(const el::LogDispatchData*) {$/;"	f	class:MyHtmlHandler	typeref:typename:void	file:
handle	samples/STL/multi-loggers-with-async.cpp	/^    void handle(const el::LogDispatchData* d) {$/;"	f	class:MyHandler	typeref:typename:void	file:
handle	samples/STL/new-logger-registration-callback.cpp	/^void handle(const el::Logger* logger) {$/;"	f	class:Handler	typeref:typename:void	file:
handle	samples/STL/new-logger-registration-callback.cpp	/^void handle(const el::Logger* logger) {$/;"	f	class:Handler2	typeref:typename:void	file:
handle	samples/STL/post-performance-tracking-handler.cpp	/^void handle(const el::PerformanceTrackingData* data) {$/;"	f	class:Handler	typeref:typename:void	file:
handle	samples/STL/pthread.cpp	/^    void handle(const el::LogDispatchData*) {$/;"	f	class:MyHandler	typeref:typename:void	file:
handle	samples/send-to-network/network-logger.cpp	/^  void handle(const el::LogDispatchData* data) noexcept override {$/;"	f	class:NetworkDispatcher	typeref:typename:void	file:
handle	src/easylogging++.cc	/^void AsyncDispatchWorker::handle(AsyncLogItem* logItem) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
handle	src/easylogging++.cc	/^void AsyncLogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	class:el::base::AsyncLogDispatchCallback	typeref:typename:void
handle	src/easylogging++.cc	/^void DefaultLogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	class:el::base::DefaultLogDispatchCallback	typeref:typename:void
handle	src/easylogging++.cc	/^void LogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	class:el::LogDispatchCallback	typeref:typename:void
handle	test/post-log-dispatch-handler-test.h	/^    void handle(const LogDispatchData* data) {$/;"	f	class:LogHandler	typeref:typename:void
handleKeypress	samples/OpenGL/Cube/main.cpp	/^void handleKeypress(unsigned char key, int x, int y) {$/;"	f	typeref:typename:void
handleResize	samples/OpenGL/Cube/main.cpp	/^void handleResize(int w, int h) {$/;"	f	typeref:typename:void
handler	test/strict-file-size-check-test.h	/^void handler(const char*, std::size_t) {$/;"	f	typeref:typename:void
handlerCalled	test/strict-file-size-check-test.h	/^static bool handlerCalled;$/;"	v	typeref:typename:bool
has	src/easylogging++.h	/^  inline bool has(const std::string& id) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:bool
hasConfiguration	src/easylogging++.cc	/^bool Configurations::hasConfiguration(ConfigurationType configurationType) {$/;"	f	class:el::Configurations	typeref:typename:bool
hasConfiguration	src/easylogging++.cc	/^bool Configurations::hasConfiguration(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Configurations	typeref:typename:bool
hasCustomFormatSpecifier	src/easylogging++.cc	/^bool Storage::hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::base::Storage	typeref:typename:bool
hasFlag	src/easylogging++.h	/^  inline bool hasFlag(LoggingFlag flag) const {$/;"	f	class:el::base::Storage	typeref:typename:bool
hasFlag	src/easylogging++.h	/^  inline bool hasFlag(base::FormatFlags flag) const {$/;"	f	class:el::base::LogFormat	typeref:typename:bool
hasFlag	src/easylogging++.h	/^static inline bool hasFlag(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::base::utils	typeref:typename:bool
hasLogger	src/easylogging++.cc	/^bool Loggers::hasLogger(const std::string& identity) {$/;"	f	class:el::Loggers	typeref:typename:bool
hasParam	src/easylogging++.cc	/^bool CommandLineArgs::hasParam(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:bool
hasParamWithValue	src/easylogging++.cc	/^bool CommandLineArgs::hasParamWithValue(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:bool
hash	src/easylogging++.h	/^template<> struct hash<el::Level> {$/;"	s	namespace:std
height	samples/OpenGL/Cube/imageloader.h	/^        int height;$/;"	m	class:Image	typeref:typename:int
help	samples/Qt/file-splitter-joiner/main.cpp	/^void help(PartProcessor::kProcessType type) {$/;"	f	typeref:typename:void
hitCounters	src/easylogging++.h	/^  inline base::RegisteredHitCounters* hitCounters(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::RegisteredHitCounters *
hitCounts	src/easylogging++.h	/^  inline std::size_t hitCounts(void) const {$/;"	f	class:el::base::HitCounter	typeref:typename:std::size_t
i	test/write-all-test.h	/^    for (int i = 1; i <= 6; ++i)$/;"	v	typeref:typename:int
id	src/easylogging++.h	/^  inline const std::string& id(void) const {$/;"	f	class:el::Logger	typeref:typename:const std::string &
idx	samples/STL/roll-out.cpp	/^static unsigned int idx;$/;"	v	typeref:typename:INITIALIZE_EASYLOGGINGPP unsigned int	file:
ignoreComments	src/easylogging++.cc	/^void Configurations::Parser::ignoreComments(std::string* line) {$/;"	f	class:el::Configurations::Parser	typeref:typename:void
increment	src/easylogging++.h	/^  inline void increment(void) {$/;"	f	class:el::base::HitCounter	typeref:typename:void
init	src/easylogging++.cc	/^void SubsecondPrecision::init(int width) {$/;"	f	class:el::base::SubsecondPrecision	typeref:typename:void
initRendering	samples/OpenGL/Cube/main.cpp	/^void initRendering() {$/;"	f	typeref:typename:void
initUnflushedCount	src/easylogging++.cc	/^void Logger::initUnflushedCount(void) {$/;"	f	class:el::Logger	typeref:typename:void
initWidgets	samples/Qt/file-splitter-joiner/mainwindow.cpp	/^void MainWindow::initWidgets(void) {$/;"	f	class:MainWindow	typeref:typename:void
initialize	src/easylogging++.cc	/^void MessageBuilder::initialize(Logger* logger) {$/;"	f	class:el::base::MessageBuilder	typeref:typename:void
initializeDictionary	samples/Qt/fast-dictionary/mainwindow.cc	/^void MainWindow::initializeDictionary(const QString& wordsFile) {$/;"	f	class:MainWindow	typeref:typename:void
initializeLogger	src/easylogging++.cc	/^void Writer::initializeLogger(const std::string& loggerId, bool lookup, bool needLock) {$/;"	f	class:el::base::Writer	typeref:typename:void
insertFile	src/easylogging++.cc	/^void TypedConfigurations::insertFile(Level level, const std::string& fullFilename) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:void
installCallback	src/easylogging++.h	/^  static bool installCallback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT/;"	f	class:el::base::utils::Utils	typeref:typename:bool
installCustomFormatSpecifier	src/easylogging++.cc	/^void Storage::installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	class:el::base::Storage	typeref:typename:void
installLogDispatchCallback	src/easylogging++.h	/^  inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:bool
installLoggerRegistrationCallback	src/easylogging++.h	/^  inline bool installLoggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:bool
installPerformanceTrackingCallback	src/easylogging++.h	/^  inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:bool
internal	src/easylogging++.h	/^namespace internal {$/;"	n	namespace:el::base::threading
io_service	samples/send-to-network/network-logger.cpp	/^    boost::asio::io_service* io_service;$/;"	m	class:Client	typeref:typename:boost::asio::io_service *	file:
isComment	src/easylogging++.cc	/^bool Configurations::Parser::isComment(const std::string& line) {$/;"	f	class:el::Configurations::Parser	typeref:typename:bool
isConfig	src/easylogging++.cc	/^bool Configurations::Parser::isConfig(const std::string& line) {$/;"	f	class:el::Configurations::Parser	typeref:typename:bool
isDigit	src/easylogging++.h	/^  static inline bool isDigit(char c) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
isFlushNeeded	src/easylogging++.h	/^  inline bool isFlushNeeded(Level level) {$/;"	f	class:el::Logger	typeref:typename:bool
isLevel	src/easylogging++.cc	/^bool Configurations::Parser::isLevel(const std::string& line) {$/;"	f	class:el::Configurations::Parser	typeref:typename:bool
isReleased	samples/OpenGL/Cube/imageloader.cpp	/^            mutable bool isReleased;$/;"	m	class:__anonaf8e80d60110::auto_array	typeref:typename:bool	file:
isValidId	src/easylogging++.cc	/^bool Logger::isValidId(const std::string& id) {$/;"	f	class:el::Logger	typeref:typename:bool
items	samples/Qt/fast-dictionary/listwithsearch.hh	/^    QList<QListWidgetItem*> items;$/;"	m	class:ListWithSearch	typeref:typename:QList<QListWidgetItem * >
iterator	src/easylogging++.h	/^  typedef typename Container::iterator iterator;$/;"	t	class:el::base::utils::AbstractRegistry	typeref:typename:Container::iterator
iterator	src/easylogging++.h	/^  typedef typename Container::iterator iterator;$/;"	t	class:el::base::workarounds::IterableContainer	typeref:typename:Container::iterator
iterator	src/easylogging++.h	/^  typedef typename Registry<T_Ptr, T_Key>::iterator iterator;$/;"	t	class:el::base::utils::Registry	typeref:typename:Registry<T_Ptr,T_Key>::iterator
iterator	src/easylogging++.h	/^  typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;$/;"	t	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred<T_Ptr,Pred>::iterator
joinerWidget	samples/Qt/file-splitter-joiner/mainwindow.h	/^    JoinerWidget* joinerWidget;$/;"	m	class:MainWindow	typeref:typename:JoinerWidget *
kAm	src/easylogging++.cc	/^static const char* kAm                              =      "AM";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kAppNameFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kAppNameFormatSpecifier          =      ELPP_LITERAL("%app");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kBehaviour	samples/Qt/fast-dictionary/listwithsearch.hh	/^    enum kBehaviour { kCaseInsensative, kCaseSensative };$/;"	g	class:ListWithSearch
kBufferSize	samples/Qt/file-splitter-joiner/partprocessor.h	/^    static const int kBufferSize           = 4096;$/;"	m	class:PartProcessor	typeref:typename:const int
kCaseInsensative	samples/Qt/fast-dictionary/listwithsearch.hh	/^    enum kBehaviour { kCaseInsensative, kCaseSensative };$/;"	e	enum:ListWithSearch::kBehaviour
kCaseSensative	samples/Qt/fast-dictionary/listwithsearch.hh	/^    enum kBehaviour { kCaseInsensative, kCaseSensative };$/;"	e	enum:ListWithSearch::kBehaviour
kConfigurationComment	src/easylogging++.cc	/^static const char* kConfigurationComment                   =      "##";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kConfigurationLevel	src/easylogging++.cc	/^static const char* kConfigurationLevel                     =      "*";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kConfigurationLoggerId	src/easylogging++.cc	/^static const char* kConfigurationLoggerId                  =      "--";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kCrashSignals	src/easylogging++.h	/^} kCrashSignals[] = {$/;"	v	namespace:el::base::consts	typeref:typename:const struct el::base::consts::__anone7a3f4e10408[]
kCrashSignalsCount	src/easylogging++.h	/^static const int kCrashSignalsCount                          =      sizeof(kCrashSignals) \/ siz/;"	v	namespace:el::base::consts	typeref:typename:const int
kCurrentHostFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kCurrentHostFormatSpecifier      =      ELPP_LITERAL("%host");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kCurrentUserFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kCurrentUserFormatSpecifier      =      ELPP_LITERAL("%user");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kDateTimeFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kDateTimeFormatSpecifier         =      ELPP_LITERAL("%datetime/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kDateTimeFormatSpecifierForFilename	src/easylogging++.cc	/^static const char* kDateTimeFormatSpecifierForFilename            =      "%datetime";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kDays	src/easylogging++.cc	/^static const char* kDays[7]                         =      { "Sunday", "Monday", "Tuesday", "Wed/;"	v	namespace:el::base::consts	typeref:typename:const char * [7]	file:
kDaysAbbrev	src/easylogging++.cc	/^static const char* kDaysAbbrev[7]                   =      { "Sun", "Mon", "Tue", "Wed", "Thu", /;"	v	namespace:el::base::consts	typeref:typename:const char * [7]	file:
kDebugLevelLogValue	src/easylogging++.cc	/^static const base::type::char_t* kDebugLevelLogValue    =   ELPP_LITERAL("DEBUG");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kDebugLevelShortLogValue	src/easylogging++.cc	/^static const base::type::char_t* kDebugLevelShortLogValue    =   ELPP_LITERAL("D");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kDefaultDateTimeFormat	src/easylogging++.cc	/^static const char* kDefaultDateTimeFormat           =      "%Y-%M-%d %H:%m:%s,%g";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultDateTimeFormatInFilename	src/easylogging++.cc	/^static const char* kDefaultDateTimeFormatInFilename =      "%Y-%M-%d_%H-%m";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFile	src/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "\/dev\/null";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFile	src/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "myeasylog.log";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFile	src/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "nul";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFile	src/easylogging++.cc	/^static const char* kDefaultLogFile                         =      ELPP_DEFAULT_LOG_FILE;$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFileParam	src/easylogging++.cc	/^static const char* kDefaultLogFileParam                    =      "--default-log-file";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLoggerId	src/easylogging++.h	/^static const char* kDefaultLoggerId                        =      "default";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultLoggerId	src/easylogging++.h	/^static const char* kDefaultLoggerId                        =      ELPP_DEFAULT_LOGGER;$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultMaxParts	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    static const int kDefaultMaxParts = 5;$/;"	m	class:SplitterWidget	typeref:typename:const int
kDefaultSubsecondPrecision	src/easylogging++.h	/^static const unsigned int kDefaultSubsecondPrecision       =      3;$/;"	v	namespace:el::base::consts	typeref:typename:const unsigned int
kErrorLevelLogValue	src/easylogging++.cc	/^static const base::type::char_t* kErrorLevelLogValue    =   ELPP_LITERAL("ERROR");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kErrorLevelShortLogValue	src/easylogging++.cc	/^static const base::type::char_t* kErrorLevelShortLogValue    =   ELPP_LITERAL("E");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kErrorTypes	samples/Qt/file-splitter-joiner/partprocessor.h	/^    enum kErrorTypes {$/;"	g	class:PartProcessor
kFatalLevelLogValue	src/easylogging++.cc	/^static const base::type::char_t* kFatalLevelLogValue    =   ELPP_LITERAL("FATAL");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kFatalLevelShortLogValue	src/easylogging++.cc	/^static const base::type::char_t* kFatalLevelShortLogValue    =   ELPP_LITERAL("F");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kFilePathSeperator	src/easylogging++.h	/^static const char* kFilePathSeperator                      =      "\/";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kFilePathSeperator	src/easylogging++.h	/^static const char* kFilePathSeperator                      =      "\\\\";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kFormatSpecifierChar	src/easylogging++.h	/^static const char  kFormatSpecifierChar                    =      '%';$/;"	v	namespace:el::base::consts	typeref:typename:const char
kFormatSpecifierCharValue	src/easylogging++.h	/^static const char  kFormatSpecifierCharValue               =      'v';$/;"	v	namespace:el::base::consts	typeref:typename:const char
kHeight	samples/Qt/file-splitter-joiner/mainwindow.h	/^    const static int kHeight    =   400;$/;"	m	class:MainWindow	typeref:typename:const int
kInfoLevelLogValue	src/easylogging++.cc	/^static const base::type::char_t* kInfoLevelLogValue     =   ELPP_LITERAL("INFO");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kInfoLevelShortLogValue	src/easylogging++.cc	/^static const base::type::char_t* kInfoLevelShortLogValue     =   ELPP_LITERAL("I");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogFileBaseFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kLogFileBaseFormatSpecifier      =      ELPP_LITERAL("%fbase");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogFileFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kLogFileFormatSpecifier          =      ELPP_LITERAL("%file");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogFunctionFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kLogFunctionFormatSpecifier      =      ELPP_LITERAL("%func");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogLevel_Debug	samples/STL/custom-format-spec.cpp	/^    kLogLevel_Debug,$/;"	e	enum:ELogLevel	file:
kLogLevel_Error	samples/STL/custom-format-spec.cpp	/^    kLogLevel_Error,$/;"	e	enum:ELogLevel	file:
kLogLevel_Info	samples/STL/custom-format-spec.cpp	/^    kLogLevel_Info,$/;"	e	enum:ELogLevel	file:
kLogLevel_Off	samples/STL/custom-format-spec.cpp	/^    kLogLevel_Off = 0,$/;"	e	enum:ELogLevel	file:
kLogLevel_Verbose	samples/STL/custom-format-spec.cpp	/^    kLogLevel_Verbose$/;"	e	enum:ELogLevel	file:
kLogLevel_Warning	samples/STL/custom-format-spec.cpp	/^    kLogLevel_Warning,$/;"	e	enum:ELogLevel	file:
kLogLineFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kLogLineFormatSpecifier          =      ELPP_LITERAL("%line");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogLocationFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kLogLocationFormatSpecifier      =      ELPP_LITERAL("%loc");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLoggerIdFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kLoggerIdFormatSpecifier         =      ELPP_LITERAL("%logger")/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLoggingFlagsParam	src/easylogging++.cc	/^static const char* kLoggingFlagsParam                      =      "--logging-flags";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kMaxLogPerContainer	src/easylogging++.h	/^static const unsigned int kMaxLogPerContainer              =      100;$/;"	v	namespace:el::base::consts	typeref:typename:const unsigned int
kMaxLogPerCounter	src/easylogging++.h	/^static const unsigned int kMaxLogPerCounter                =      100000;$/;"	v	namespace:el::base::consts	typeref:typename:const unsigned int
kMaxSplitPossible	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    static const int kMaxSplitPossible = 100;$/;"	m	class:SplitterWidget	typeref:typename:const int
kMaxValid	src/easylogging++.h	/^  static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(ConfigurationT/;"	m	class:el::ConfigurationTypeHelper	typeref:typename:const base::type::EnumType
kMaxValid	src/easylogging++.h	/^  static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Level::Info);$/;"	m	class:el::LevelHelper	typeref:typename:const base::type::EnumType
kMaxVerboseLevel	src/easylogging++.cc	/^static const base::type::VerboseLevel kMaxVerboseLevel     =      9;$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::VerboseLevel	file:
kMerge	samples/Qt/file-splitter-joiner/partprocessor.h	/^        kMerge = 1$/;"	e	enum:PartProcessor::kProcessType
kMessageFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kMessageFormatSpecifier          =      ELPP_LITERAL("%msg");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kMinValid	src/easylogging++.h	/^  static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(ConfigurationT/;"	m	class:el::ConfigurationTypeHelper	typeref:typename:const base::type::EnumType
kMinValid	src/easylogging++.h	/^  static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Level::Trace);$/;"	m	class:el::LevelHelper	typeref:typename:const base::type::EnumType
kMonths	src/easylogging++.cc	/^static const char* kMonths[12]                      =      { "January", "February", "March", "Ap/;"	v	namespace:el::base::consts	typeref:typename:const char * [12]	file:
kMonthsAbbrev	src/easylogging++.cc	/^static const char* kMonthsAbbrev[12]                =      { "Jan", "Feb", "Mar", "Apr", "May", /;"	v	namespace:el::base::consts	typeref:typename:const char * [12]	file:
kNullPointer	src/easylogging++.cc	/^static const char* kNullPointer                            =      "nullptr";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kOpenFileError	samples/Qt/file-splitter-joiner/partprocessor.h	/^        kOpenFileError = 13$/;"	e	enum:PartProcessor::kErrorTypes
kPartSuffix	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^const char* PartProcessor::kPartSuffix = "_split-part_";$/;"	m	class:PartProcessor	typeref:typename:const char *
kPartSuffix	samples/Qt/file-splitter-joiner/partprocessor.h	/^    static const char* kPartSuffix;$/;"	m	class:PartProcessor	typeref:typename:const char *
kPerformanceLoggerId	src/easylogging++.h	/^static const char* kPerformanceLoggerId                    =      "performance";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kPerformanceLoggerId	src/easylogging++.h	/^static const char* kPerformanceLoggerId                    =      ELPP_DEFAULT_PERFORMANCE_LOGGE/;"	v	namespace:el::base::consts	typeref:typename:const char *
kPerformanceTrackerDefaultLevel	src/easylogging++.h	/^static const Level kPerformanceTrackerDefaultLevel         =      Level::Info;$/;"	v	namespace:el::base::consts	typeref:typename:const Level
kPm	src/easylogging++.cc	/^static const char* kPm                              =      "PM";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kProcessType	samples/Qt/file-splitter-joiner/partprocessor.h	/^    enum kProcessType {$/;"	g	class:PartProcessor
kSearchBarHeight	samples/Qt/fast-dictionary/listwithsearch.cc	/^int ListWithSearch::kSearchBarHeight = 22;$/;"	m	class:ListWithSearch	typeref:typename:int
kSearchBarHeight	samples/Qt/fast-dictionary/listwithsearch.hh	/^    static int kSearchBarHeight;$/;"	m	class:ListWithSearch	typeref:typename:int
kSeverityLevelFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kSeverityLevelFormatSpecifier    =      ELPP_LITERAL("%level");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kSeverityLevelShortFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kSeverityLevelShortFormatSpecifier    =      ELPP_LITERAL("%lev/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kSourceFilenameMaxLength	src/easylogging++.h	/^static const std::size_t kSourceFilenameMaxLength          =      100;$/;"	v	namespace:el::base::consts	typeref:typename:const std::size_t
kSourceLineMaxLength	src/easylogging++.h	/^static const std::size_t kSourceLineMaxLength              =      10;$/;"	v	namespace:el::base::consts	typeref:typename:const std::size_t
kSplit	samples/Qt/file-splitter-joiner/partprocessor.h	/^        kSplit = 0,$/;"	e	enum:PartProcessor::kProcessType
kSysLogFile	test/syslog-test.h	/^static const char* kSysLogFile = "\/var\/log\/syslog";$/;"	v	typeref:typename:const char *
kSysLogIdent	test/test.h	/^static const char* kSysLogIdent = "easylogging++ unit test";$/;"	v	typeref:typename:const char *
kSysLogLoggerId	src/easylogging++.h	/^static const char* kSysLogLoggerId                         =      "syslog";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kThreadIdFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kThreadIdFormatSpecifier         =      ELPP_LITERAL("%thread")/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kTimeFormats	src/easylogging++.h	/^} kTimeFormats[] = {$/;"	v	namespace:el::base::consts	typeref:typename:const struct el::base::consts::__anone7a3f4e10308[]
kTimeFormatsCount	src/easylogging++.h	/^static const int kTimeFormatsCount                           =      sizeof(kTimeFormats) \/ size/;"	v	namespace:el::base::consts	typeref:typename:const int
kTraceLevelLogValue	src/easylogging++.cc	/^static const base::type::char_t* kTraceLevelLogValue    =   ELPP_LITERAL("TRACE");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kTraceLevelShortLogValue	src/easylogging++.cc	/^static const base::type::char_t* kTraceLevelShortLogValue    =   ELPP_LITERAL("T");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kUnknownHost	src/easylogging++.cc	/^static const char* kUnknownHost                            =      "unknown-host";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kUnknownUser	src/easylogging++.cc	/^static const char* kUnknownUser                            =      "user";$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kUpdateFrequencyBytes	samples/Qt/file-splitter-joiner/partprocessor.h	/^    static const int kUpdateFrequencyBytes = 2000;$/;"	m	class:PartProcessor	typeref:typename:const int
kValidLoggerIdSymbols	src/easylogging++.cc	/^static const char* kValidLoggerIdSymbols                   =$/;"	v	namespace:el::base::consts	typeref:typename:const char *	file:
kVerboseLevelFormatSpecifier	src/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelFormatSpecifier     =      ELPP_LITERAL("%vlevel")/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kVerboseLevelLogValue	src/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelLogValue  =$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kVerboseLevelShortLogValue	src/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelShortLogValue  =   ELPP_LITERAL("V");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kWarningLevelLogValue	src/easylogging++.cc	/^static const base::type::char_t* kWarningLevelLogValue  =   ELPP_LITERAL("WARNING");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kWarningLevelShortLogValue	src/easylogging++.cc	/^static const base::type::char_t* kWarningLevelShortLogValue  =   ELPP_LITERAL("W");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kWidth	samples/Qt/file-splitter-joiner/mainwindow.h	/^    const static int kWidth     =   550;$/;"	m	class:MainWindow	typeref:typename:const int
kYearBase	src/easylogging++.cc	/^static const int kYearBase                          =      1900;$/;"	v	namespace:el::base::consts	typeref:typename:const int	file:
labelAbout	samples/Qt/fast-dictionary/ui_mainwindow.h	/^    QLabel *labelAbout;$/;"	m	class:Ui_MainWindow	typeref:typename:QLabel *
level	src/easylogging++.cc	/^  Level level;$/;"	m	struct:el::StringToLevelItem	typeref:typename:Level	file:
level	src/easylogging++.h	/^  inline Level level(void) const {$/;"	f	class:el::Configuration	typeref:typename:Level
level	src/easylogging++.h	/^  inline Level level(void) const {$/;"	f	class:el::LogMessage	typeref:typename:Level
level	src/easylogging++.h	/^  inline Level level(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:Level
level	src/easylogging++.h	/^  inline base::type::VerboseLevel level(void) const {$/;"	f	class:el::base::VRegistry	typeref:typename:base::type::VerboseLevel
levelString	src/easylogging++.cc	/^  const char* levelString;$/;"	m	struct:el::StringToLevelItem	typeref:typename:const char *	file:
lib_utc_datetime	CMakeLists.txt	/^option(lib_utc_datetime "Build library with UTC date\/time logging" OFF)$/;"	D
line	src/easylogging++.h	/^  inline base::type::LineNumber line(void) const {$/;"	f	class:el::LogMessage	typeref:typename:base::type::LineNumber
lineNumber	src/easylogging++.h	/^  inline base::type::LineNumber lineNumber(void) const {$/;"	f	class:el::base::HitCounter	typeref:typename:base::type::LineNumber
list	samples/Qt/fast-dictionary/listwithsearch.hh	/^    QListWidget* list;$/;"	m	class:ListWithSearch	typeref:typename:QListWidget *
list	samples/Qt/fast-dictionary/mainwindow.hh	/^    ListWithSearch* list;$/;"	m	class:MainWindow	typeref:typename:ListWithSearch *
list	src/easylogging++.h	/^  virtual inline Container& list(void) ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:Container &
list	src/easylogging++.h	/^  virtual inline const Container& list(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:const Container &
listLogs	samples/STL/containers.cpp	/^void listLogs() {$/;"	f	typeref:typename:void
loadBMP	samples/OpenGL/Cube/imageloader.cpp	/^Image* loadBMP(const char* filename) {$/;"	f	typeref:typename:Image *
loadTexture	samples/OpenGL/Cube/main.cpp	/^GLuint loadTexture(Image* image) {$/;"	f	typeref:typename:GLuint
lock	src/easylogging++.h	/^  inline void lock(void) {$/;"	f	class:el::base::threading::internal::Mutex	typeref:typename:void
lock	src/easylogging++.h	/^  virtual inline base::threading::Mutex& lock(void) ELPP_FINAL { return m_mutex; }$/;"	f	class:el::base::threading::ThreadSafe	typeref:typename:base::threading::Mutex &
log	samples/STL/containers.cpp	/^        virtual void log(el::base::type::ostream_t& os) const {$/;"	f	class:Vehicle	typeref:typename:void	file:
log	samples/STL/custom-class.cpp	/^void Vehicle::log(el::base::type::ostream_t& os) const {$/;"	f	class:Vehicle	typeref:typename:void
log	samples/STL/loggable.cpp	/^    virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:MyClass	typeref:typename:void	file:
log	src/easylogging++.cc	/^void Configuration::log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Configuration	typeref:typename:void
log	src/easylogging++.h	/^  virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Logger	typeref:typename:void
log	src/easylogging++.h	/^  virtual void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::base::LogFormat	typeref:typename:void
log	test/loggable-test.h	/^    void inline log(el::base::type::ostream_t& os) const {$/;"	f	class:Integer	typeref:typename:void
logBuilder	src/easylogging++.h	/^  inline LogBuilder* logBuilder(void) const {$/;"	f	class:el::Logger	typeref:typename:LogBuilder *
logCrashReason	src/easylogging++.cc	/^static void logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logger)/;"	f	namespace:el::base::debug	typeref:typename:void	file:
logCrashReason	src/easylogging++.cc	/^void Helpers::logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logge/;"	f	class:el::Helpers	typeref:typename:void
logDispatchCallback	src/easylogging++.h	/^  inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:T *
logFlushThreshold	src/easylogging++.cc	/^std::size_t TypedConfigurations::logFlushThreshold(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:std::size_t
logFormat	src/easylogging++.cc	/^const base::LogFormat& TypedConfigurations::logFormat(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const base::LogFormat &
logLine	src/easylogging++.h	/^  inline base::type::string_t logLine(void) {$/;"	f	class:el::base::AsyncLogItem	typeref:typename:base::type::string_t
logMessage	src/easylogging++.h	/^  inline LogMessage* logMessage(void) {$/;"	f	class:el::base::AsyncLogItem	typeref:typename:LogMessage *
logMessage	src/easylogging++.h	/^  inline const LogMessage* logMessage(void) const {$/;"	f	class:el::LogDispatchData	typeref:typename:const LogMessage *
logRotate	samples/STL/logrotate-pthread.cpp	/^void* logRotate(void*){$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP void *
logStreamsReference	src/easylogging++.cc	/^const base::LogStreamsReferenceMap* Loggers::logStreamsReference(void) {$/;"	f	class:el::Loggers	typeref:typename:const base::LogStreamsReferenceMap *
logStreamsReference	src/easylogging++.h	/^  inline base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:base::LogStreamsReferenceMap *
logfile	test/test.h	/^static const char* logfile = "\/tmp\/logs\/el.gtest.log";$/;"	v	typeref:typename:INITIALIZE_EASYLOGGINGPP const char *
loggedMessages	test/post-log-dispatch-handler-test.h	/^static std::vector<el::base::type::string_t> loggedMessages;$/;"	v	typeref:typename:std::vector<el::base::type::string_t>
logger	samples/STL/pthread.cpp	/^  el::Logger* logger;$/;"	m	struct:Args	typeref:typename:el::Logger *	file:
logger	src/easylogging++.h	/^  inline Logger* logger(void) const {$/;"	f	class:el::LogMessage	typeref:typename:Logger *
loggerRegistrationCallback	src/easylogging++.h	/^  inline T* loggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:T *
ltrim	src/easylogging++.cc	/^std::string& Str::ltrim(std::string& str) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
m_argc	src/easylogging++.h	/^  int m_argc;$/;"	m	class:el::base::utils::CommandLineArgs	typeref:typename:int
m_argv	src/easylogging++.h	/^  char** m_argv;$/;"	m	class:el::base::utils::CommandLineArgs	typeref:typename:char **
m_asyncDispatchWorker	src/easylogging++.h	/^  base::IWorker* m_asyncDispatchWorker;$/;"	m	class:el::base::Storage	typeref:typename:base::IWorker *
m_asyncLogQueue	src/easylogging++.h	/^  base::AsyncLogQueue* m_asyncLogQueue;$/;"	m	class:el::base::Storage	typeref:typename:base::AsyncLogQueue *
m_button	samples/gtkmm/hello_gtkmm/window.h	/^  Gtk::Button m_button;$/;"	m	class:Window	typeref:typename:Gtk::Button
m_client	samples/send-to-network/network-logger.cpp	/^  std::unique_ptr<Client> m_client;$/;"	m	class:NetworkDispatcher	typeref:typename:std::unique_ptr<Client>	file:
m_commandLineArgs	src/easylogging++.h	/^  base::utils::CommandLineArgs m_commandLineArgs;$/;"	m	class:el::base::Storage	typeref:typename:base::utils::CommandLineArgs
m_configurationFile	src/easylogging++.h	/^  std::string m_configurationFile;$/;"	m	class:el::Configurations	typeref:typename:std::string
m_configurationType	src/easylogging++.h	/^    ConfigurationType m_configurationType;$/;"	m	class:el::Configuration::Predicate	typeref:typename:ConfigurationType
m_configurationType	src/easylogging++.h	/^  ConfigurationType m_configurationType;$/;"	m	class:el::Configuration	typeref:typename:ConfigurationType
m_configurations	src/easylogging++.h	/^  Configurations m_configurations;$/;"	m	class:el::Logger	typeref:typename:Configurations
m_configurations	src/easylogging++.h	/^  Configurations* m_configurations;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:Configurations *
m_continueRunning	src/easylogging++.h	/^  bool m_continueRunning;$/;"	m	class:el::base::AsyncDispatchWorker	typeref:typename:bool
m_continueRunningLock	src/easylogging++.h	/^  base::threading::Mutex m_continueRunningLock;$/;"	m	class:el::base::AsyncDispatchWorker	typeref:typename:base::threading::Mutex
m_currentHost	src/easylogging++.h	/^  std::string m_currentHost;$/;"	m	class:el::base::LogFormat	typeref:typename:std::string
m_currentUser	src/easylogging++.h	/^  std::string m_currentUser;$/;"	m	class:el::base::LogFormat	typeref:typename:std::string
m_customFormatSpecifiers	src/easylogging++.h	/^  std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;$/;"	m	class:el::base::Storage	typeref:typename:std::vector<CustomFormatSpecifier>
m_customFormatSpecifiersLock	src/easylogging++.h	/^  base::threading::Mutex m_customFormatSpecifiersLock;$/;"	m	class:el::base::Storage	typeref:typename:base::threading::Mutex
m_data	samples/send-to-network/network-logger.cpp	/^  const el::LogDispatchData* m_data;$/;"	m	class:NetworkDispatcher	typeref:typename:const el::LogDispatchData *	file:
m_data	src/easylogging++.h	/^  const LogDispatchData* m_data;$/;"	m	class:el::base::DefaultLogDispatchCallback	typeref:typename:const LogDispatchData *
m_dateTimeFormat	src/easylogging++.h	/^  std::string m_dateTimeFormat;$/;"	m	class:el::base::LogFormat	typeref:typename:std::string
m_defaultConfigurations	src/easylogging++.h	/^  Configurations m_defaultConfigurations;$/;"	m	class:el::base::RegisteredLoggers	typeref:typename:Configurations
m_defaultLogBuilder	src/easylogging++.h	/^  LogBuilderPtr m_defaultLogBuilder;$/;"	m	class:el::base::RegisteredLoggers	typeref:typename:LogBuilderPtr
m_dispatchAction	src/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	class:el::LogDispatchData	typeref:typename:base::DispatchAction
m_dispatchAction	src/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	class:el::base::LogDispatcher	typeref:typename:base::DispatchAction
m_dispatchData	src/easylogging++.h	/^  LogDispatchData m_dispatchData;$/;"	m	class:el::base::AsyncLogItem	typeref:typename:LogDispatchData
m_enabled	src/easylogging++.h	/^  bool m_enabled;$/;"	m	class:el::Callback	typeref:typename:bool
m_enabledMap	src/easylogging++.h	/^  std::unordered_map<Level, bool> m_enabledMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>
m_file	src/easylogging++.h	/^  std::string m_file;$/;"	m	class:el::LogMessage	typeref:typename:std::string
m_fileLocks	src/easylogging++.h	/^  std::unordered_map<std::string, std::unique_ptr<base::threading::Mutex>> m_fileLocks;$/;"	m	class:el::LogDispatchCallback	typeref:typename:std::unordered_map<std::string,std::unique_ptr<base::threading::Mutex>>
m_fileLocksMapLock	src/easylogging++.h	/^  base::threading::Mutex m_fileLocksMapLock;$/;"	m	class:el::LogDispatchCallback	typeref:typename:base::threading::Mutex
m_fileStreamMap	src/easylogging++.h	/^  std::unordered_map<Level, base::FileStreamPtr> m_fileStreamMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::FileStreamPtr>
m_filename	src/easylogging++.h	/^    const char* m_filename;$/;"	m	class:el::base::HitCounter::Predicate	typeref:typename:const char *
m_filename	src/easylogging++.h	/^  const char* m_filename;$/;"	m	class:el::base::HitCounter	typeref:typename:const char *
m_filenameMap	src/easylogging++.h	/^  std::unordered_map<Level, std::string> m_filenameMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::string>
m_flags	src/easylogging++.h	/^  base::type::EnumType m_flags;$/;"	m	class:el::base::LogFormat	typeref:typename:base::type::EnumType
m_flags	src/easylogging++.h	/^  base::type::EnumType m_flags;$/;"	m	class:el::base::Storage	typeref:typename:base::type::EnumType
m_format	src/easylogging++.h	/^  base::type::string_t m_format;$/;"	m	class:el::base::LogFormat	typeref:typename:base::type::string_t
m_formatSpecifier	src/easylogging++.h	/^  const char* m_formatSpecifier;$/;"	m	class:el::CustomFormatSpecifier	typeref:typename:const char *
m_func	src/easylogging++.h	/^  std::string m_func;$/;"	m	class:el::LogMessage	typeref:typename:std::string
m_hitCounts	src/easylogging++.h	/^  std::size_t m_hitCounts;$/;"	m	class:el::base::HitCounter	typeref:typename:std::size_t
m_id	src/easylogging++.h	/^  std::string m_id;$/;"	m	class:el::Logger	typeref:typename:std::string
m_isConfigured	src/easylogging++.h	/^  bool m_isConfigured;$/;"	m	class:el::Logger	typeref:typename:bool
m_isFromFile	src/easylogging++.h	/^  bool m_isFromFile;$/;"	m	class:el::Configurations	typeref:typename:bool
m_level	src/easylogging++.h	/^    Level m_level;$/;"	m	class:el::Configuration::Predicate	typeref:typename:Level
m_level	src/easylogging++.h	/^  Level m_level;$/;"	m	class:el::Configuration	typeref:typename:Level
m_level	src/easylogging++.h	/^  Level m_level;$/;"	m	class:el::LogMessage	typeref:typename:Level
m_level	src/easylogging++.h	/^  Level m_level;$/;"	m	class:el::base::LogFormat	typeref:typename:Level
m_level	src/easylogging++.h	/^  base::type::VerboseLevel m_level;$/;"	m	class:el::base::VRegistry	typeref:typename:base::type::VerboseLevel
m_line	src/easylogging++.h	/^  base::type::LineNumber m_line;$/;"	m	class:el::LogMessage	typeref:typename:base::type::LineNumber
m_lineNumber	src/easylogging++.h	/^    base::type::LineNumber m_lineNumber;$/;"	m	class:el::base::HitCounter::Predicate	typeref:typename:base::type::LineNumber
m_lineNumber	src/easylogging++.h	/^  base::type::LineNumber m_lineNumber;$/;"	m	class:el::base::HitCounter	typeref:typename:base::type::LineNumber
m_list	src/easylogging++.h	/^  Container m_list;$/;"	m	class:el::base::utils::AbstractRegistry	typeref:typename:Container
m_logBuilder	src/easylogging++.h	/^  LogBuilderPtr m_logBuilder;$/;"	m	class:el::Logger	typeref:typename:LogBuilderPtr
m_logDispatchCallbacks	src/easylogging++.h	/^  std::unordered_map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;$/;"	m	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,base::type::LogDispatchCallbackPtr>
m_logFlushThresholdMap	src/easylogging++.h	/^  std::unordered_map<Level, std::size_t> m_logFlushThresholdMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::size_t>
m_logFormatMap	src/easylogging++.h	/^  std::unordered_map<Level, base::LogFormat> m_logFormatMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::LogFormat>
m_logLine	src/easylogging++.h	/^  base::type::string_t m_logLine;$/;"	m	class:el::base::AsyncLogItem	typeref:typename:base::type::string_t
m_logMessage	src/easylogging++.h	/^  LogMessage m_logMessage;$/;"	m	class:el::base::AsyncLogItem	typeref:typename:LogMessage
m_logMessage	src/easylogging++.h	/^  LogMessage* m_logMessage;$/;"	m	class:el::LogDispatchData	typeref:typename:LogMessage *
m_logMessage	src/easylogging++.h	/^  LogMessage* m_logMessage;$/;"	m	class:el::base::LogDispatcher	typeref:typename:LogMessage *
m_logStreamsReference	src/easylogging++.h	/^  base::LogStreamsReferenceMap m_logStreamsReference;$/;"	m	class:el::base::RegisteredLoggers	typeref:typename:base::LogStreamsReferenceMap
m_logStreamsReference	src/easylogging++.h	/^  base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::Logger	typeref:typename:base::LogStreamsReferenceMap *
m_logStreamsReference	src/easylogging++.h	/^  base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:base::LogStreamsReferenceMap *
m_logger	src/easylogging++.h	/^  Logger* m_logger;$/;"	m	class:el::LogMessage	typeref:typename:Logger *
m_loggerRegistrationCallbacks	src/easylogging++.h	/^  std::unordered_map<std::string, base::type::LoggerRegistrationCallbackPtr> m_loggerRegistratio/;"	m	class:el::base::RegisteredLoggers	typeref:typename:std::unordered_map<std::string,base::type::LoggerRegistrationCallbackPtr>
m_loggingLevel	src/easylogging++.h	/^  Level m_loggingLevel;$/;"	m	class:el::base::Storage	typeref:typename:Level
m_maxLogFileSizeMap	src/easylogging++.h	/^  std::unordered_map<Level, std::size_t> m_maxLogFileSizeMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::size_t>
m_message	src/easylogging++.h	/^  base::type::string_t m_message;$/;"	m	class:el::LogMessage	typeref:typename:base::type::string_t
m_modules	src/easylogging++.h	/^  std::unordered_map<std::string, base::type::VerboseLevel> m_modules;$/;"	m	class:el::base::VRegistry	typeref:typename:std::unordered_map<std::string,base::type::VerboseLevel>
m_mutex	src/easylogging++.h	/^  M* m_mutex;$/;"	m	class:el::base::threading::internal::ScopedLock	typeref:typename:M *
m_mutex	src/easylogging++.h	/^  base::threading::Mutex m_mutex;$/;"	m	class:el::base::threading::ThreadSafe	typeref:typename:base::threading::Mutex
m_name	samples/STL/loggable.cpp	/^    std::string m_name;$/;"	m	class:MyClass	typeref:typename:std::string	file:
m_name	test/registry-test.h	/^    std::string m_name;$/;"	m	class:Person	typeref:typename:std::string
m_num	test/registry-test.h	/^    unsigned int m_num;$/;"	m	class:Person	typeref:typename:unsigned int
m_offset	src/easylogging++.h	/^  unsigned int m_offset;$/;"	m	class:el::base::SubsecondPrecision	typeref:typename:unsigned int
m_pFlags	src/easylogging++.h	/^  base::type::EnumType* m_pFlags;$/;"	m	class:el::base::VRegistry	typeref:typename:base::type::EnumType *
m_params	src/easylogging++.h	/^  std::vector<std::string> m_params;$/;"	m	class:el::base::utils::CommandLineArgs	typeref:typename:std::vector<std::string>
m_paramsWithValue	src/easylogging++.h	/^  std::unordered_map<std::string, std::string> m_paramsWithValue;$/;"	m	class:el::base::utils::CommandLineArgs	typeref:typename:std::unordered_map<std::string,std::string>
m_parentApplicationName	src/easylogging++.h	/^  std::string m_parentApplicationName;$/;"	m	class:el::Logger	typeref:typename:std::string
m_performanceTrackingCallbacks	src/easylogging++.h	/^  std::unordered_map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrack/;"	m	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,base::type::PerformanceTrackingCallbackPtr>
m_performanceTrackingMap	src/easylogging++.h	/^  std::unordered_map<Level, bool> m_performanceTrackingMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>
m_preRollOutCallback	src/easylogging++.h	/^  PreRollOutCallback m_preRollOutCallback;$/;"	m	class:el::base::Storage	typeref:typename:PreRollOutCallback
m_proceed	src/easylogging++.h	/^  bool m_proceed;$/;"	m	class:el::base::LogDispatcher	typeref:typename:bool
m_queue	src/easylogging++.h	/^  std::queue<AsyncLogItem> m_queue;$/;"	m	class:el::base::AsyncLogQueue	typeref:typename:std::queue<AsyncLogItem>
m_registeredHitCounters	src/easylogging++.h	/^  base::RegisteredHitCounters* m_registeredHitCounters;$/;"	m	class:el::base::Storage	typeref:typename:base::RegisteredHitCounters *
m_registeredLoggers	src/easylogging++.h	/^  base::RegisteredLoggers* m_registeredLoggers;$/;"	m	class:el::base::Storage	typeref:typename:base::RegisteredLoggers *
m_resolver	src/easylogging++.h	/^  FormatSpecifierValueResolver m_resolver;$/;"	m	class:el::CustomFormatSpecifier	typeref:typename:FormatSpecifierValueResolver
m_str	test/loggable-test.h	/^    const char* m_str;$/;"	m	class:String	typeref:typename:const char *
m_stream	src/easylogging++.h	/^  base::type::stringstream_t m_stream;$/;"	m	class:el::Logger	typeref:typename:base::type::stringstream_t
m_subsecondPrecisionMap	src/easylogging++.h	/^  std::unordered_map<Level, base::SubsecondPrecision> m_subsecondPrecisionMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::SubsecondPrecision>
m_svc	samples/send-to-network/network-logger.cpp	/^  boost::asio::io_service m_svc;$/;"	m	class:NetworkDispatcher	typeref:typename:boost::asio::io_service	file:
m_termSupportsColor	src/easylogging++.h	/^  bool m_termSupportsColor;$/;"	m	class:el::LogBuilder	typeref:typename:bool
m_terminalBox	samples/Qt/fast-dictionary/mainwindow.cc	/^    QPlainTextEdit* m_terminalBox;$/;"	m	class:LogTerminal	typeref:typename:QPlainTextEdit *	file:
m_threadNames	src/easylogging++.h	/^  std::unordered_map<std::string, std::string> m_threadNames;$/;"	m	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,std::string>
m_threadNamesLock	src/easylogging++.h	/^  base::threading::Mutex m_threadNamesLock;$/;"	m	class:el::base::Storage	typeref:typename:base::threading::Mutex
m_toFileMap	src/easylogging++.h	/^  std::unordered_map<Level, bool> m_toFileMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>
m_toStandardOutputMap	src/easylogging++.h	/^  std::unordered_map<Level, bool> m_toStandardOutputMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>
m_typedConfigurations	src/easylogging++.h	/^  base::TypedConfigurations* m_typedConfigurations;$/;"	m	class:el::Logger	typeref:typename:base::TypedConfigurations *
m_underlyingInt	samples/STL/make-loggable.cpp	/^    int m_underlyingInt;$/;"	m	class:Integer	typeref:typename:int	file:
m_underlyingInt	test/loggable-test.h	/^    int m_underlyingInt;$/;"	m	class:Integer	typeref:typename:int
m_underlyingMutex	src/easylogging++.h	/^  pthread_mutex_t m_underlyingMutex;$/;"	m	class:el::base::threading::internal::Mutex	typeref:typename:pthread_mutex_t
m_unflushedCount	src/easylogging++.h	/^  std::unordered_map<Level, unsigned int> m_unflushedCount;$/;"	m	class:el::Logger	typeref:typename:std::unordered_map<Level,unsigned int>
m_userFormat	src/easylogging++.h	/^  base::type::string_t m_userFormat;$/;"	m	class:el::base::LogFormat	typeref:typename:base::type::string_t
m_vRegistry	src/easylogging++.h	/^  base::VRegistry* m_vRegistry;$/;"	m	class:el::base::Storage	typeref:typename:base::VRegistry *
m_value	src/easylogging++.h	/^  std::string m_value;$/;"	m	class:el::Configuration	typeref:typename:std::string
m_verboseLevel	src/easylogging++.h	/^  base::type::VerboseLevel m_verboseLevel;$/;"	m	class:el::LogMessage	typeref:typename:base::type::VerboseLevel
m_width	src/easylogging++.h	/^  int m_width;$/;"	m	class:el::base::SubsecondPrecision	typeref:typename:int
main	samples/API/logbuilder.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/MinGW/prog.cpp	/^int main(int argc, const char* argv[]) {$/;"	f	typeref:typename:int
main	samples/OpenGL/Cube/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	samples/OpenGL/basic.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/Qt/basic/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	samples/Qt/fast-dictionary/main.cc	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	samples/Qt/file-splitter-joiner/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	samples/Qt/shared-lib/myapp/main.cc	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/all-logs.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/autospace.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/check-macros.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/conditional.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/configurator.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/containers.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/crash.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	samples/STL/custom-class.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/custom-crash-handler.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/custom-format-spec.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/custom-performance-output.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/default-configurations.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/default-log-file-from-arg.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/del-logger.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/different-output.cpp	/^int main() {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/flags.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/global-configuration.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/helpers.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	samples/STL/locale.cpp	/^int main(int argc, const char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/log-dispatch-callback.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/loggable.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/logger-log-functions.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/logrotate-pthread.cpp	/^int main(int, char**){$/;"	f	typeref:typename:int
main	samples/STL/logrotate.cpp	/^int main(int,char**){$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/make-loggable.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/manipulators.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/multi-loggers-to-same-file.cpp	/^int main(int,char**){$/;"	f	typeref:typename:int
main	samples/STL/multi-loggers-with-async.cpp	/^int main(int,char**){$/;"	f	typeref:typename:int
main	samples/STL/multiple-loggers.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/new-logger-registration-callback.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/no-default-log-file.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/occasional.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/plog.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/post-performance-tracking-handler.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/STL/pthread.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	samples/STL/roll-out.cpp	/^int main(int, char**) {$/;"	f	typeref:typename:int
main	samples/STL/shared-static-libs/myapp.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/smart-pointer-null-check.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/std-array.cpp	/^int main (void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/syslog.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/thread-names.cpp	/^int main(int,char**){$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/timed-block.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/timed-scope.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/verbose.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/STL/very-basic.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/VC++/VCPP2015_Win32/VCPP2015_Win32/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	samples/VC++/VCPP2015_Win32_Multithreaded/VCPP2015_Win32/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	samples/async/prog.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	samples/boost/deque.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/boost/list.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/boost/map.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/boost/set.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/boost/string.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/boost/vector.cpp	/^int main(void) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/gtkmm/hello_gtkmm/main.cc	/^int main (int argc, char** argv) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/gtkmm/sigc++.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	samples/gtkmm/ustring.cpp	/^int main(int, char**){$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/send-to-network/network-logger.cpp	/^int main() {$/;"	f	typeref:typename:int
main	samples/wxWidgets/wxlonglong.cpp	/^int main() {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/wxWidgets/wxstring.cpp	/^int main() {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	samples/wxWidgets/wxvector.cpp	/^int main() {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP int
main	test/main.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	tools/cpplint.py	/^def main():$/;"	f
make_	samples/STL/containers.cpp	/^        std::string make_;$/;"	m	class:Vehicle	typeref:typename:std::string	file:
make_	samples/STL/custom-class.cpp	/^        std::string make_;$/;"	m	class:Vehicle	typeref:typename:std::string	file:
maxLogFileSize	src/easylogging++.cc	/^std::size_t TypedConfigurations::maxLogFileSize(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:std::size_t
maxSizePerPart_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    qint32 maxSizePerPart_;$/;"	m	class:PartProcessor	typeref:typename:qint32
merge	samples/Qt/file-splitter-joiner/main.cpp	/^void merge(int argc, char** argv) {$/;"	f	typeref:typename:void
merge	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^int PartProcessor::merge(void) {$/;"	f	class:PartProcessor	typeref:typename:int
message	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QString message;$/;"	m	class:Error	typeref:typename:QString
message	src/easylogging++.h	/^  inline const base::type::string_t& message(void) const {$/;"	f	class:el::LogMessage	typeref:typename:const base::type::string_t &
metaObject	samples/Qt/fast-dictionary/moc_listwithsearch.cpp	/^const QMetaObject *ListWithSearch::metaObject() const$/;"	f	class:ListWithSearch	typeref:typename:const QMetaObject *
metaObject	samples/Qt/fast-dictionary/moc_mainwindow.cpp	/^const QMetaObject *MainWindow::metaObject() const$/;"	f	class:MainWindow	typeref:typename:const QMetaObject *
millisecondsWidth	src/easylogging++.cc	/^const base::MillisecondsWidth& TypedConfigurations::millisecondsWidth(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const base::MillisecondsWidth &
modelIndex	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^QModelIndex& PartProcessor::modelIndex(void) const {$/;"	f	class:PartProcessor	typeref:typename:QModelIndex &
modelIndex_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QModelIndex& modelIndex_;$/;"	m	class:PartProcessor	typeref:typename:QModelIndex &
model_	samples/STL/containers.cpp	/^        std::string model_;$/;"	m	class:Vehicle	typeref:typename:std::string	file:
model_	samples/STL/custom-class.cpp	/^        std::string model_;$/;"	m	class:Vehicle	typeref:typename:std::string	file:
modules	src/easylogging++.h	/^  inline const std::unordered_map<std::string, base::type::VerboseLevel>& modules(void) const {$/;"	f	class:el::base::VRegistry	typeref:typename:const std::unordered_map<std::string,base::type::VerboseLevel> &
msleep	src/easylogging++.cc	/^static void msleep(int ms) {$/;"	f	namespace:el::base::threading	typeref:typename:void	file:
mul	samples/Qt/shared-lib/mylib/mylib.cc	/^float Mylib::mul(float x, float y) const$/;"	f	class:Mylib	typeref:typename:float
mutex_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QMutex mutex_;$/;"	m	class:PartProcessor	typeref:typename:QMutex
myCrashHandler	samples/STL/custom-crash-handler.cpp	/^void myCrashHandler(int sig) {$/;"	f	typeref:typename:INITIALIZE_EASYLOGGINGPP void
n	test/registry-test.h	/^    unsigned int n;$/;"	m	class:PersonPred	typeref:typename:unsigned int
name	src/easylogging++.h	/^  const char* name;$/;"	m	struct:el::base::consts::__anone7a3f4e10408	typeref:typename:const char *
name	test/registry-test.h	/^    const std::string& name(void) const { return m_name; }$/;"	f	class:Person	typeref:typename:const std::string &
name	test/registry-test.h	/^    std::string name;$/;"	m	class:PersonPred	typeref:typename:std::string
newFileStream	src/easylogging++.cc	/^base::type::fstream_t* File::newFileStream(const std::string& filename) {$/;"	f	class:el::base::utils::File	typeref:typename:base::type::fstream_t *
next	src/easylogging++.h	/^  inline AsyncLogItem next(void) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:AsyncLogItem
num	test/registry-test.h	/^    unsigned int num(void) const { return m_num; }$/;"	f	class:Person	typeref:typename:unsigned int
numb	src/easylogging++.h	/^  int numb;$/;"	m	struct:el::base::consts::__anone7a3f4e10408	typeref:typename:int
number	samples/Qt/file-splitter-joiner/partprocessor.h	/^    int number;$/;"	m	class:Error	typeref:typename:int
onSelectionMade	samples/Qt/fast-dictionary/mainwindow.cc	/^void MainWindow::onSelectionMade(const QString &word)$/;"	f	class:MainWindow	typeref:typename:void
on_buttonAddPart_clicked	samples/Qt/file-splitter-joiner/addsplittedfiledialog.cpp	/^void AddSplittedFileDialog::on_buttonAddPart_clicked() {$/;"	f	class:AddSplittedFileDialog	typeref:typename:void
on_buttonAddParts_clicked	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^void JoinerWidget::on_buttonAddParts_clicked() {$/;"	f	class:JoinerWidget	typeref:typename:void
on_buttonBox_accepted	samples/Qt/file-splitter-joiner/addsplittedfiledialog.cpp	/^void AddSplittedFileDialog::on_buttonBox_accepted() {$/;"	f	class:AddSplittedFileDialog	typeref:typename:void
on_buttonChooseFiles_clicked	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::on_buttonChooseFiles_clicked() {$/;"	f	class:SplitterWidget	typeref:typename:void
on_buttonDown_clicked	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^void JoinerWidget::on_buttonDown_clicked() {$/;"	f	class:JoinerWidget	typeref:typename:void
on_buttonInfo_clicked	samples/Qt/fast-dictionary/mainwindow.cc	/^void MainWindow::on_buttonInfo_clicked()$/;"	f	class:MainWindow	typeref:typename:void
on_buttonRemove_clicked	samples/Qt/file-splitter-joiner/addsplittedfiledialog.cpp	/^void AddSplittedFileDialog::on_buttonRemove_clicked() {$/;"	f	class:AddSplittedFileDialog	typeref:typename:void
on_buttonRemove_clicked	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::on_buttonRemove_clicked() {$/;"	f	class:SplitterWidget	typeref:typename:void
on_buttonStartSplit_clicked	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::on_buttonStartSplit_clicked() {$/;"	f	class:SplitterWidget	typeref:typename:void
on_buttonStart_clicked	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^void JoinerWidget::on_buttonStart_clicked() {$/;"	f	class:JoinerWidget	typeref:typename:void
on_buttonUp_clicked	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^void JoinerWidget::on_buttonUp_clicked() {$/;"	f	class:JoinerWidget	typeref:typename:void
on_button_clicked	samples/gtkmm/hello_gtkmm/window.cc	/^void Window::on_button_clicked() {$/;"	f	class:Window	typeref:typename:void
on_listFiles_clicked	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::on_listFiles_clicked(const QModelIndex &index) {$/;"	f	class:SplitterWidget	typeref:typename:void
on_listFiles_doubleClicked	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::on_listFiles_doubleClicked(const QModelIndex &index) {$/;"	f	class:SplitterWidget	typeref:typename:void
on_pushButton_clicked	samples/Qt/file-splitter-joiner/about.cpp	/^void About::on_pushButton_clicked() {$/;"	f	class:About	typeref:typename:void
on_pushButton_clicked	samples/Qt/file-splitter-joiner/addsplittedfiledialog.cpp	/^void AddSplittedFileDialog::on_pushButton_clicked() {$/;"	f	class:AddSplittedFileDialog	typeref:typename:void
on_txtSearchCriteria_textChanged	samples/Qt/fast-dictionary/listwithsearch.cc	/^void ListWithSearch::on_txtSearchCriteria_textChanged(const QString&)$/;"	f	class:ListWithSearch	typeref:typename:void
openFiles	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^void PartProcessor::openFiles(void) {$/;"	f	class:PartProcessor	typeref:typename:void
operator !=	src/easylogging++.h	/^  bool operator!=(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:bool
operator ()	src/easylogging++.cc	/^bool Configuration::Predicate::operator()(const Configuration* conf) const {$/;"	f	class:el::Configuration::Predicate	typeref:typename:bool
operator ()	src/easylogging++.h	/^    inline bool operator()(const HitCounter* counter) {$/;"	f	class:el::base::HitCounter::Predicate	typeref:typename:bool
operator ()	src/easylogging++.h	/^  std::size_t operator()(const el::Level& l) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	test/registry-test.h	/^    bool operator()(const Person* p) {$/;"	f	class:PersonPred	typeref:typename:bool
operator *	samples/OpenGL/Cube/imageloader.cpp	/^            T &operator*() const {$/;"	f	class:__anonaf8e80d60110::auto_array	typeref:typename:T &	file:
operator +	samples/OpenGL/Cube/imageloader.cpp	/^            T* operator+(int i) {$/;"	f	class:__anonaf8e80d60110::auto_array	typeref:typename:T *	file:
operator ++	test/loggable-test.h	/^    inline void operator++() {$/;"	f	class:Integer	typeref:typename:void
operator --	test/loggable-test.h	/^    inline void operator--() {$/;"	f	class:Integer	typeref:typename:void
operator ->	samples/OpenGL/Cube/imageloader.cpp	/^            T* operator->() const {$/;"	f	class:__anonaf8e80d60110::auto_array	typeref:typename:T *	file:
operator <<	src/easylogging++.cc	/^MessageBuilder& MessageBuilder::operator<<(const wchar_t* msg) {$/;"	f	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &
operator <<	src/easylogging++.cc	/^base::type::ostream_t& operator<<(base::type::ostream_t& os, const CommandLineArgs& c) {$/;"	f	namespace:el::base::utils	typeref:typename:base::type::ostream_t &
operator <<	src/easylogging++.cc	/^std::ostream& operator<<(std::ostream& os, const StackTrace& st) {$/;"	f	namespace:el::base::debug	typeref:typename:std::ostream &
operator <<	src/easylogging++.cc	/^std::ostream& operator<<(std::ostream& ss, const StackTrace::StackTraceEntry& si) {$/;"	f	namespace:el::base::debug	typeref:typename:std::ostream &
operator <<	src/easylogging++.h	/^  friend base::type::ostream_t& operator<<(base::type::ostream_t& os, const RegistryWithPred& sr/;"	f	namespace:el::base::utils	typeref:typename:base::type::ostream_t &
operator <<	src/easylogging++.h	/^  friend inline el::base::type::ostream_t& operator<<(el::base::type::ostream_t& os, const Logga/;"	f	namespace:el	typeref:typename:el::base::type::ostream_t &
operator =	samples/OpenGL/Cube/imageloader.cpp	/^            void operator=(const auto_array<T> &aarray) {$/;"	f	class:__anonaf8e80d60110::auto_array	typeref:typename:void	file:
operator =	samples/STL/make-loggable.cpp	/^    Integer& operator=(const Integer& integer) { m_underlyingInt = integer.m_underlyingInt; retu/;"	f	class:Integer	typeref:typename:Integer &	file:
operator =	src/easylogging++.cc	/^Configuration& Configuration::operator=(const Configuration& c) {$/;"	f	class:el::Configuration	typeref:typename:Configuration &
operator =	src/easylogging++.cc	/^LogFormat& LogFormat::operator=(const LogFormat& logFormat) {$/;"	f	class:el::base::LogFormat	typeref:typename:LogFormat &
operator =	src/easylogging++.cc	/^Logger& Logger::operator=(const Logger& logger) {$/;"	f	class:el::Logger	typeref:typename:Logger &
operator =	src/easylogging++.h	/^  AbstractRegistry& operator=(AbstractRegistry&& sr) {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:AbstractRegistry &
operator =	src/easylogging++.h	/^  HitCounter& operator=(const HitCounter& hitCounter) {$/;"	f	class:el::base::HitCounter	typeref:typename:HitCounter &
operator =	src/easylogging++.h	/^  Registry& operator=(const Registry& sr) {$/;"	f	class:el::base::utils::Registry	typeref:typename:Registry &
operator =	src/easylogging++.h	/^  RegistryWithPred& operator=(const RegistryWithPred& sr) {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred &
operator =	test/loggable-test.h	/^    Integer& operator=(const Integer& integer) {$/;"	f	class:Integer	typeref:typename:Integer &
operator ==	src/easylogging++.cc	/^bool LogFormat::operator==(const LogFormat& other) {$/;"	f	class:el::base::LogFormat	typeref:typename:bool
operator ==	src/easylogging++.h	/^  bool operator==(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:bool
operator ==	src/easylogging++.h	/^  bool operator==(const SubsecondPrecision& ssPrec) {$/;"	f	class:el::base::SubsecondPrecision	typeref:typename:bool
operator ==	src/easylogging++.h	/^  inline bool operator==(const char* formatSpecifier) {$/;"	f	class:el::CustomFormatSpecifier	typeref:typename:bool
operator ==	test/loggable-test.h	/^    inline bool operator==(const Integer& integer) const {$/;"	f	class:Integer	typeref:typename:bool
operator []	samples/OpenGL/Cube/imageloader.cpp	/^            T &operator[](int i) {$/;"	f	class:__anonaf8e80d60110::auto_array	typeref:typename:T &	file:
originalFileSize	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^qint32 PartProcessor::originalFileSize(void) const {$/;"	f	class:PartProcessor	typeref:typename:qint32
originalFileSize_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    qint32 originalFileSize_;$/;"	m	class:PartProcessor	typeref:typename:qint32
ostream_t	src/easylogging++.h	/^typedef std::wostream ostream_t;$/;"	t	namespace:el::base::type	typeref:typename:std::wostream
otherContainerLogs	samples/STL/containers.cpp	/^void otherContainerLogs() {$/;"	f	typeref:typename:void
paint	samples/Qt/file-splitter-joiner/splitablefiledelegate.cpp	/^void SplitableFileDelegate::paint(QPainter *painter, const QStyleOptionViewItem &option, const Q/;"	f	class:SplitableFileDelegate	typeref:typename:void
parent	samples/Qt/file-splitter-joiner/splitablefiledelegate.h	/^    SplitterWidget* parent;$/;"	m	class:SplitableFileDelegate	typeref:typename:SplitterWidget *
parent	samples/Qt/file-splitter-joiner/splittercore.h	/^    SplitterWidget* parent;$/;"	m	class:SplitterCore	typeref:typename:SplitterWidget *
parent	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    QTabWidget* parent;$/;"	m	class:SplitterWidget	typeref:typename:QTabWidget *
parentApplicationName	src/easylogging++.h	/^  inline const std::string& parentApplicationName(void) const {$/;"	f	class:el::Logger	typeref:typename:const std::string &
parentView	samples/Qt/file-splitter-joiner/addsplittedfiledialog.h	/^    QTreeWidget* parentView;$/;"	m	class:AddSplittedFileDialog	typeref:typename:QTreeWidget *
parent_	samples/Qt/fast-dictionary/listwithsearch.hh	/^    QWidget* parent_;$/;"	m	class:ListWithSearch	typeref:typename:QWidget *
parseFormat	src/easylogging++.cc	/^char* DateTime::parseFormat(char* buf, std::size_t bufSz, const char* format, const struct tm* t/;"	f	class:el::base::utils::DateTime	typeref:typename:char *
parseFromFile	src/easylogging++.cc	/^bool Configurations::Parser::parseFromFile(const std::string& configurationFile, Configurations*/;"	f	class:el::Configurations::Parser	typeref:typename:bool
parseFromFile	src/easylogging++.cc	/^bool Configurations::parseFromFile(const std::string& configurationFile, Configurations* base) {$/;"	f	class:el::Configurations	typeref:typename:bool
parseFromFormat	src/easylogging++.cc	/^void LogFormat::parseFromFormat(const base::type::string_t& userFormat) {$/;"	f	class:el::base::LogFormat	typeref:typename:void
parseFromText	src/easylogging++.cc	/^bool Configurations::Parser::parseFromText(const std::string& configurationsString, Configuratio/;"	f	class:el::Configurations::Parser	typeref:typename:bool
parseFromText	src/easylogging++.cc	/^bool Configurations::parseFromText(const std::string& configurationsString, Configurations* base/;"	f	class:el::Configurations	typeref:typename:bool
parseLine	src/easylogging++.cc	/^bool Configurations::Parser::parseLine(std::string* line, std::string* currConfigStr, std::strin/;"	f	class:el::Configurations::Parser	typeref:typename:bool
partIndex	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^int PartProcessor::partIndex(void) const {$/;"	f	class:PartProcessor	typeref:typename:int
partIndex_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    int partIndex_;$/;"	m	class:PartProcessor	typeref:typename:int
parts_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QList<QString> parts_;$/;"	m	class:PartProcessor	typeref:typename:QList<QString>
path	samples/MinGW/compile.bat	/^set path=%path%;C:\\MinGW\\bin\\$/;"	v
pathExists	src/easylogging++.cc	/^bool File::pathExists(const char* path, bool considerFile) {$/;"	f	class:el::base::utils::File	typeref:typename:bool
pause	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^void PartProcessor::pause(void) {$/;"	f	class:PartProcessor	typeref:typename:void
pause	samples/Qt/file-splitter-joiner/splittercore.cpp	/^void SplitterCore::pause(void) {$/;"	f	class:SplitterCore	typeref:typename:void
pauseResume	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::pauseResume(void) const {$/;"	f	class:SplitterWidget	typeref:typename:void
pauseResumeButton	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    QPushButton* pauseResumeButton;$/;"	m	class:SplitterWidget	typeref:typename:QPushButton *
paused	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^bool PartProcessor::paused(void) const {$/;"	f	class:PartProcessor	typeref:typename:bool
paused	samples/Qt/file-splitter-joiner/splittercore.cpp	/^bool SplitterCore::paused(void) const {$/;"	f	class:SplitterCore	typeref:typename:bool
paused_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    bool paused_;$/;"	m	class:PartProcessor	typeref:typename:bool
performSearch	samples/Qt/fast-dictionary/listwithsearch.cc	/^void ListWithSearch::performSearch(void)$/;"	f	class:ListWithSearch	typeref:typename:void
performanceTracking	src/easylogging++.cc	/^bool TypedConfigurations::performanceTracking(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
performanceTrackingCallback	src/easylogging++.h	/^  inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:T *
pixels	samples/OpenGL/Cube/imageloader.h	/^        char* pixels;$/;"	m	class:Image	typeref:typename:char *
plainTextEdit	samples/Qt/fast-dictionary/ui_mainwindow.h	/^    QPlainTextEdit *plainTextEdit;$/;"	m	class:Ui_MainWindow	typeref:typename:QPlainTextEdit *
pop	src/easylogging++.h	/^  inline void pop(void) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:void
populateAllLoggerIds	src/easylogging++.cc	/^std::vector<std::string>* Loggers::populateAllLoggerIds(std::vector<std::string>* targetList) {$/;"	f	class:el::Loggers	typeref:typename:std::vector<std::string> *
preRollOutCallback	src/easylogging++.h	/^  inline PreRollOutCallback& preRollOutCallback(void) {$/;"	f	class:el::base::Storage	typeref:typename:PreRollOutCallback &
processDispatch	src/easylogging++.cc	/^void Writer::processDispatch() {$/;"	f	class:el::base::Writer	typeref:typename:void
processType	samples/Qt/file-splitter-joiner/partprocessor.h	/^    kProcessType processType;$/;"	m	class:PartProcessor	typeref:typename:kProcessType
progress	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^qint32 PartProcessor::progress(void) const {$/;"	f	class:PartProcessor	typeref:typename:qint32
progressBars	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    QList<QProgressBar*> progressBars;$/;"	m	class:SplitterWidget	typeref:typename:QList<QProgressBar * >
progress_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    qint32 progress_;$/;"	m	class:PartProcessor	typeref:typename:qint32
push	src/easylogging++.h	/^  inline void push(const AsyncLogItem& item) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:void
qt_meta_data_ListWithSearch	samples/Qt/fast-dictionary/moc_listwithsearch.cpp	/^static const uint qt_meta_data_ListWithSearch[] = {$/;"	v	typeref:typename:QT_BEGIN_MOC_NAMESPACE const uint[]	file:
qt_meta_data_MainWindow	samples/Qt/fast-dictionary/moc_mainwindow.cpp	/^static const uint qt_meta_data_MainWindow[] = {$/;"	v	typeref:typename:QT_BEGIN_MOC_NAMESPACE const uint[]	file:
qt_meta_stringdata_ListWithSearch	samples/Qt/fast-dictionary/moc_listwithsearch.cpp	/^static const char qt_meta_stringdata_ListWithSearch[] = {$/;"	v	typeref:typename:const char[]	file:
qt_meta_stringdata_MainWindow	samples/Qt/fast-dictionary/moc_mainwindow.cpp	/^static const char qt_meta_stringdata_MainWindow[] = {$/;"	v	typeref:typename:const char[]	file:
qt_metacall	samples/Qt/fast-dictionary/moc_listwithsearch.cpp	/^int ListWithSearch::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ListWithSearch	typeref:typename:int
qt_metacall	samples/Qt/fast-dictionary/moc_mainwindow.cpp	/^int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MainWindow	typeref:typename:int
qt_metacast	samples/Qt/fast-dictionary/moc_listwithsearch.cpp	/^void *ListWithSearch::qt_metacast(const char *_clname)$/;"	f	class:ListWithSearch	typeref:typename:void *
qt_metacast	samples/Qt/fast-dictionary/moc_mainwindow.cpp	/^void *MainWindow::qt_metacast(const char *_clname)$/;"	f	class:MainWindow	typeref:typename:void *
readInt	samples/OpenGL/Cube/imageloader.cpp	/^    int readInt(ifstream &input) {$/;"	f	namespace:__anonaf8e80d60110	typeref:typename:int
readShort	samples/OpenGL/Cube/imageloader.cpp	/^    short readShort(ifstream &input) {$/;"	f	namespace:__anonaf8e80d60110	typeref:typename:short
received	samples/gtkmm/sigc++.cpp	/^    sigc::signal<void> received;$/;"	m	class:AsyncConnector	typeref:typename:sigc::signal<void>	file:
reconfigure	src/easylogging++.cc	/^void Logger::reconfigure(void) {$/;"	f	class:el::Logger	typeref:typename:void
reconfigureAllLoggers	src/easylogging++.cc	/^void Loggers::reconfigureAllLoggers(Level level, ConfigurationType configurationType,$/;"	f	class:el::Loggers	typeref:typename:void
reconfigureAllLoggers	src/easylogging++.cc	/^void Loggers::reconfigureAllLoggers(const Configurations& configurations) {$/;"	f	class:el::Loggers	typeref:typename:void
reconfigureLogger	src/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(Logger* logger, const Configurations& configurations) {$/;"	f	class:el::Loggers	typeref:typename:Logger *
reconfigureLogger	src/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(const std::string& identity, ConfigurationType configurationT/;"	f	class:el::Loggers	typeref:typename:Logger *
reconfigureLogger	src/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(const std::string& identity, const Configurations& configurat/;"	f	class:el::Loggers	typeref:typename:Logger *
reconfigureLoggersForTest	test/test.h	/^static void reconfigureLoggersForTest(void) {$/;"	f	typeref:typename:void
regNew	test/registry-test.h	/^    void regNew(Person* person) {$/;"	f	class:PeopleWithPred	typeref:typename:void
regNew	test/registry-test.h	/^    void regNew(const char* name, Person* person) {$/;"	f	class:People	typeref:typename:void
registerNew	src/easylogging++.h	/^  virtual inline void registerNew(T_Ptr* ptr) ELPP_FINAL {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:void
registerNew	src/easylogging++.h	/^  virtual void registerNew(const T_Key& uniqKey, T_Ptr* ptr) ELPP_FINAL {$/;"	f	class:el::base::utils::Registry	typeref:typename:void
registeredLoggers	src/easylogging++.h	/^  inline base::RegisteredLoggers* registeredLoggers(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::RegisteredLoggers *
reinitDeepCopy	src/easylogging++.h	/^  void reinitDeepCopy(const AbstractRegistry<T_Ptr, Container>& sr) {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:void
release	samples/OpenGL/Cube/imageloader.cpp	/^            T* release() {$/;"	f	class:__anonaf8e80d60110::auto_array	typeref:typename:T *	file:
releaseDate	src/easylogging++.cc	/^const std::string VersionInfo::releaseDate(void) {$/;"	f	class:el::VersionInfo	typeref:typename:const std::string
releaseLock	src/easylogging++.h	/^  virtual inline void releaseLock(void) ELPP_FINAL { m_mutex.unlock(); }$/;"	f	class:el::base::threading::ThreadSafe	typeref:typename:void
remove	src/easylogging++.cc	/^bool RegisteredLoggers::remove(const std::string& id) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:bool
removeFile	test/test.h	/^static void removeFile(const char* path) {$/;"	f	typeref:typename:void
removeFlag	src/easylogging++.h	/^  inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::base::Storage	typeref:typename:void
removeFlag	src/easylogging++.h	/^static inline void removeFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::base::utils	typeref:typename:void
replaceAll	src/easylogging++.cc	/^std::string& Str::replaceAll(std::string& str, char replaceWhat, char replaceWith) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
replaceAll	src/easylogging++.cc	/^std::string& Str::replaceAll(std::string& str, const std::string& replaceWhat,$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
replaceFirstWithEscape	src/easylogging++.cc	/^void Str::replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& replaceW/;"	f	class:el::base::utils::Str	typeref:typename:void
require_cpp11	CMakeLists.txt	/^macro(require_cpp11)$/;"	m
reset	samples/OpenGL/Cube/imageloader.cpp	/^            void reset(T* array_ = NULL) {$/;"	f	class:__anonaf8e80d60110::auto_array	typeref:typename:void	file:
resetLocation	src/easylogging++.h	/^  inline void resetLocation(const char* filename, base::type::LineNumber lineNumber) {$/;"	f	class:el::base::HitCounter	typeref:typename:void
resizeEvent	samples/Qt/fast-dictionary/listwithsearch.cc	/^void ListWithSearch::resizeEvent(QResizeEvent*)$/;"	f	class:ListWithSearch	typeref:typename:void
resizeEvent	samples/Qt/fast-dictionary/mainwindow.cc	/^void MainWindow::resizeEvent(QResizeEvent *)$/;"	f	class:MainWindow	typeref:typename:void
resolveFilename	src/easylogging++.cc	/^std::string TypedConfigurations::resolveFilename(const std::string& filename) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:std::string
resolveLoggerFormatSpec	src/easylogging++.cc	/^void Logger::resolveLoggerFormatSpec(void) const {$/;"	f	class:el::Logger	typeref:typename:void
resolver	src/easylogging++.h	/^  inline const FormatSpecifierValueResolver& resolver(void) const {$/;"	f	class:el::CustomFormatSpecifier	typeref:typename:const FormatSpecifierValueResolver &
resume	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^void PartProcessor::resume() {$/;"	f	class:PartProcessor	typeref:typename:void
resume	samples/Qt/file-splitter-joiner/splittercore.cpp	/^void SplitterCore::resume(void) {$/;"	f	class:SplitterCore	typeref:typename:void
retranslateUi	samples/Qt/fast-dictionary/ui_mainwindow.h	/^    void retranslateUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	typeref:typename:void
rolloutHandler	samples/STL/roll-out.cpp	/^void rolloutHandler(const char* filename, std::size_t size) {$/;"	f	typeref:typename:void
rtrim	src/easylogging++.cc	/^std::string& Str::rtrim(std::string& str) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
run	samples/Qt/basic/mythread.h	/^    void run() {$/;"	f	class:MyThread	typeref:typename:void
run	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^void PartProcessor::run(void) {$/;"	f	class:PartProcessor	typeref:typename:void
run	samples/Qt/file-splitter-joiner/splittercore.cpp	/^void SplitterCore::run(void) {$/;"	f	class:SplitterCore	typeref:typename:void
run	src/easylogging++.cc	/^void AsyncDispatchWorker::run(void) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
s	test/write-all-test.h	/^    std::string s;$/;"	v	typeref:typename:std::string
sSeverityMap	samples/STL/custom-format-spec.cpp	/^static std::map<ELogLevel, std::string> sSeverityMap {$/;"	v	typeref:typename:std::map<ELogLevel,std::string>	file:
s_currentHost	test/syslog-test.h	/^static const char* s_currentHost = el::base::utils::OS::currentHost().c_str();$/;"	v	typeref:typename:const char *
safeDelete	src/easylogging++.h	/^safeDelete(T*& pointer) {$/;"	f	namespace:el::base::utils	typeref:typename:std::enable_if<std::is_pointer<T * >::value,void>::type
searchBehaviour_	samples/Qt/fast-dictionary/listwithsearch.hh	/^    int searchBehaviour_;$/;"	m	class:ListWithSearch	typeref:typename:int
second	samples/STL/multi-loggers-to-same-file.cpp	/^void second() {$/;"	f	typeref:typename:void
seekLocation_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    qint32 seekLocation_;$/;"	m	class:PartProcessor	typeref:typename:qint32
selected	samples/Qt/fast-dictionary/listwithsearch.cc	/^void ListWithSearch::selected(void)$/;"	f	class:ListWithSearch	typeref:typename:void
selectionMade	samples/Qt/fast-dictionary/moc_listwithsearch.cpp	/^void ListWithSearch::selectionMade(const QString & _t1)$/;"	f	class:ListWithSearch	typeref:typename:void
send	samples/send-to-network/network-logger.cpp	/^    void send(std::string const& message) {$/;"	f	class:Client	typeref:typename:void	file:
sendNow	samples/gtkmm/sigc++.cpp	/^    void sendNow(void) { LOG(INFO) << "Sending data..."; sleep(2); sent.emit(); }$/;"	f	class:AsyncConnector	typeref:typename:void	file:
sent	samples/gtkmm/sigc++.cpp	/^    sigc::signal<void> sent;$/;"	m	class:AsyncConnector	typeref:typename:sigc::signal<void>	file:
set	src/easylogging++.cc	/^void Configurations::set(Configuration* conf) {$/;"	f	class:el::Configurations	typeref:typename:void
set	src/easylogging++.cc	/^void Configurations::set(Level level, ConfigurationType configurationType, const std::string& va/;"	f	class:el::Configurations	typeref:typename:void
setApplicationArguments	src/easylogging++.cc	/^void Storage::setApplicationArguments(int argc, char** argv) {$/;"	f	class:el::base::Storage	typeref:typename:void
setApplicationArguments	src/easylogging++.h	/^  inline void setApplicationArguments(int argc, const char** argv) {$/;"	f	class:el::base::Storage	typeref:typename:void
setArgs	src/easylogging++.cc	/^void CommandLineArgs::setArgs(int argc, char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:void
setArgs	src/easylogging++.h	/^  inline void setArgs(int argc, const char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:void
setContinueRunning	src/easylogging++.h	/^  void setContinueRunning(bool value) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
setDefaultConfigurations	src/easylogging++.cc	/^void Loggers::setDefaultConfigurations(const Configurations& configurations, bool reconfigureExi/;"	f	class:el::Loggers	typeref:typename:void
setDefaultConfigurations	src/easylogging++.h	/^  inline void setDefaultConfigurations(const Configurations& configurations) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
setDefaultLogBuilder	src/easylogging++.cc	/^void Loggers::setDefaultLogBuilder(el::LogBuilderPtr& logBuilderPtr) {$/;"	f	class:el::Loggers	typeref:typename:void
setDefaultLogBuilder	src/easylogging++.h	/^  inline void setDefaultLogBuilder(LogBuilderPtr& logBuilderPtr) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
setDispatchAction	src/easylogging++.h	/^  inline void setDispatchAction(base::DispatchAction dispatchAction) {$/;"	f	class:el::LogDispatchData	typeref:typename:void
setEditorData	samples/Qt/file-splitter-joiner/splitablefiledelegate.cpp	/^void SplitableFileDelegate::setEditorData(QWidget *editor,$/;"	f	class:SplitableFileDelegate	typeref:typename:void
setEnabled	src/easylogging++.h	/^  inline void setEnabled(bool enabled) {$/;"	f	class:el::Callback	typeref:typename:void
setFlags	src/easylogging++.h	/^  inline void setFlags(base::type::EnumType flags) {$/;"	f	class:el::base::Storage	typeref:typename:void
setFocus	samples/Qt/fast-dictionary/listwithsearch.cc	/^void ListWithSearch::setFocus()$/;"	f	class:ListWithSearch	typeref:typename:void
setFromArgs	src/easylogging++.cc	/^void VRegistry::setFromArgs(const base::utils::CommandLineArgs* commandLineArgs) {$/;"	f	class:el::base::VRegistry	typeref:typename:void
setFromBase	src/easylogging++.cc	/^void Configurations::setFromBase(Configurations* base) {$/;"	f	class:el::Configurations	typeref:typename:void
setGlobally	src/easylogging++.cc	/^void Configurations::setGlobally(ConfigurationType configurationType, const std::string& value,$/;"	f	class:el::Configurations	typeref:typename:void
setGlobally	src/easylogging++.h	/^  inline void setGlobally(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Configurations	typeref:typename:void
setHandler	src/easylogging++.cc	/^void CrashHandler::setHandler(const Handler& cHandler) {$/;"	f	class:el::base::debug::CrashHandler	typeref:typename:void
setLevel	src/easylogging++.cc	/^void VRegistry::setLevel(base::type::VerboseLevel level) {$/;"	f	class:el::base::VRegistry	typeref:typename:void
setLogBuilder	src/easylogging++.h	/^  inline void setLogBuilder(const LogBuilderPtr& logBuilder) {$/;"	f	class:el::Logger	typeref:typename:void
setLogMessage	src/easylogging++.h	/^  inline void setLogMessage(LogMessage* logMessage) {$/;"	f	class:el::LogDispatchData	typeref:typename:void
setLoggingLevel	src/easylogging++.h	/^  inline void setLoggingLevel(Level level) {$/;"	f	class:el::base::Storage	typeref:typename:void
setModelData	samples/Qt/file-splitter-joiner/splitablefiledelegate.cpp	/^void SplitableFileDelegate::setModelData(QWidget *editor, QAbstractItemModel *model,$/;"	f	class:SplitableFileDelegate	typeref:typename:void
setModules	src/easylogging++.cc	/^void VRegistry::setModules(const char* modules) {$/;"	f	class:el::base::VRegistry	typeref:typename:void
setParentApplicationName	src/easylogging++.h	/^  inline void setParentApplicationName(const std::string& parentApplicationName) {$/;"	f	class:el::Logger	typeref:typename:void
setPreRollOutCallback	src/easylogging++.h	/^  inline void setPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::base::Storage	typeref:typename:void
setRemainingToDefault	src/easylogging++.cc	/^void Configurations::setRemainingToDefault(void) {$/;"	f	class:el::Configurations	typeref:typename:void
setTerminalBox	samples/Qt/fast-dictionary/mainwindow.cc	/^    void setTerminalBox(QPlainTextEdit* t)$/;"	f	class:LogTerminal	typeref:typename:void	file:
setThreadName	src/easylogging++.h	/^  inline void setThreadName(const std::string& name) {$/;"	f	class:el::base::Storage	typeref:typename:void
setToDefault	src/easylogging++.cc	/^void Configurations::setToDefault(void) {$/;"	f	class:el::Configurations	typeref:typename:void
setVModules	src/easylogging++.cc	/^void Loggers::setVModules(const char* modules) {$/;"	f	class:el::Loggers	typeref:typename:void
setValue	src/easylogging++.h	/^  inline void setValue(const std::string& value) {$/;"	f	class:el::Configuration	typeref:typename:void
setValue	src/easylogging++.h	/^  void setValue(Level level, const Conf_T& value, std::unordered_map<Level, Conf_T>* confMap,$/;"	f	class:el::base::TypedConfigurations	typeref:typename:void
setVerboseLevel	src/easylogging++.cc	/^void Loggers::setVerboseLevel(base::type::VerboseLevel level) {$/;"	f	class:el::Loggers	typeref:typename:void
setup	samples/Qt/fast-dictionary/listwithsearch.cc	/^void ListWithSearch::setup(QWidget *parent)$/;"	f	class:ListWithSearch	typeref:typename:void
setupUi	samples/Qt/fast-dictionary/ui_mainwindow.h	/^    void setupUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	typeref:typename:void
setupUi	samples/Qt/file-splitter-joiner/mainwindow.cpp	/^void MainWindow::setupUi(void) {$/;"	f	class:MainWindow	typeref:typename:void
size	src/easylogging++.cc	/^std::size_t CommandLineArgs::size(void) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:std::size_t
size	src/easylogging++.h	/^  virtual inline std::size_t size(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:std::size_t
socket	samples/send-to-network/network-logger.cpp	/^    boost::asio::ip::tcp::socket socket;$/;"	m	class:Client	typeref:typename:boost::asio::ip::tcp::socket	file:
sourceFile_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QFile *sourceFile_;$/;"	m	class:PartProcessor	typeref:typename:QFile *
sourceFilename_	samples/Qt/file-splitter-joiner/partprocessor.h	/^    QString sourceFilename_;$/;"	m	class:PartProcessor	typeref:typename:QString
split	samples/Qt/file-splitter-joiner/main.cpp	/^void split(int argc, char** argv) {$/;"	f	typeref:typename:void
split	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^int PartProcessor::split(void) {$/;"	f	class:PartProcessor	typeref:typename:int
splitDelegate	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    SplitableFileDelegate* splitDelegate;$/;"	m	class:SplitterWidget	typeref:typename:SplitableFileDelegate *
splitJoinCores	samples/Qt/file-splitter-joiner/splittercore.h	/^    QList<PartProcessor*> splitJoinCores;$/;"	m	class:SplitterCore	typeref:typename:QList<PartProcessor * >
splitter	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    SplitterCore* splitter;$/;"	m	class:SplitterWidget	typeref:typename:SplitterCore *
splitterWidget	samples/Qt/file-splitter-joiner/mainwindow.h	/^    SplitterWidget* splitterWidget;$/;"	m	class:MainWindow	typeref:typename:SplitterWidget *
start	src/easylogging++.cc	/^void AsyncDispatchWorker::start(void) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
startJoining	samples/Qt/file-splitter-joiner/joinercore.cpp	/^void JoinerCore::startJoining(void) {$/;"	f	class:JoinerCore	typeref:typename:void
startSplitting	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::startSplitting(void) {$/;"	f	class:SplitterWidget	typeref:typename:void
started	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^void JoinerWidget::started(PartProcessor* startedFile) {$/;"	f	class:JoinerWidget	typeref:typename:void
started	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::started(PartProcessor* startedPart) {$/;"	f	class:SplitterWidget	typeref:typename:void
startsWith	src/easylogging++.cc	/^bool Str::startsWith(const std::string& str, const std::string& start) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
staticMetaObject	samples/Qt/fast-dictionary/moc_listwithsearch.cpp	/^const QMetaObject ListWithSearch::staticMetaObject = {$/;"	m	class:ListWithSearch	typeref:typename:const QMetaObject
staticMetaObject	samples/Qt/fast-dictionary/moc_mainwindow.cpp	/^const QMetaObject MainWindow::staticMetaObject = {$/;"	m	class:MainWindow	typeref:typename:const QMetaObject
std	src/easylogging++.h	/^namespace std {$/;"	n
str	samples/STL/crash.cpp	/^    std::string* str;$/;"	m	class:Crasher	typeref:typename:std::string *	file:
stream	src/easylogging++.h	/^  inline base::type::stringstream_t& stream(void) {$/;"	f	class:el::Logger	typeref:typename:base::type::stringstream_t &
stringToLevelMap	src/easylogging++.cc	/^static struct StringToLevelItem stringToLevelMap[] = {$/;"	v	namespace:el	typeref:struct:StringToLevelItem[]	file:
string_t	src/easylogging++.h	/^typedef std::wstring string_t;$/;"	t	namespace:el::base::type	typeref:typename:std::wstring
stringstream_t	src/easylogging++.h	/^typedef std::wstringstream stringstream_t;$/;"	t	namespace:el::base::type	typeref:typename:std::wstringstream
sub	samples/Qt/shared-lib/mylib/mylib.cc	/^float Mylib::sub(float x, float y) const$/;"	f	class:Mylib	typeref:typename:float
subsecondPrecision	src/easylogging++.cc	/^const base::SubsecondPrecision& TypedConfigurations::subsecondPrecision(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const base::SubsecondPrecision &
sum	samples/async/mymath.h	/^    static int sum(int a, int b) {$/;"	f	class:MyMath	typeref:typename:int
tabWidget	samples/Qt/file-splitter-joiner/mainwindow.h	/^    QTabWidget* tabWidget;$/;"	m	class:MainWindow	typeref:typename:QTabWidget *
tail	test/test.h	/^static std::string tail(unsigned int n, const char* filename = logfile) {$/;"	f	typeref:typename:std::string
termSupportsColor	src/easylogging++.cc	/^bool OS::termSupportsColor(void) {$/;"	f	class:el::base::utils::OS	typeref:typename:bool
test	CMakeLists.txt	/^option(test "Build all tests" OFF)$/;"	D
thrId	samples/STL/pthread.cpp	/^  const char* thrId;$/;"	m	struct:Args	typeref:typename:const char *	file:
threadId	samples/Qt/basic/mythread.h	/^    int threadId;$/;"	m	class:MyThread	typeref:typename:int
threading	src/easylogging++.cc	/^namespace threading {$/;"	n	namespace:el::base	file:
threading	src/easylogging++.h	/^namespace threading {$/;"	n	namespace:el::base
threading_list	tools/cpplint.py	/^threading_list = ($/;"	v
timevalToString	src/easylogging++.cc	/^std::string DateTime::timevalToString(struct timeval tval, const char* format,$/;"	f	class:el::base::utils::DateTime	typeref:typename:std::string
toFile	src/easylogging++.cc	/^bool TypedConfigurations::toFile(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
toInt	samples/OpenGL/Cube/imageloader.cpp	/^    int toInt(const char* bytes) {$/;"	f	namespace:__anonaf8e80d60110	typeref:typename:int
toShort	samples/OpenGL/Cube/imageloader.cpp	/^    short toShort(const char* bytes) {$/;"	f	namespace:__anonaf8e80d60110	typeref:typename:short
toStandardOutput	src/easylogging++.cc	/^bool TypedConfigurations::toStandardOutput(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
toString	samples/STL/containers.cpp	/^        std::string toString(void) const {$/;"	f	class:Vehicle	typeref:typename:std::string	file:
toUpper	src/easylogging++.cc	/^std::string& Str::toUpper(std::string& str) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
triggerDispatch	src/easylogging++.cc	/^void Writer::triggerDispatch(void) {$/;"	f	class:el::base::Writer	typeref:typename:void
trim	src/easylogging++.cc	/^std::string& Str::trim(std::string& str) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
try_lock	src/easylogging++.h	/^  inline bool try_lock(void) {$/;"	f	class:el::base::threading::internal::Mutex	typeref:typename:bool
txtSearchCriteria	samples/Qt/fast-dictionary/listwithsearch.hh	/^    QLineEdit* txtSearchCriteria;$/;"	m	class:ListWithSearch	typeref:typename:QLineEdit *
type	src/easylogging++.h	/^namespace type {$/;"	n	namespace:el::base
typedConfigurations	src/easylogging++.h	/^  inline base::TypedConfigurations* typedConfigurations(void) {$/;"	f	class:el::Logger	typeref:typename:base::TypedConfigurations *
ui	samples/Qt/fast-dictionary/mainwindow.hh	/^    Ui::MainWindow* ui;$/;"	m	class:MainWindow	typeref:typename:Ui::MainWindow *
ui	samples/Qt/file-splitter-joiner/about.h	/^    Ui::About *ui;$/;"	m	class:About	typeref:typename:Ui::About *
ui	samples/Qt/file-splitter-joiner/addsplittedfiledialog.h	/^    Ui::AddSplittedFileDialog *ui;$/;"	m	class:AddSplittedFileDialog	typeref:typename:Ui::AddSplittedFileDialog *
ui	samples/Qt/file-splitter-joiner/joinerwidget.h	/^    Ui::JoinerWidget *ui;$/;"	m	class:JoinerWidget	typeref:typename:Ui::JoinerWidget *
ui	samples/Qt/file-splitter-joiner/splitterwidget.h	/^    Ui::SplitterWidget *ui;$/;"	m	class:SplitterWidget	typeref:typename:Ui::SplitterWidget *
uninstallCallback	src/easylogging++.h	/^  static void uninstallCallback(const std::string& id, std::unordered_map<std::string, TPtr>* ma/;"	f	class:el::base::utils::Utils	typeref:typename:void
uninstallCustomFormatSpecifier	src/easylogging++.cc	/^bool Storage::uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::base::Storage	typeref:typename:bool
uninstallLogDispatchCallback	src/easylogging++.h	/^  inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:void
uninstallLoggerRegistrationCallback	src/easylogging++.h	/^  inline void uninstallLoggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
uninstallPerformanceTrackingCallback	src/easylogging++.h	/^  inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:void
unit	src/easylogging++.h	/^  const base::type::char_t* unit;$/;"	m	struct:el::base::consts::__anone7a3f4e10308	typeref:typename:const base::type::char_t *
unlock	src/easylogging++.h	/^  inline void unlock(void) {$/;"	f	class:el::base::threading::internal::Mutex	typeref:typename:void
unregister	src/easylogging++.h	/^  inline void unregister(Logger*& logger) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
unregister	src/easylogging++.h	/^  virtual void unregister(T_Ptr*& ptr) ELPP_FINAL {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:void
unregister	src/easylogging++.h	/^  void unregister(const T_Key& uniqKey) {$/;"	f	class:el::base::utils::Registry	typeref:typename:void
unregisterAll	src/easylogging++.h	/^  virtual void unregisterAll(void) ELPP_FINAL {$/;"	f	class:el::base::utils::Registry	typeref:typename:void
unregisterAll	src/easylogging++.h	/^  virtual void unregisterAll(void) ELPP_FINAL {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:void
unregisterLogger	src/easylogging++.cc	/^bool Loggers::unregisterLogger(const std::string& identity) {$/;"	f	class:el::Loggers	typeref:typename:bool
unsafeFlushAll	src/easylogging++.cc	/^void RegisteredLoggers::unsafeFlushAll(void) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
unsafeGetConfigByRef	src/easylogging++.h	/^  Conf_T& unsafeGetConfigByRef(Level level, std::unordered_map<Level, Conf_T>* confMap, const ch/;"	f	class:el::base::TypedConfigurations	typeref:typename:Conf_T &
unsafeGetConfigByVal	src/easylogging++.h	/^  Conf_T unsafeGetConfigByVal(Level level, const std::unordered_map<Level, Conf_T>* confMap, con/;"	f	class:el::base::TypedConfigurations	typeref:typename:Conf_T
unsafeSet	src/easylogging++.cc	/^void Configurations::unsafeSet(Level level, ConfigurationType configurationType, const std::stri/;"	f	class:el::Configurations	typeref:typename:void
unsafeSetGlobally	src/easylogging++.cc	/^void Configurations::unsafeSetGlobally(ConfigurationType configurationType, const std::string& v/;"	f	class:el::Configurations	typeref:typename:void
unsafeSetIfNotExist	src/easylogging++.cc	/^void Configurations::unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const/;"	f	class:el::Configurations	typeref:typename:void
unsafeValidateFileRolling	src/easylogging++.cc	/^bool TypedConfigurations::unsafeValidateFileRolling(Level level, const PreRollOutCallback& preRo/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
unsetPreRollOutCallback	src/easylogging++.h	/^  inline void unsetPreRollOutCallback(void) {$/;"	f	class:el::base::Storage	typeref:typename:void
update	samples/OpenGL/Cube/main.cpp	/^void update(int value) {$/;"	f	typeref:typename:void
updateDateFormat	src/easylogging++.cc	/^void LogFormat::updateDateFormat(std::size_t index, base::type::string_t& currFormat) {$/;"	f	class:el::base::LogFormat	typeref:typename:void
updateEditorGeometry	samples/Qt/file-splitter-joiner/splitablefiledelegate.cpp	/^void SplitableFileDelegate::updateEditorGeometry(QWidget *editor,$/;"	f	class:SplitableFileDelegate	typeref:typename:void
updateFormatSpec	src/easylogging++.cc	/^void LogFormat::updateFormatSpec(void) {$/;"	f	class:el::base::LogFormat	typeref:typename:void
updateRemoveButtonUI	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::updateRemoveButtonUI(void) const {$/;"	f	class:SplitterWidget	typeref:typename:void
updateServer	samples/send-to-network/network-logger.cpp	/^    void updateServer(const std::string& host, int port) {$/;"	f	class:NetworkDispatcher	typeref:typename:void	file:
updateSplitInfo	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::updateSplitInfo(const QModelIndex &index) {$/;"	f	class:SplitterWidget	typeref:typename:void
updated	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^void JoinerWidget::updated(PartProcessor* updatedFile) {$/;"	f	class:JoinerWidget	typeref:typename:void
updated	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^void SplitterWidget::updated(PartProcessor* updatedPart) {$/;"	f	class:SplitterWidget	typeref:typename:void
userFormat	src/easylogging++.h	/^  inline const base::type::string_t& userFormat(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:const base::type::string_t &
utils	src/easylogging++.cc	/^namespace utils {$/;"	n	namespace:el::base	file:
utils	src/easylogging++.h	/^namespace utils {$/;"	n	namespace:el::base
vModulesEnabled	src/easylogging++.h	/^  inline bool vModulesEnabled(void) {$/;"	f	class:el::base::VRegistry	typeref:typename:bool
vRegistry	src/easylogging++.h	/^  inline base::VRegistry* vRegistry(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::VRegistry *
validateAfterN	src/easylogging++.cc	/^bool RegisteredHitCounters::validateAfterN(const char* filename, base::type::LineNumber lineNumb/;"	f	class:el::base::RegisteredHitCounters	typeref:typename:bool
validateAfterNCounter	src/easylogging++.h	/^  inline bool validateAfterNCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	class:el::base::Storage	typeref:typename:bool
validateEveryN	src/easylogging++.cc	/^bool RegisteredHitCounters::validateEveryN(const char* filename, base::type::LineNumber lineNumb/;"	f	class:el::base::RegisteredHitCounters	typeref:typename:bool
validateEveryNCounter	src/easylogging++.h	/^  inline bool validateEveryNCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	class:el::base::Storage	typeref:typename:bool
validateFileRolling	src/easylogging++.h	/^  inline bool validateFileRolling(Level level, const PreRollOutCallback& preRollOutCallback) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
validateHitCounts	src/easylogging++.h	/^  inline void validateHitCounts(std::size_t n) {$/;"	f	class:el::base::HitCounter	typeref:typename:void
validateNTimes	src/easylogging++.cc	/^bool RegisteredHitCounters::validateNTimes(const char* filename, base::type::LineNumber lineNumb/;"	f	class:el::base::RegisteredHitCounters	typeref:typename:bool
validateNTimesCounter	src/easylogging++.h	/^  inline bool validateNTimesCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	class:el::base::Storage	typeref:typename:bool
value	src/easylogging++.h	/^  double value;$/;"	m	struct:el::base::consts::__anone7a3f4e10308	typeref:typename:double
value	src/easylogging++.h	/^  inline const std::string& value(void) const {$/;"	f	class:el::Configuration	typeref:typename:const std::string &
vectorLogs	samples/STL/containers.cpp	/^void vectorLogs() {$/;"	f	typeref:typename:void
verboseLevel	src/easylogging++.cc	/^base::type::VerboseLevel Loggers::verboseLevel(void) {$/;"	f	class:el::Loggers	typeref:typename:base::type::VerboseLevel
verboseLevel	src/easylogging++.h	/^  inline base::type::VerboseLevel verboseLevel(void) const {$/;"	f	class:el::LogMessage	typeref:typename:base::type::VerboseLevel
version	src/easylogging++.cc	/^const std::string VersionInfo::version(void) {$/;"	f	class:el::VersionInfo	typeref:typename:const std::string
version_	samples/STL/containers.cpp	/^        std::string version_;$/;"	m	class:Vehicle	typeref:typename:std::string	file:
version_	samples/STL/custom-class.cpp	/^        std::string version_;$/;"	m	class:Vehicle	typeref:typename:std::string	file:
watcher	samples/Qt/fast-dictionary/listwithsearch.hh	/^    QFutureWatcher<void> watcher;$/;"	m	class:ListWithSearch	typeref:typename:QFutureWatcher<void>
wcharPtrToCharPtr	src/easylogging++.cc	/^char* Str::wcharPtrToCharPtr(const wchar_t* line) {$/;"	f	class:el::base::utils::Str	typeref:typename:char *
widget	samples/Qt/file-splitter-joiner/joinercore.h	/^    QTreeWidget* widget;$/;"	m	class:JoinerCore	typeref:typename:QTreeWidget *
width	samples/OpenGL/Cube/imageloader.h	/^        int width;$/;"	m	class:Image	typeref:typename:int
wildCardMatch	src/easylogging++.cc	/^bool Str::wildCardMatch(const char* str, const char* pattern) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
wordLabel	samples/Qt/fast-dictionary/ui_mainwindow.h	/^    QLabel *wordLabel;$/;"	m	class:Ui_MainWindow	typeref:typename:QLabel *
workarounds	src/easylogging++.h	/^namespace workarounds {$/;"	n	namespace:el::base
write	samples/STL/pthread.cpp	/^void *write(void* thrId){$/;"	f	typeref:typename:void *
write2	samples/STL/pthread.cpp	/^void* write2(void* args){$/;"	f	typeref:typename:void *
wxWidgets Logging	README.md	/^### wxWidgets Logging$/;"	S
year_	samples/STL/containers.cpp	/^        int year_;$/;"	m	class:Vehicle	typeref:typename:int	file:
year_	samples/STL/custom-class.cpp	/^        int year_;$/;"	m	class:Vehicle	typeref:typename:int	file:
~About	samples/Qt/file-splitter-joiner/about.cpp	/^About::~About() {$/;"	f	class:About
~AbstractRegistry	src/easylogging++.h	/^  virtual ~AbstractRegistry(void) {$/;"	f	class:el::base::utils::AbstractRegistry
~AddSplittedFileDialog	samples/Qt/file-splitter-joiner/addsplittedfiledialog.cpp	/^AddSplittedFileDialog::~AddSplittedFileDialog() {$/;"	f	class:AddSplittedFileDialog
~AsyncDispatchWorker	src/easylogging++.cc	/^AsyncDispatchWorker::~AsyncDispatchWorker() {$/;"	f	class:el::base::AsyncDispatchWorker
~AsyncLogItem	src/easylogging++.h	/^  virtual ~AsyncLogItem() {}$/;"	f	class:el::base::AsyncLogItem
~AsyncLogQueue	src/easylogging++.h	/^  virtual ~AsyncLogQueue() {$/;"	f	class:el::base::AsyncLogQueue
~CommandLineArgs	src/easylogging++.h	/^  virtual ~CommandLineArgs(void) {}$/;"	f	class:el::base::utils::CommandLineArgs
~Configuration	src/easylogging++.h	/^  virtual ~Configuration(void) {$/;"	f	class:el::Configuration
~Configurations	src/easylogging++.h	/^  virtual ~Configurations(void) {$/;"	f	class:el::Configurations
~HitCounter	src/easylogging++.h	/^  virtual ~HitCounter(void) {$/;"	f	class:el::base::HitCounter
~IWorker	src/easylogging++.h	/^  virtual ~IWorker() {}$/;"	f	class:el::base::IWorker
~Image	samples/OpenGL/Cube/imageloader.cpp	/^Image::~Image() {$/;"	f	class:Image
~Integer	samples/STL/make-loggable.cpp	/^    virtual ~Integer(void) { m_underlyingInt = -1; }$/;"	f	class:Integer	file:
~Integer	test/loggable-test.h	/^    virtual ~Integer(void) {$/;"	f	class:Integer
~IterableContainer	src/easylogging++.h	/^  virtual ~IterableContainer(void) {}$/;"	f	class:el::base::workarounds::IterableContainer
~JoinerWidget	samples/Qt/file-splitter-joiner/joinerwidget.cpp	/^JoinerWidget::~JoinerWidget() {$/;"	f	class:JoinerWidget
~ListWithSearch	samples/Qt/fast-dictionary/listwithsearch.cc	/^ListWithSearch::~ListWithSearch()$/;"	f	class:ListWithSearch
~LogBuilder	src/easylogging++.h	/^  virtual ~LogBuilder(void) {$/;"	f	class:el::LogBuilder
~LogFormat	src/easylogging++.h	/^  virtual ~LogFormat(void) {}$/;"	f	class:el::base::LogFormat
~Loggable	src/easylogging++.h	/^  virtual ~Loggable(void) {}$/;"	f	class:el::Loggable
~Logger	src/easylogging++.h	/^  virtual ~Logger(void) {$/;"	f	class:el::Logger
~MainWindow	samples/Qt/fast-dictionary/mainwindow.cc	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~MainWindow	samples/Qt/file-splitter-joiner/mainwindow.cpp	/^MainWindow::~MainWindow(void) {$/;"	f	class:MainWindow
~Mutex	src/easylogging++.h	/^  virtual ~Mutex(void) {$/;"	f	class:el::base::threading::internal::Mutex
~MyLib	samples/STL/shared-static-libs/lib/mylib.cpp	/^MyLib::~MyLib() {$/;"	f	class:MyLib
~MyPerformanceTrackingOutput	samples/STL/custom-performance-output.cpp	/^    virtual ~MyPerformanceTrackingOutput() {$/;"	f	class:MyPerformanceTrackingOutput	file:
~Mylib	samples/Qt/shared-lib/mylib/mylib.cc	/^Mylib::~Mylib()$/;"	f	class:Mylib
~PErrorWriter	src/easylogging++.cc	/^PErrorWriter::~PErrorWriter(void) {$/;"	f	class:el::base::PErrorWriter
~PartProcessor	samples/Qt/file-splitter-joiner/partprocessor.cpp	/^PartProcessor::~PartProcessor(void) {$/;"	f	class:PartProcessor
~PerformanceTracker	src/easylogging++.cc	/^PerformanceTracker::~PerformanceTracker(void) {$/;"	f	class:el::base::PerformanceTracker
~RegisteredLoggers	src/easylogging++.h	/^  virtual ~RegisteredLoggers(void) {$/;"	f	class:el::base::RegisteredLoggers
~Registry	src/easylogging++.h	/^  virtual ~Registry(void) {$/;"	f	class:el::base::utils::Registry
~RegistryWithPred	src/easylogging++.h	/^  virtual ~RegistryWithPred(void) {$/;"	f	class:el::base::utils::RegistryWithPred
~ScopedLock	src/easylogging++.h	/^  virtual ~ScopedLock(void) {$/;"	f	class:el::base::threading::internal::ScopedLock
~SplitterWidget	samples/Qt/file-splitter-joiner/splitterwidget.cpp	/^SplitterWidget::~SplitterWidget() {$/;"	f	class:SplitterWidget
~Storage	src/easylogging++.cc	/^Storage::~Storage(void) {$/;"	f	class:el::base::Storage
~ThreadSafe	src/easylogging++.h	/^  virtual ~ThreadSafe(void) {}$/;"	f	class:el::base::threading::ThreadSafe
~TypedConfigurations	src/easylogging++.h	/^  virtual ~TypedConfigurations(void) {$/;"	f	class:el::base::TypedConfigurations
~Vehicle	samples/STL/containers.cpp	/^        virtual ~Vehicle() {}$/;"	f	class:Vehicle	file:
~Window	samples/gtkmm/hello_gtkmm/window.cc	/^Window::~Window() {$/;"	f	class:Window
~auto_array	samples/OpenGL/Cube/imageloader.cpp	/^            ~auto_array() {$/;"	f	class:__anonaf8e80d60110::auto_array	file:
